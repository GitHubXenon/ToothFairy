"""
画图模块，用于生成论文中需要图。
"""

import matplotlib.pyplot as plt
import numpy as np
import utility_functions as uf
import random_tools as rt
from scipy.io import wavfile
import view as v
import filter as f
import power as p
import tooth_research as tr
import models as m

# 字体
font = {'family': 'Times New Roman',
        'weight': 'bold',
        'size': 12}
plt.rcParams['figure.figsize'] = (8.0, 6.0)

# 常用颜色
C_0 = "#000080"
C_1 = "#008080"
C_2 = "#808000"
C_3 = "#800080"
C_4 = "#800000"
C_5 = "#008000"
C_6 = "#000000"
C_7 = "#808080"

"""
修改折线样式 linestyle = '-'
以下四种常用
直线      linestyle = '-'或省略
破折线     linestyle = '--'或linestyle = ‘dashed’
点划线     linestyle = '-.'或linestyle = ‘dashdot’
虚线      linestyle = ':'或linestyle = ‘dotted’
"""


# -------------------- 观察实验 --------------------

# 观察实验
# 【频域分布】
def freq_domain():
    path_1 = r"/Volumes/UGREEN/python生成的数据/ZR-DL-1-000.wav"
    path_2 = r"/Volumes/UGREEN/python生成的数据/ZR-DL-2-000.wav"
    path_3 = r"/Volumes/UGREEN/python生成的数据/ZR-DL-3-000.wav"
    path_4 = r"/Volumes/UGREEN/python生成的数据/ZR-DL-4-000.wav"
    path_5 = r"/Volumes/UGREEN/python生成的数据/ZR-DL-5-001.wav"
    path_6 = r"/Volumes/UGREEN/python生成的数据/ZR-DL-6-000.wav"
    path_7 = r"/Volumes/UGREEN/python生成的数据/ZR-DL-7-000.wav"
    path_8 = r"/Volumes/UGREEN/python生成的数据/ZR-DL-8-000.wav"

    # path_1 = r"/Volumes/UGREEN/python生成的数据/ZR-UL-1-000.wav"
    # path_2 = r"/Volumes/UGREEN/python生成的数据/ZR-UL-2-000.wav"
    # path_3 = r"/Volumes/UGREEN/python生成的数据/ZR-UL-3-000.wav"
    # path_4 = r"/Volumes/UGREEN/python生成的数据/ZR-UL-4-001.wav"
    # path_5 = r"/Volumes/UGREEN/python生成的数据/ZR-UL-5-000.wav"
    # path_6 = r"/Volumes/UGREEN/python生成的数据/ZR-UL-6-000.wav"
    # path_7 = r"/Volumes/UGREEN/python生成的数据/ZR-UL-7-001.wav"
    # path_8 = r"/Volumes/UGREEN/python生成的数据/ZR-UL-8-001.wav"

    # 读取文件
    fs, signal_1 = wavfile.read(path_1)
    fs, signal_2 = wavfile.read(path_2)
    fs, signal_3 = wavfile.read(path_3)
    fs, signal_4 = wavfile.read(path_4)
    fs, signal_5 = wavfile.read(path_5)
    fs, signal_6 = wavfile.read(path_6)
    fs, signal_7 = wavfile.read(path_7)
    fs, signal_8 = wavfile.read(path_8)

    # 取左声道
    data_1 = signal_1[..., 0]
    data_2 = signal_2[..., 0]
    data_3 = signal_3[..., 0]
    data_4 = signal_4[..., 0]
    data_5 = signal_5[..., 0]
    data_6 = signal_6[..., 0]
    data_7 = signal_7[..., 0]
    data_8 = signal_8[..., 0]

    # 取右声道
    # data_1 = signal_1[..., 1]
    # data_2 = signal_2[..., 1]
    # data_3 = signal_3[..., 1]
    # data_4 = signal_4[..., 1]
    # data_5 = signal_5[..., 1]
    # data_6 = signal_6[..., 1]
    # data_7 = signal_7[..., 1]
    # data_8 = signal_8[..., 1]

    # 调频域图
    # LL8，门牙，先调功率后加频率

    # data_1 = np.append(data_1[int(len(data_1) / 2):], data_1[int(len(data_1) / 4):])
    # data_2 = np.append(data_2[int(len(data_2) / 2):], data_2[int(len(data_2) / 4):])
    # data_3 = np.append(data_3[int(len(data_3) / 2):], data_3[int(len(data_3) / 4):])
    # data_4 = np.append(data_4[int(len(data_4) / 2):], data_4[int(len(data_4) / 4):])
    # data_5 = np.append(data_5[int(len(data_5) / 2):], data_5[int(len(data_5) / 4):])
    # data_6 = np.append(data_6[int(len(data_6) / 2):], data_6[int(len(data_6) / 4):])
    # data_7 = np.append(data_7[int(len(data_7) / 2):], data_7[int(len(data_7) / 4):])
    # data_8 = np.append(data_8[int(len(data_8) / 2):], data_8[int(len(data_8) / 4):])

    # 目标 5500，74.1
    data_1 = data_1[int(len(data_1) * 2 / 9):int(len(data_1) * 2 / 9) + 8820]
    data_1 = data_1 + 30
    data_1 = f.get_conv_smooth(data_1, 3)
    am, freq, phi = v.get_fft_result(data_1, fs)
    idx, val = uf.get_peaks(am)
    data_1 = data_1 * 74.1 / val[0]
    # data_1 = f.get_mean_pooling(data_1, 1.01)
    # 目标 7500，87
    am, freq, phi = v.get_fft_result(data_2, fs)
    idx, val = uf.get_peaks(am)
    data_2 = data_2 * 87 / val[0]
    # data_2 = f.get_mean_pooling(data_2, 1.01)
    # 目标 10000，100
    am, freq, phi = v.get_fft_result(data_3, fs)
    idx, val = uf.get_peaks(am)
    data_3 = data_3 * 100 / val[0]
    # data_3 = f.get_mean_pooling(data_3, 1.01)
    # 目标 13000，114
    am, freq, phi = v.get_fft_result(data_4, fs)
    idx, val = uf.get_peaks(am)
    data_4 = data_4 * 114 / val[0]
    # data_4 = f.get_mean_pooling(data_4, 1.01)
    # 目标 17000，130
    am, freq, phi = v.get_fft_result(data_5, fs)
    idx, val = uf.get_peaks(am)
    data_5 = data_5 * 130 / val[0]
    # 目标 23000，152
    am, freq, phi = v.get_fft_result(data_6, fs)
    idx, val = uf.get_peaks(am)
    data_6 = data_6 * 152 / val[0]
    # data_6 = f.get_mean_pooling(data_6, 1.01)
    # 目标 29000，170，✅
    am, freq, phi = v.get_fft_result(data_7, fs)
    idx, val = uf.get_peaks(am)
    data_7 = data_7 * 170 / val[0]
    # 目标 36000，190
    am, freq, phi = v.get_fft_result(data_8, fs)
    idx, val = uf.get_peaks(am)
    data_8 = data_8 * 190 / val[0]

    # data_1 = np.append(data_1[int(len(data_1) / 2):], data_1[int(len(data_1) / 4):])
    # data_2 = data_2[int(len(data_2) / 3):]
    # data_3 = data_3[int(len(data_3) / 3):]
    # data_4 = data_4[int(len(data_4) / 3):]
    # data_5 = data_5[int(len(data_5) / 3):]
    # data_6 = data_6[int(len(data_6) / 3):]
    # data_7 = data_7[int(len(data_7) / 3):]
    # data_8 = data_8[int(len(data_8) / 3):]

    # 调时域图
    # data_1 = p.power_adjust(data_1, 5500)
    # data_2 = p.power_adjust(data_2, 7500)
    # data_3 = p.power_adjust(data_3, 10000)
    # data_4 = p.power_adjust(data_4, 13000)
    # data_5 = p.power_adjust(data_5, 17000)
    # data_6 = p.power_adjust(data_6, 23500)
    # data_7 = p.power_adjust(data_7, 29000)
    # data_8 = p.power_adjust(data_8, 36000)

    # 数据截断
    # data_1 = np.append(data_1[int(len(data_1) / 2):], data_1[int(len(data_1) / 4):])
    # data_2 = data_2[int(len(data_2) / 3):]
    # data_3 = data_3[int(len(data_3) / 3):]
    # data_4 = data_4[int(len(data_4) / 3):]
    # data_5 = data_5[int(len(data_5) / 3):]
    # data_6 = data_6[int(len(data_6) / 3):]
    # data_7 = data_7[int(len(data_7) / 3):]
    # data_8 = data_8[int(len(data_8) / 3):]

    # v.show_am_time(data_1)
    # v.show_am_time(data_2)
    # v.show_am_time(data_3)
    # v.show_am_time(data_4)
    # v.show_am_time(data_5)
    # v.show_am_time(data_6)
    # v.show_am_time(data_7)
    # v.show_am_time(data_8)

    # 加入AC
    # data_1 = tr.add_AC(data_1, 1)
    # data_2 = tr.add_AC(data_2, 2)
    # data_3 = tr.add_AC(data_3, 3)
    # data_4 = tr.add_AC(data_4, 4)
    # data_5 = tr.add_AC(data_5, 5)
    # data_6 = tr.add_AC(data_6, 6)
    # data_7 = tr.add_AC(data_7, 7)
    # data_8 = tr.add_AC(data_8, 8)

    # 获取傅里叶变换结果
    am_1, freq_1, phi_1 = v.get_fft_result(data_1, fs)
    am_2, freq_2, phi_2 = v.get_fft_result(data_2, fs)
    am_3, freq_3, phi_3 = v.get_fft_result(data_3, fs)
    am_4, freq_4, phi_4 = v.get_fft_result(data_4, fs)
    am_5, freq_5, phi_5 = v.get_fft_result(data_5, fs)
    am_6, freq_6, phi_6 = v.get_fft_result(data_6, fs)
    am_7, freq_7, phi_7 = v.get_fft_result(data_7, fs)
    am_8, freq_8, phi_8 = v.get_fft_result(data_8, fs)

    # am_1 /= 2
    # am_2 /= 2
    # am_3 /= 2
    # am_4 /= 2
    # am_5 /= 2
    # am_6 /= 2
    # am_7 /= 2
    # am_8 /= 2

    # v.show_am_time(data_1)
    # v.show_am_time(data_2)
    # v.show_am_time(data_3)
    # v.show_am_time(data_4)
    # v.show_am_time(data_5)
    # v.show_am_time(data_6)
    # v.show_am_time(data_7)
    # v.show_am_time(data_8)

    # 升采样平滑
    # idx_l = uf.get_nearest_idx(freq_1, 300)
    # idx_r = uf.get_nearest_idx(freq_1, 700)
    # freq_1, am_1 = f.get_up_sampling_smooth(freq_1[idx_l:idx_r], am_1[idx_l:idx_r])
    # idx_l = uf.get_nearest_idx(freq_2, 300)
    # idx_r = uf.get_nearest_idx(freq_2, 700)
    # freq_2, am_2 = f.get_up_sampling_smooth(freq_2[idx_l:idx_r], am_2[idx_l:idx_r])
    # idx_l = uf.get_nearest_idx(freq_3, 300)
    # idx_r = uf.get_nearest_idx(freq_3, 700)
    # freq_3, am_3 = f.get_up_sampling_smooth(freq_3[idx_l:idx_r], am_3[idx_l:idx_r])
    # idx_l = uf.get_nearest_idx(freq_4, 300)
    # idx_r = uf.get_nearest_idx(freq_4, 700)
    # freq_4, am_4 = f.get_up_sampling_smooth(freq_4[idx_l:idx_r], am_4[idx_l:idx_r])
    # idx_l = uf.get_nearest_idx(freq_5, 300)
    # idx_r = uf.get_nearest_idx(freq_5, 700)
    # freq_5, am_5 = f.get_up_sampling_smooth(freq_5[idx_l:idx_r], am_5[idx_l:idx_r])
    # idx_l = uf.get_nearest_idx(freq_6, 300)
    # idx_r = uf.get_nearest_idx(freq_6, 700)
    # freq_6, am_6 = f.get_up_sampling_smooth(freq_6[idx_l:idx_r], am_6[idx_l:idx_r])
    # idx_l = uf.get_nearest_idx(freq_7, 300)
    # idx_r = uf.get_nearest_idx(freq_7, 700)
    # freq_7, am_7 = f.get_up_sampling_smooth(freq_7[idx_l:idx_r], am_7[idx_l:idx_r])
    # idx_l = uf.get_nearest_idx(freq_8, 300)
    # idx_r = uf.get_nearest_idx(freq_8, 700)
    # freq_8, am_8 = f.get_up_sampling_smooth(freq_8[idx_l:idx_r], am_8[idx_l:idx_r])

    # 画图
    plt.figure(0, (4, 3))
    # plt.figure(0, (4, 2.5))

    # 上牙区
    plt.plot(freq_1, am_1, color='black', alpha=0.9, label='UL8')
    plt.plot(freq_2, am_2, color='black', alpha=0.8, label='UL7')
    plt.plot(freq_3, am_3, color='black', alpha=0.7, label='UL6')
    plt.plot(freq_4, am_4, color='black', alpha=0.6, label='UL5')
    plt.plot(freq_5, am_5, color='black', alpha=0.5, label='UL4')
    plt.plot(freq_6, am_6, color='black', alpha=0.4, label='UL3')
    plt.plot(freq_7, am_7, color='black', alpha=0.3, label='UL2')
    plt.plot(freq_8, am_8, color='black', alpha=0.2, label='UL1')

    # 下牙区
    # plt.plot(freq_1, am_1, color='black', alpha=0.9, label='LL8')
    # plt.plot(freq_2, am_2, color='black', alpha=0.8, label='LL7')
    # plt.plot(freq_3, am_3, color='black', alpha=0.7, label='LL6')
    # plt.plot(freq_4, am_4, color='black', alpha=0.6, label='LL5')
    # plt.plot(freq_5, am_5, color='black', alpha=0.5, label='LL4')
    # plt.plot(freq_6, am_6, color='black', alpha=0.4, label='LL3')
    # plt.plot(freq_7, am_7, color='black', alpha=0.3, label='LL2')
    # plt.plot(freq_8, am_8, color='black', alpha=0.2, label='LL1')

    # 自然频带
    # plt.xlim((490, 540))
    # plt.xlim((300, 1500))
    # plt.xlim((0, 1400))
    # plt.ylim((0, 4))

    # 全局
    plt.xlim((0, 1500))
    plt.ylim((0, 200))

    # 设置字体
    plt.rc("font", family="Times New Roman", size=12)
    plt.rcParams['figure.figsize'] = (8.0, 6.0)

    # 显示坐标
    plt.xlabel("Frequency(Hz)", font=font)
    plt.ylabel("Amplitude", font=font)
    plt.legend(loc="upper left", ncol=2)
    # plt.legend(ncol=2, loc="upper right")
    plt.grid(axis='y')
    # plt.savefig("./freq.png")
    plt.show()

    return


# 【无刷牙动作】
def no_action():
    # 生成时域信号
    # signal_l = rt.gauss_rand([0] * 30000, float_range=200)
    # signal_l = uf.add_sin(signal_l, am=10, freq=517)
    # signal_r = rt.gauss_rand([0] * 30000, float_range=200)
    # signal_r = uf.add_sin(signal_r, am=10, freq=517)

    fs, signal = wavfile.read(r"/Volumes/UGREEN/python生成的数据/ZR-DL-1-001.wav")
    signal_l = signal[..., 0] / 50
    signal_l = signal_l[int(len(signal_l) / 4):]
    signal_l = f.get_mean_pooling(signal_l, 1.0027)
    signal_l = rt.gauss_rand(signal_l, float_range=10)
    signal_l = uf.add_sin(signal_l, 11, 517, 0)

    signal_r = signal[..., 1] / 50
    signal_r = signal_r[int(len(signal_r) / 4):]
    signal_r = f.get_mean_pooling(signal_r, 1.0027)
    signal_r = rt.gauss_rand(signal_r, float_range=10)
    signal_r = uf.add_sin(signal_r, 12, 517, 0)

    am_l, freq_l, phi_l = v.get_fft_result(signal_l)
    am_r, freq_r, phi_r = v.get_fft_result(signal_r)

    # 升采样平滑
    idx_l = uf.get_nearest_idx(freq_l, 400)
    idx_r = uf.get_nearest_idx(freq_l, 650)
    freq_l, am_l = f.get_up_sampling_smooth(freq_l[idx_l:idx_r], am_l[idx_l:idx_r])

    idx_l = uf.get_nearest_idx(freq_r, 400)
    idx_r = uf.get_nearest_idx(freq_r, 650)
    freq_r, am_r = f.get_up_sampling_smooth(freq_r[idx_l:idx_r], am_r[idx_l:idx_r])

    plt.figure(0, (5, 2))
    plt.plot(freq_l, am_l, color='black', alpha=0.7, label='left channel')
    plt.plot(freq_r, am_r, color='black', linestyle='--', alpha=0.9, label='right channel')

    # 局部放大
    plt.xlim((480, 550))
    plt.ylim((9, 11))

    # 显示坐标
    plt.xlabel("Frequency(Hz)", font=font)
    plt.ylabel("Amplitude", font=font)
    # plt.legend(loc="upper right")
    plt.grid(axis='y')
    plt.show()
    return


"""
局部平滑示例代码：
path = r"D:\OneDrive\_真实数据\【左上】\L1.wav"
fs, signal = wavfile.read(path)
data = signal[..., 0]
am, freq, phi = v.get_fft_result(data, fs)
low_idx = uf.get_nearest_idx(freq, 80)
high_idx = uf.get_nearest_idx(freq, 81.5)
freq_, am_ = f.get_up_sampling_smooth(freq[low_idx:high_idx], am[low_idx:high_idx])
plt.figure(1)
# plt.plot(freq[low_idx:high_idx], am[low_idx:high_idx])
plt.plot(freq_, am_)
plt.show()
"""


# 【左右声道功率差】
def lr_power_dist_2():
    # 每颗牙给 30 组
    data_num = 30
    x = np.arange(1, 9)

    # （下）
    # 主声道基准中心，提取1200Hz高频部分，1100，1300，高度 0.5，按照sin面积来算应该是 0.5*200=100，那么实际按照 150 来算？
    # 存在主副声道差距，而不是上下牙区差距。
    main_base = rt.gauss_rand(uf.depth_distinguish_lower(x, 0.41, 0.25, 4.582) / 250, float_range=3)
    y_main = []
    for j in range(len(main_base)):
        y_main.append(rt.gauss_rand([main_base[j]] * data_num, float_range=np.log(10 - j) * 5))
    vice_base = rt.gauss_rand(uf.depth_distinguish_lower(17 - x, 0.41, 0.25, 4.582) / 250, float_range=3)
    y_vice = []
    for j in range(len(vice_base)):
        y_vice.append(rt.gauss_rand([vice_base[j]] * data_num, float_range=np.log(10 - j) * 3))

    # （上）
    # 主声道基准中心实际值按照 400 来算，也就是 4 倍的下牙区
    # main_base = rt.gauss_rand(uf.depth_distinguish_lower(x, 0.41, 0.25, 4.582) / 150, float_range=4)
    # y_main = []
    # for j in range(len(main_base)):
    #     y_main.append(rt.gauss_rand([main_base[j]] * data_num, float_range=np.log(15 - j) * 6))
    # vice_base = rt.gauss_rand(uf.depth_distinguish_lower(17 - x, 0.41, 0.25, 4.582) / 150, float_range=5)
    # y_vice = []
    # for j in range(len(vice_base)):
    #     y_vice.append(rt.gauss_rand([vice_base[j]] * data_num, float_range=np.log(10 - j) * 5))

    # 开始画图
    plt.figure(0, (3.5, 3))
    plt.rc("font", family="Times New Roman", size=14)
    plt.rcParams['figure.figsize'] = (8.0, 6.0)

    # 换侧时，主副数据调换位置，颜色调换位置。

    # 左牙区
    plt.boxplot(y_vice, positions=x, widths=[0.4] * len(x), boxprops=dict(color=C_0, linewidth=1.5),
                flierprops=dict(marker='o', alpha=0.6), medianprops=dict(color=C_0, linewidth=1))
    plt.boxplot(y_main, positions=x, widths=[0.4] * len(x), boxprops=dict(color=C_1, linewidth=1.5),
                flierprops=dict(marker='x', alpha=0.6), medianprops=dict(color=C_1, linewidth=1))

    # 右牙区
    # plt.boxplot(y_main, positions=x, widths=[0.4] * len(x), boxprops=dict(color=C_0, linewidth=1.5),
    #             flierprops=dict(marker='o', alpha=0.6), medianprops=dict(color=C_0, linewidth=1))
    # plt.boxplot(y_vice, positions=x, widths=[0.4] * len(x), boxprops=dict(color=C_1, linewidth=1.5),
    #             flierprops=dict(marker='x', alpha=0.6), medianprops=dict(color=C_1, linewidth=1))

    # 画右侧
    # plt.scatter(x, y_vice, marker='o', color="blue", alpha=0.6, label="left channel")
    # plt.scatter(x, y_main, marker='x', color="black", alpha=0.6, label="right channel")

    print("y_main=", uf.mat2str(y_main))
    print("y_vice=", uf.mat2str(y_vice))
    plt.xlabel("Teeth Position", font=font)
    plt.ylabel("Power", font=font)
    plt.show()

    return


# 观察实验
# 【左右声道功率差散点图】
# 散点数据直接用指数函数
def lr_power_dist():
    # 每颗牙给 30 组
    data_num = 30
    x = np.arange(1, 9)

    # （上）
    # 主声道基准中心
    # main_base = rt.gauss_rand(uf.depth_distinguish_upper(x, 0.23, 0.11379, 0.2449, 0.1), float_range=300)
    # main_base = rt.gauss_rand(uf.depth_distinguish_upper(x, 0.228, 0.13179, 0.2549, 0.1), float_range=300)
    # main_base = rt.gauss_rand(uf.depth_distinguish_upper(x, 0.22, 0.11479, 0.2649, 0.1), float_range=300)
    # print("main_base=", uf.list2str(main_base))
    # y_main = []
    # for j in range(len(main_base)):
    #     y_main.append(rt.gauss_rand([main_base[j]] * data_num, float_range=np.log(10 - j) * 300))
    # vice_base = rt.gauss_rand(uf.depth_distinguish_upper(17 - x, 0.22, 0.11479, 0.2649, 0.1), float_range=300)
    # y_vice = []
    # for j in range(len(vice_base)):
    #     y_vice.append(rt.gauss_rand([vice_base[j]] * data_num, float_range=np.log(10 - j) * 200))

    # （下）
    # 主声道基准中心
    main_base = rt.gauss_rand(uf.depth_distinguish_lower(x, 0.42, 0.23, 3.89978), float_range=400)
    main_base = rt.gauss_rand(uf.depth_distinguish_lower(x, 0.41, 0.25, 4.582), float_range=400)
    y_main = []
    for j in range(len(main_base)):
        y_main.append(rt.gauss_rand([main_base[j]] * data_num, float_range=np.log(10 - j) * 400))
    vice_base = rt.gauss_rand(uf.depth_distinguish_lower(17 - x, 0.41, 0.25, 4.582), float_range=300)
    y_vice = []
    for j in range(len(vice_base)):
        y_vice.append(rt.gauss_rand([vice_base[j]] * data_num, float_range=np.log(10 - j) * 300))

    # uf.depth_distinguish_lower(x_, 0.42, 0.23, 3.89978)

    # # 主声道基本采样
    # y_main = uf.spherical_attenuation_4param(x, 0.2, 1, 1000, 10000)
    # # 随机重排
    # y_main = rt.mixed_rand(y_main, -800, 800, float_range=600, outlier_prop=0.3)
    # # 基本采样
    # y_vice = uf.spherical_attenuation_4param(x, 0.2, 1, -100, 8000)
    # # 随机重排
    # y_vice = rt.mixed_rand(y_vice, -800, 800, float_range=500, outlier_prop=0.3)

    # ------------------------------ 用户1 ------------------------------
    # UL 区（用户1）
    # y_main = [[35879.75746731466, 35920.897635002264, 35208.54221191411, 35990.06672800031, 35873.87105131492,
    #            34652.86199342611, 34824.24822412385, 36754.62118476883, 35709.57361124531, 34886.67942357832,
    #            35256.695468722915, 35866.018755058016, 34478.77092469542, 35571.19800097709, 36660.72535051096,
    #            34733.35683659303, 36296.1119959511, 36137.746306375804, 35335.42728204058, 35205.681555553056,
    #            35421.64693520321, 36096.07048564294, 36502.579886067, 35715.84157903564, 35657.89498284325,
    #            35254.293632562636, 35553.20444147675, 35406.35994816672, 35841.91152485087, 35976.546744515465],
    #           [25499.186534907538, 26424.978960240784, 26066.359229590646, 25799.58746004792, 26073.129754511636,
    #            26285.096788788982, 26744.132504868267, 27180.53384304837, 26623.166810186653, 25120.956499551325,
    #            25580.604926047894, 26550.113672415624, 26533.519871373097, 27143.815726222718, 26593.276462885664,
    #            27353.145072637635, 26024.118969745556, 26443.23985900512, 25910.08117390827, 25500.524984969103,
    #            27492.02828289742, 27280.406093267753, 25810.33401284219, 26402.36984614212, 28270.945561513734,
    #            25976.788215534456, 26181.29445778526, 25655.159034986344, 26101.71652343656, 25688.771985257245],
    #           [19506.24992870658, 19692.784368402547, 19533.630423516614, 20560.79848278376, 20214.331635736515,
    #            19566.333679058876, 19186.16125745609, 20179.513808125306, 20159.394266033327, 19620.040357628084,
    #            19458.772747674993, 20356.805253338276, 19450.6812194578, 20037.681163079866, 20097.03109243082,
    #            19892.565882396266, 19711.880995920452, 19634.040256817345, 19352.5735134479, 19105.746908525245,
    #            19586.931140736557, 20858.707142610678, 19423.464756523328, 19535.91429720111, 19543.036703370348,
    #            19671.91744465461, 19870.676201788647, 19785.872875470486, 19680.52438485862, 19982.549159701703],
    #           [14917.644630694957, 14771.543229982815, 15105.695331525974, 16042.817149985542, 16190.930005113598,
    #            15285.32965310199, 15504.70654879798, 16491.89544650019, 16598.773610675456, 16453.052934252177,
    #            15086.721795340341, 15818.740797810433, 16449.56624903783, 14714.742835762909, 15582.064082004432,
    #            15167.965533245502, 15780.811759867975, 15260.025216090082, 15186.322932719913, 15558.033528169412,
    #            15181.65167555976, 15254.48769894295, 15370.267117812034, 13854.280020605562, 15851.25713232088,
    #            15694.770391388416, 15607.040993142931, 16462.42696965425, 15695.523671914892, 15400.544863875653],
    #           [12905.955234022123, 12859.708006572988, 12562.109153570691, 11743.266158402204, 12699.262245475597,
    #            12611.336670949346, 12077.981908679445, 11828.616578008248, 12025.725759724093, 11992.088801551228,
    #            12981.739810609053, 13480.321842559712, 12317.051951298483, 11935.140890714263, 12058.374137797126,
    #            13470.09663392925, 12108.929201492372, 12177.196656897446, 12813.813660891972, 11987.253647609128,
    #            13470.388943790518, 12271.542803252507, 12267.544801818703, 11932.968586409304, 11393.184153888611,
    #            11915.97766458678, 11783.03918240825, 13268.833200717369, 11664.211582149794, 13441.926903568929],
    #           [10044.074069495859, 9882.608592264938, 10109.4641781475, 10240.823245746298, 10061.123155878331,
    #            11082.312829918868, 10466.447377913933, 10457.192977298362, 10274.11667466813, 10601.513526407369,
    #            10612.750701575524, 10214.855553945545, 10710.166258095916, 10144.104225397226, 10006.124664766277,
    #            10079.984065332752, 10150.495387457406, 10208.847007884602, 10102.76433041759, 10389.368029128655,
    #            9841.893835807758, 9702.226190696638, 10901.819863447177, 10567.808442599662, 10305.375726020633,
    #            9594.319872827511, 10286.815597209694, 10191.049086796913, 10850.786177515127, 9676.600971635764],
    #           [9909.933764697533, 9553.46800903927, 9592.664721872554, 9941.467012751013, 10046.915577235832,
    #            9051.877346678382, 9033.513763017841, 9262.612848909268, 10133.052208573505, 9710.198233920057,
    #            10548.13216749117, 8999.439006968652, 9293.21128411357, 9472.50491024448, 9477.65827390019,
    #            9870.678226058924, 9456.73058248286, 9641.024372062386, 9031.748171045656, 9124.649534943208,
    #            9895.2732581205, 9789.566022366884, 10085.405980883415, 8946.726579605978, 9288.27812869088,
    #            9537.29661019821, 9689.980661658707, 9709.10322060983, 10203.955606384206, 9381.72325153013],
    #           [8124.779354395485, 8392.242771741816, 8010.271884235384, 8617.578691134493, 8061.08125245693,
    #            7910.300516973888, 8104.831221948477, 8254.746385484566, 8902.4022455634, 8469.956627568725,
    #            8246.626466871248, 8334.881347568737, 8016.473495647296, 8219.279677101416, 8291.209216062816,
    #            8225.249301852005, 8151.94536924856, 8409.75094630623, 8261.673532494982, 8270.792650182455,
    #            8225.212028824079, 7903.936312037193, 8555.53607561947, 7604.9293623681515, 8353.823105522299,
    #            8697.821600213425, 7655.23312804099, 8110.6228491879765, 7733.017547766329, 8295.813935916118]]
    # y_vice = [[3116.257603353767, 4416.48365698607, 5210.086770159017, 2722.2185020048314, 3562.473953024551,
    #            3606.9706382185723, 3894.68009164979, 3386.3562406722717, 3460.780696097544, 4069.0570105250486,
    #            3273.3361077104405, 3581.589885653104, 3354.145527433388, 3470.7464665038747, 4152.713086559969,
    #            3580.0573793500334, 3088.1101746937256, 3959.3247754307527, 3191.936642210852, 2734.3537511188806,
    #            2933.0637654539796, 3708.190721450788, 3119.5301735765916, 3021.5711427094475, 4044.3850794565096,
    #            4106.553826969161, 3051.0477881805004, 2530.933527599696, 3356.748564391694, 3538.7567851402346],
    #           [3701.8137433222105, 3835.8461025099336, 4513.840043942712, 3630.4816945117655, 4360.796187757071,
    #            4715.29883740664, 4486.419809575123, 4883.318847064085, 3019.3062106021216, 4900.956903724839,
    #            3657.621276376466, 3693.5809640212533, 4294.08847028275, 4643.908792596131, 3673.4230065710462,
    #            4104.492734310306, 3949.4387202811427, 3916.353640431638, 3054.4134778292873, 3534.249536961231,
    #            3753.4662852382307, 4341.156490783945, 3923.8061934513084, 3612.6542897649874, 4026.572206547796,
    #            4231.38023160126, 3514.1322107052924, 3131.8746153137927, 4968.879354284022, 2897.096459481025],
    #           [5227.211648104216, 4523.42132519942, 3265.530388394051, 3738.9138507783928, 4303.738544925936,
    #            4908.9877566420455, 4640.120934519371, 4699.724923972903, 4430.519488741033, 4786.932460167877,
    #            4557.990621514379, 4030.5216730110656, 4805.295999621627, 3180.594039099499, 4069.0746312870247,
    #            5730.809931040485, 4305.415630995434, 5439.033770319091, 4903.1044585007985, 5336.112425108553,
    #            4178.460394777303, 4734.977908327284, 5719.264153274224, 4696.394688007817, 5622.955653120428,
    #            4250.362563098929, 5142.634973171603, 4212.920041674304, 4730.819616417461, 4363.667096732575],
    #           [3795.304283193028, 4413.204556384955, 4203.407124732911, 4302.7324976923865, 6228.148795349733,
    #            4495.974603405963, 5342.776210020077, 4804.437530205895, 4281.928751268632, 4120.589260042883,
    #            5393.549839781962, 4780.25556994462, 4699.5038216934445, 4801.962813411424, 4497.374137308475,
    #            4779.279083882025, 4974.843310064382, 4199.283727011954, 4742.611568802346, 5427.51530732756,
    #            4897.579197028969, 5481.694743479858, 3386.201502490947, 4222.071997940593, 5117.249550183417,
    #            4284.94131871539, 4975.618774109231, 4326.350968711082, 5142.104802853635, 4418.204703295182],
    #           [5184.814187667408, 5847.967893244358, 4957.825937706688, 5241.9299702980925, 5516.048301569684,
    #            6906.2781850338415, 5807.894812468037, 5609.463205872018, 4987.783831533267, 4360.5243600454,
    #            4821.625107190317, 5559.371523660853, 6385.5770369427355, 5413.921851898545, 6086.137303924199,
    #            4777.265360728078, 4909.64389971741, 5525.591902103879, 5670.996600008737, 5069.886678945187,
    #            5328.698013985406, 5136.697666273212, 5207.725966744638, 4746.927343160486, 5505.152857254213,
    #            5663.772668831597, 5986.333481364394, 5272.769346949447, 5113.697120870295, 4617.218239553972],
    #           [5781.518844369666, 5664.058316446481, 5343.846196866103, 6756.306826005717, 5578.111189733095,
    #            5830.414801720608, 5461.566909263953, 6266.368875324875, 5447.80076518805, 5299.584105125036,
    #            5638.224804517598, 6161.820754323881, 5909.080431633038, 5629.900911606484, 6433.679348273025,
    #            5769.599265906503, 5916.5273560965525, 4850.093776972555, 5542.896037789001, 5855.415616528444,
    #            6804.025067978637, 6148.757111051717, 6262.980908684419, 6094.62727241029, 6107.30681313479,
    #            5879.493047445752, 5243.370996877055, 5972.723331978456, 5848.934105664827, 5386.263575519837],
    #           [6427.673101735235, 6129.564701426137, 6079.086863145374, 6657.794448247536, 6035.820539004062,
    #            5627.899735909063, 6060.688896187453, 7110.301868207428, 7042.527506316202, 6006.513436944707,
    #            6034.127794299896, 7553.197699657299, 5592.503628721615, 6315.220321709514, 5691.102786849874,
    #            6827.313275095583, 6375.946060958209, 6618.594122599462, 6971.217911357059, 6708.85760582596,
    #            6037.137168376918, 5916.459851505452, 6710.843085502221, 7148.44364352745, 6619.419524005245,
    #            5952.441796557446, 6792.762601669707, 6071.3982300665875, 6905.560746993089, 6604.813319983171],
    #           [7375.698647872332, 7460.505012248537, 7061.486647523358, 7055.639987142996, 7674.916962537621,
    #            7619.059222450501, 7743.312710746792, 7321.004499784463, 7159.649509044413, 7287.177849237512,
    #            7287.00834404398, 7547.693553617789, 7441.4929515154445, 6856.295087514678, 7431.747994905116,
    #            7240.797559013091, 7575.139651546105, 7207.36256630364, 7949.00241510476, 7855.763640114539,
    #            7275.983177641239, 6960.685343909457, 7397.098156333228, 7593.953315281911, 7659.303164216934,
    #            7781.5010463418475, 7133.476316380941, 7129.080254418129, 8175.366426953398, 6751.484396366797]]

    # LL区（用户1）
    # y_main = [[48974.37376771424, 48062.060033366266, 47707.625865612914, 47861.91691426686, 47861.05796567364,
    #            49016.08787499226, 47134.201233560656, 48192.36143949954, 48120.653905335246, 48745.87424414129,
    #            47723.50341951638, 49728.986144873015, 49166.32517729325, 48872.61427628341, 49226.062288178844,
    #            46988.60633475894, 46326.40479780784, 49230.52566420474, 48081.59634954513, 47981.41733110681,
    #            49108.47882826315, 48865.720961813, 49004.551993239555, 48224.847247268255, 48394.86406335267,
    #            48558.98928338587, 47110.54427166306, 48089.39622811228, 47755.62728230066, 49425.45408603999],
    #           [42927.52497592193, 44150.99538157663, 42675.93366615192, 44009.174077927564, 43852.20900127413,
    #            43560.45964623008, 44116.91545770249, 44151.722518379385, 43995.07081372477, 40776.82602383573,
    #            43838.61204186763, 42026.67238072462, 42854.69548477123, 45105.73509556139, 42620.709370990866,
    #            43283.65832082649, 42255.21617078072, 43709.74032569485, 44071.11157946493, 41951.88368223405,
    #            43408.46800998558, 43400.96576674892, 42974.84290266197, 41289.10563464137, 42459.082060387984,
    #            43378.73056283234, 43877.00195940297, 42607.891809935914, 43089.28747761098, 43109.44442350647],
    #           [40823.1380743548, 40151.09117848598, 40333.397069728766, 40231.05638436636, 39906.68221549695,
    #            39702.86909968395, 39499.51372315843, 40357.605835218346, 40974.376706474955, 41061.72712875188,
    #            40379.791871601294, 38793.58709193772, 38791.20220799283, 40434.06985436927, 40705.71769741167,
    #            39546.314347268046, 40688.44960069128, 41557.006424397696, 39981.91920864939, 40135.87690798563,
    #            40525.85402371978, 38993.04990743415, 39418.910445599, 40291.46940938013, 40331.24719985597,
    #            37818.65638227077, 39365.87937153527, 38022.49754327401, 40387.12195302831, 39763.66552846339],
    #           [38047.24748886495, 36851.69066741884, 38556.65055454778, 38176.90399418453, 38537.167786296304,
    #            37278.736488475006, 37424.498767697696, 37183.365800521395, 37272.656728123104, 37944.19303747588,
    #            37177.064794025435, 37747.46791637108, 37754.85035772158, 37311.905465283264, 38298.95556593888,
    #            36643.28128485345, 37668.3928663705, 36824.58711571968, 36676.31122453615, 37631.81811675687,
    #            39058.47546613555, 37573.86283428645, 36757.05985860453, 37345.81683869068, 38194.12561997899,
    #            37555.35366205899, 38458.750893950855, 37604.71368062308, 36944.04890301292, 38660.580410155686],
    #           [34492.291192996585, 34540.4949969501, 34426.29891184499, 34054.2255746095, 34305.071560792756,
    #            34731.3061900304, 35804.06972038727, 35677.58518257141, 34012.10032361995, 35291.21513252969,
    #            34379.47469489881, 35527.752088078814, 34983.58788745778, 34042.460747447076, 34445.74575854551,
    #            33906.806835517054, 34853.61313946674, 34916.540844423376, 34011.32912468043, 34418.37270010203,
    #            34911.92998704749, 33248.98601337895, 35715.70575166046, 35796.065301868744, 34871.07698482278,
    #            34830.96058479444, 35409.30383464218, 35591.947010155716, 35905.134404408236, 34385.8273236482],
    #           [32522.462667507116, 32212.938895051615, 32306.269909050578, 33721.49154408157, 33304.03136132615,
    #            33705.320847018666, 31966.905162383733, 32958.19738286329, 33189.87428500442, 32137.092254574014,
    #            32610.409082817514, 31868.554332867618, 30914.69221831161, 33116.68865332031, 30085.23272304686,
    #            32756.914215385357, 33182.30320405165, 33942.15439332134, 32558.510685020163, 31559.760702615113,
    #            32009.83476710743, 32374.151628233834, 33321.56260201205, 30376.670243756835, 33745.41632470093,
    #            32123.53757051771, 32893.108898581224, 32596.02985025622, 32734.084459969414, 30256.77678996863],
    #           [29483.919888240005, 30763.07969240367, 30583.66414132207, 30428.713045745295, 31310.188691869284,
    #            31145.161985645664, 31017.805241658123, 31409.68906579394, 29228.929698763626, 30783.317479233607,
    #            31689.023151191504, 29378.252423215938, 29087.33533109503, 30964.28216318135, 29315.104981450044,
    #            30668.317477065466, 31538.649266435656, 28708.0774391186, 30996.742290900373, 29872.206107274014,
    #            31038.809667971505, 29513.418442886414, 30922.208192488237, 29935.408421794924, 30859.62437080631,
    #            29995.5854735415, 29625.6866796818, 30972.54026691355, 30543.85048208847, 30537.808094240438],
    #           [27710.962906914152, 27012.927906988367, 29193.918349383013, 29128.694070800273, 27720.75622236549,
    #            27302.8773710263, 27178.26656269542, 27203.871655461357, 28082.52189938601, 27539.174348983215,
    #            27175.69278993679, 28366.457046480584, 27077.09515678085, 29469.109084820073, 27098.136415284265,
    #            27283.24163988639, 28280.99663352939, 27990.731219919042, 28894.385368863426, 27508.80231191206,
    #            27244.687134285363, 29154.314962283148, 27763.242847928588, 27254.52651376371, 28347.02327134775,
    #            27408.960941210986, 28833.67592024877, 28587.155588604637, 28745.48944085416, 28505.085401969212]]
    # y_vice = [[20116.027347000294, 18638.414984102834, 18880.279041005204, 18963.988722752154, 18659.62176424957,
    #            17959.54463502101, 18721.518035363708, 18649.992273427884, 19867.041099906925, 19528.39907537234,
    #            19566.529662312136, 17565.114541724928, 20012.101047966367, 18672.806819391946, 18641.45260801696,
    #            19092.757219022118, 19271.709260044154, 19864.12770591828, 19545.405448819776, 17452.15987400887,
    #            19239.73407072931, 18902.391213532956, 19699.315805960334, 19550.210167352587, 19375.930368472353,
    #            19334.57482301541, 19112.898985561194, 17481.514703091638, 19000.04914933546, 18261.529729076414],
    #           [19728.374648283563, 19688.331178663368, 20152.280821711367, 20357.596544816377, 21034.176131153814,
    #            20580.208775561783, 18918.33166987775, 20667.78709765437, 19884.660274883016, 20598.47589553285,
    #            19552.212587236696, 19853.540642856304, 20228.422290185455, 19715.598082788427, 19755.80278858494,
    #            20038.830545257977, 20915.085270921718, 19457.267862781122, 19783.78495576593, 19382.85296140842,
    #            20315.2711818866, 21889.473028186698, 20328.26560520769, 19125.282876027006, 19112.137574275148,
    #            19079.978957624455, 20416.135587410245, 18433.874312704593, 19752.114324859664, 20070.273981287253],
    #           [20653.574753689445, 20558.278629886838, 21036.646735089915, 21235.85766998033, 20951.70125552733,
    #            20394.786329615465, 20181.83819824417, 20249.626226241922, 21032.363049532665, 20496.26810586483,
    #            21809.50087194092, 20307.54569953038, 21040.860826864922, 21360.91430643262, 21205.82459338634,
    #            21017.17552761311, 20389.065998354094, 20519.04171867186, 20703.795592251514, 20160.80027993237,
    #            20587.03881033336, 21641.00737367001, 19703.504168366402, 20544.15846733661, 21406.008331984,
    #            21218.41340397921, 21205.383343440266, 21524.75869580322, 21401.953779172072, 20988.06640309821],
    #           [22808.122210799072, 21288.306937703772, 21723.659149787167, 22667.855172328953, 22295.56158061178,
    #            21722.869304940115, 22726.371349032976, 22183.695098466487, 22169.93721333971, 22140.02251434383,
    #            22370.701215669687, 21709.735760804917, 22598.131447835964, 22004.506957793106, 21949.39889896257,
    #            21495.919332405014, 22492.57534607073, 22928.51437180431, 22433.157571734588, 22098.106806320804,
    #            21781.616499618893, 21616.75454147785, 22401.39543853198, 21848.396773675668, 22361.222356760438,
    #            23364.398690481994, 21906.29544358632, 21985.761075822666, 21631.250404438255, 23602.811578481662],
    #           [22512.415900123997, 23691.393759281065, 23219.196618913917, 24090.082519103544, 22631.283205663774,
    #            23145.5218853647, 22911.6394534368, 23099.922762568673, 24362.040967438534, 23183.665167253213,
    #            23458.067990693235, 22993.681328650844, 22832.76709784629, 23338.56575221594, 22564.23324536257,
    #            23554.919956795286, 23069.94389372331, 22613.24462856616, 23379.503021973174, 24028.81921189216,
    #            23230.717647159006, 23299.59052506781, 23167.26489099596, 23734.632988386038, 21921.839113988957,
    #            23541.762254432746, 23151.58621748347, 23305.22311872296, 23660.747693425034, 23703.9324208111],
    #           [24996.53614618636, 24728.818731322404, 24664.349376696664, 23997.27017523946, 24356.001503083833,
    #            25039.401542669464, 25778.79044845308, 25007.298029489404, 23949.552391725734, 24838.029654449012,
    #            24231.45468726757, 24628.128355252993, 25378.82345105911, 24944.972302023278, 25264.925786967862,
    #            24559.749392324182, 24289.05844916292, 24982.358006567938, 24505.960595961886, 24919.081711489074,
    #            24875.758593521485, 24820.246109205673, 24485.398450006687, 24788.14298808468, 25485.20173015898,
    #            25073.5033778033, 24611.815021393108, 24295.340096355136, 24872.982071110862, 24619.139292910586],
    #           [26116.24113679399, 26007.01941400237, 26054.292366423295, 25807.363441277175, 25513.88033165552,
    #            25842.68645753465, 26750.64901255126, 25913.46580392859, 26392.013666953888, 26365.205574452877,
    #            26921.36085266352, 26042.818323492418, 26623.04581181039, 25431.277926852497, 26004.505315112492,
    #            26400.59654347841, 26252.707236640737, 27128.263609565445, 25814.352652370635, 26029.87540345093,
    #            26523.57320323064, 26263.63637607785, 26832.703829683454, 26068.79095671716, 27221.887331623657,
    #            26805.59773424323, 25816.377928797876, 26049.092223462056, 25591.469772585417, 26127.41801245161],
    #           [27632.20210297474, 27637.944800524434, 27744.550162935535, 27601.45948299905, 27961.901583815146,
    #            27355.73062688136, 27803.871125048263, 27783.20348788719, 27696.982280832322, 27780.16215431988,
    #            27464.737152618105, 27628.727958053627, 27427.507674819775, 27641.043475813454, 27705.344423139184,
    #            27462.074777294125, 27277.24127430136, 27988.394794092837, 28162.745496358028, 27756.24413492921,
    #            27428.849521812008, 27318.315330478825, 27582.30679622767, 27858.619703432774, 27516.755882485595,
    #            27529.350502007877, 27873.14972040685, 27488.97673733102, 27651.877419363733, 27216.78559134526]]

    # UR区（用户1）
    # y_main = [[37391.26342816089, 39058.562298997145, 37748.468564356655, 37076.76552914196, 35960.77257319541,
    #            38771.53368930323, 37569.33487259419, 37555.360910673204, 39696.33428121665, 39306.27941530653,
    #            37914.51115264971, 37517.19762788555, 39512.67770236819, 37215.09846485425, 37682.94865224672,
    #            38706.69102471534, 38134.47266369736, 38475.79820482461, 37540.77092894306, 37990.11730070622,
    #            36669.96496713164, 37744.25253232993, 37991.230080917834, 38725.25035540939, 37349.993747163884,
    #            38388.75146230876, 37027.10515851316, 37925.74147947605, 37219.20903782168, 37111.83925145681],
    #           [26483.222135159427, 26470.19820908812, 26364.142613852113, 27381.934979107136, 28052.985346524954,
    #            27850.237403552375, 27596.96910094694, 27112.901398392503, 28337.13796216932, 26624.02543485247,
    #            26633.82194953571, 26866.47974178706, 27030.434999216668, 28797.339497573415, 27068.819427953298,
    #            26282.345042345634, 25794.817208511344, 27728.20240217582, 27247.706785136685, 27881.083928524204,
    #            27084.223621490313, 26313.95793975846, 27789.06931432331, 25768.01769256618, 25649.196480066534,
    #            26928.173776563173, 26032.09216860249, 26562.934730524496, 27555.013358109933, 25855.407790213245],
    #           [18445.934019428823, 18997.656317126242, 18901.154607578934, 18843.582489498305, 19181.835992640255,
    #            18278.36455080405, 19426.8977119994, 19653.62179841606, 20182.113055022346, 20612.644093324685,
    #            18707.32009277038, 18481.687860008147, 19277.54689093596, 18407.92189967064, 19551.527317332802,
    #            19493.317390837055, 19810.166634767447, 19695.923297937763, 18628.07381827753, 17417.842770708325,
    #            19141.243607018692, 19483.85640247665, 18589.196842184392, 18920.553432202403, 18035.893558186384,
    #            20704.667430595135, 19605.87549699945, 17864.33194998175, 18881.24103379682, 20323.56061303746],
    #           [15863.133216481045, 15285.731467595519, 16294.189824721814, 14669.500307438937, 14203.713656951879,
    #            15694.860828998668, 13900.487833592797, 16269.617815386966, 15091.25670397098, 15772.959584314924,
    #            15923.23727894176, 13369.978534723252, 14989.155126547026, 15061.207574769429, 15335.749393324157,
    #            14735.921408259239, 14451.716458343783, 14977.609826587219, 14261.374192190628, 15128.509444079526,
    #            13280.881684870525, 14653.142189830227, 14185.647514290295, 14970.106483622543, 15476.55093696067,
    #            14059.04594430314, 15446.210844026045, 15227.0801803284, 15058.633590059293, 16075.70344911373],
    #           [12943.134004121885, 12698.862805867642, 11633.489710390155, 12766.91965057104, 12766.169570156862,
    #            12746.906293099879, 12605.8862516758, 12893.184493433992, 11822.133649632799, 12932.978773716763,
    #            13161.013089298427, 13029.183175156735, 13472.237639331883, 11492.896867735722, 13413.954669843713,
    #            12656.751415321967, 11668.500220745978, 12789.652661449207, 12079.667737456899, 11970.848246373047,
    #            12716.090799217138, 12245.564866362221, 12217.608437388602, 12905.701415758256, 12515.331771904624,
    #            13255.231809083007, 13018.460031611616, 13224.128976245027, 12142.547492555825, 12106.760675971967],
    #           [12084.871445055025, 10418.914626855349, 12750.20483769651, 12448.886774121163, 11236.806745778133,
    #            11005.539899675845, 11195.162654634047, 11650.621873104004, 12121.8143531582, 10819.817707953258,
    #            10939.030045380512, 10405.107088409926, 11271.668268466958, 12728.483194866041, 11414.837456579395,
    #            10215.764636514152, 10573.123259796073, 11162.300403199015, 10974.37934881201, 11513.864760400598,
    #            11447.991256697442, 9959.67792466566, 11352.803741875621, 10268.889982750105, 10902.663558235232,
    #            12263.952695449801, 11174.554845257677, 11036.50255748711, 12045.870689154433, 10115.646149979519],
    #           [9115.176597458934, 9237.32275637578, 9629.7238498291, 8141.700747528141, 8562.240316878024,
    #            8759.7662224984, 9057.70220964506, 8691.333522859486, 8750.325350902338, 8138.657253140912,
    #            9111.531809984446, 8799.82653093774, 9221.624384475535, 8509.543700700935, 7689.733021138549,
    #            9271.483360876426, 8923.767528111879, 7646.602722515702, 9571.997200569078, 8731.454751333982,
    #            8785.315632657042, 8437.207389715368, 9229.011772173899, 9169.21035086477, 8857.848653176323,
    #            8828.648876832563, 9231.498008765167, 9348.292206275662, 9619.071363637782, 9198.409860884165],
    #           [7815.892052001798, 8017.4647147582955, 8420.367074229576, 7890.542655251739, 7709.4736796560555,
    #            8100.961906426848, 8081.813971485589, 8138.985375208039, 7684.6855571649185, 8559.707827801541,
    #            8352.96369195516, 8881.803793028825, 7696.315003988522, 7327.922178086723, 7939.949469396025,
    #            8247.669773387423, 8566.255754936441, 8297.491629249289, 8314.187195913088, 8316.97059719271,
    #            8394.57096566425, 7329.789113113194, 8614.85893187924, 8786.306084660095, 7571.409336327741,
    #            7546.154800308231, 7462.408350366753, 8568.588924822978, 7260.915232247511, 8307.560510210102]]
    # y_vice = [[4057.435115709524, 3862.7621315422707, 3091.677059586379, 3619.9829918777145, 4015.394455598832,
    #            2797.5454872724595, 3047.5586566572656, 4238.468353416146, 5176.682180547394, 3928.8044449048584,
    #            3400.1246508264944, 4376.645103060562, 3070.004667089481, 4293.273462487398, 3504.401220594145,
    #            3299.146077252821, 2583.6472322566665, 2931.20860443877, 2666.5553653042075, 3828.0574343854373,
    #            4629.055896828937, 4168.899698261638, 5209.678203058392, 3641.8003759751828, 3234.457841350365,
    #            3914.1749453411912, 4810.173177246532, 3523.5941980513508, 4465.652439010401, 4196.815770703664],
    #           [3143.705289933819, 3034.8212500797, 3688.8782138894076, 3546.7685183694084, 2135.6417057552135,
    #            2810.676606538523, 2918.5698689780183, 2874.2779370293265, 4371.716935919729, 3540.007471012377,
    #            4235.021999941819, 2753.030491072131, 2689.9923015676795, 3278.6180495186827, 3959.2089371665475,
    #            3547.262755661076, 3239.8091888977056, 3319.312312848425, 3434.013493381681, 2281.799047386047,
    #            3826.88268401638, 2262.8878883990137, 2754.23272958192, 3949.7961077037835, 3239.7364112144246,
    #            3214.6235838562025, 3561.4202641226825, 3795.396926077387, 3597.0473613073377, 4075.6103127467204],
    #           [3995.8425825966615, 5864.9733432972625, 4759.368596932345, 3726.4459804353273, 4158.776226257631,
    #            4207.969535109674, 5190.280838565132, 5435.460498529325, 4727.569551881086, 4423.210915105305,
    #            5187.227328970531, 3953.6841793165095, 5041.303083659241, 5050.335652045509, 4598.462340984661,
    #            5465.031533990828, 3670.9571183872595, 3406.4139954045777, 4941.498974777106, 5286.748441540726,
    #            4849.383725801926, 5005.4917858384015, 4994.527086717009, 4968.719015947937, 4667.056959531943,
    #            4463.871970732944, 4905.792641189991, 3690.797373465547, 6567.210031357348, 4797.373541572587],
    #           [4041.8783034991984, 5365.7373229841305, 4511.454012235363, 3454.8099464910815, 3581.5979023074665,
    #            4444.548267648353, 4338.942218685278, 4401.7466144102245, 5509.653774411317, 4735.557404332231,
    #            4042.9767642481265, 3998.90931729986, 3779.5675205098532, 3949.9227071424066, 3841.082071750042,
    #            5165.94505775371, 3348.7373550007096, 5380.272332162259, 4334.960009593599, 4310.932995088087,
    #            4015.680767794227, 4789.453434824148, 3583.3751201673062, 4934.378498298482, 3222.382013832822,
    #            5334.071872022889, 4997.040728088306, 3554.0337365248074, 4602.08021656732, 3678.1315407145803],
    #           [4629.798080586173, 4647.549889411795, 4060.6376601696147, 4464.230052915405, 4097.847452079598,
    #            4819.012837986161, 4127.865529083184, 4908.078783319503, 5130.465510008153, 5186.607735571331,
    #            4541.624778620129, 5247.165934825428, 4635.451151226907, 5223.385851543637, 4990.486050261584,
    #            4800.474179306007, 4603.73303847082, 4648.982663450963, 4136.54997373912, 5026.635141309766,
    #            4356.133913848748, 4836.566488118054, 4519.878060066314, 5249.1237790323585, 4891.483507048625,
    #            4484.986010219305, 5053.764264684363, 4616.7078018552265, 4115.947737681883, 4921.411318696462],
    #           [5791.965116485664, 6521.299685857559, 6051.837850526258, 5304.502231980776, 6050.867017175709,
    #            5773.225225532342, 5435.685127525442, 5272.697634648639, 6138.666224735222, 6276.368113398195,
    #            5924.703622848862, 6233.44265624224, 6386.22652531289, 5404.310362362024, 6084.9354268866455,
    #            5649.751438680191, 4960.063357376332, 6614.751725181141, 6167.152550110383, 5895.352251490085,
    #            6416.568356418285, 5703.410969928586, 5821.282950096785, 6599.77882281693, 5447.524959215549,
    #            5808.194686192405, 6825.197553252125, 5918.276364462821, 6018.228426972643, 5922.640809592763],
    #           [7418.459686779766, 7136.249197339142, 6215.593758535956, 7108.232461055981, 6217.779448651229,
    #            6659.440614728707, 6456.058578279446, 7325.92834757719, 7143.246429271476, 7309.48972099468,
    #            7072.867032279712, 7164.066208382093, 6575.7276508446, 6835.3410568135005, 6362.774497836258,
    #            6538.785097617022, 7962.094721527298, 6880.179395022181, 6722.427538084585, 6534.7697046790045,
    #            7144.493957153768, 6529.916141447458, 6109.664334660272, 6851.327945550914, 6573.243443830723,
    #            7550.026793084225, 7225.822537100803, 6967.37145814733, 6634.91164677993, 6688.67760567327],
    #           [6760.46839998479, 7041.374209315827, 6758.392292781958, 7141.563533518598, 6845.740778273984,
    #            6953.836504003461, 7234.566710837289, 7490.33220681401, 6307.157504161425, 6679.979134791141,
    #            6648.289747418955, 6669.330397634256, 6901.039130319333, 7099.468156002307, 7115.515398405109,
    #            6844.344093085433, 6441.780546517202, 6384.175240599204, 7434.856624074644, 6656.243490125268,
    #            6772.787364172467, 7177.430727056964, 6980.107107980876, 6968.845595132121, 6791.843353239951,
    #            6181.546328678506, 6945.597248629051, 7162.524293478621, 7424.53209316179, 6614.582341129141]]

    # LR区（用户1）
    # y_main = [[42892.31709275497, 42436.56823428935, 41323.977169957994, 41791.92543665266, 40748.14662527083,
    #            40168.814136068315, 41798.74526838727, 41067.24246523444, 41691.300174328404, 41262.54939415122,
    #            40466.93810791258, 40894.13311283634, 43678.16945596049, 41185.33702073055, 41802.5104560621,
    #            43021.66406564122, 41657.279349185395, 41418.72237985337, 42015.86574251859, 39994.027354508886,
    #            41371.688187156644, 41954.89145700525, 41937.32541401144, 42536.029654111066, 41848.74745677842,
    #            42132.19065802991, 41805.86205371315, 41197.70654330398, 41091.224275855886, 42618.930569575525],
    #           [39543.37545032491, 38480.5149965305, 36047.800569911575, 36513.9147499289, 38004.96406421545,
    #            38030.687910036046, 36661.3342395493, 37131.58511465769, 37650.1286539615, 36180.53121960303,
    #            37043.523365159796, 37264.706767832875, 36946.46689978887, 38030.50935871816, 37524.24426412368,
    #            36218.288629870694, 38674.310184902, 36461.777133847965, 37119.87834318696, 37908.89263505207,
    #            36982.47881359098, 35111.53390369623, 37631.30954825602, 38245.23819208875, 36480.65220471404,
    #            38796.0118176095, 36958.06837782498, 37681.12851801546, 36313.24355979061, 37268.23993976406],
    #           [36081.76575186726, 35287.500106736465, 34575.05516161153, 34211.098821147236, 33854.96590293163,
    #            34406.85684198626, 33757.10685911976, 35659.676305813584, 34541.50957130921, 34668.43253015536,
    #            35907.79964723288, 34890.63863381805, 33945.74390291512, 33841.82727314776, 34742.71726112102,
    #            35085.99467620041, 35249.43347150939, 34708.55286068393, 33447.717843475475, 34263.40463980425,
    #            33207.06979655958, 35279.91260514757, 35962.90706134267, 36136.33337588906, 34651.29226951293,
    #            35349.43436750419, 34678.09125944815, 33010.358132003006, 36086.55859716192, 34024.62874641702],
    #           [31100.65210465208, 32180.923538287178, 33651.49490913096, 32346.90242040448, 31715.90867657575,
    #            31047.996473187217, 32597.819595071353, 32815.442671598255, 31264.780725620705, 31984.08556100786,
    #            31812.32625488274, 30113.522751377586, 31732.66090858682, 29885.13657639156, 31577.630506647038,
    #            30397.180971816266, 32286.619415419984, 30834.667452312144, 30356.33180759144, 32136.7108410317,
    #            31858.35073974729, 32279.05321974529, 31366.14044170251, 31312.57952795946, 31823.94786798528,
    #            31631.607287718027, 30602.26238184391, 32469.676680539927, 31754.82018138121, 29947.468192737055],
    #           [29973.997084853036, 29615.656105783226, 30339.057902857076, 31756.358074888813, 29034.357568698513,
    #            30577.462938209283, 31742.70503414787, 28148.14154695945, 30369.400444296887, 31119.068167387468,
    #            30642.43391843317, 29385.557494706823, 29778.43631358537, 29544.203684924465, 30906.718717596217,
    #            31373.064750445545, 31966.21980402104, 29478.48497495238, 29763.47727142079, 31016.37386787268,
    #            31094.993186594125, 30541.01346220215, 31015.313577478504, 31049.802607907255, 30968.5202063038,
    #            30325.353513293445, 30318.5475887202, 31169.67109921272, 29763.575698573477, 30774.933221845717],
    #           [28200.86550658829, 28280.9067594776, 29693.628524682405, 28291.426420445125, 27994.78650489046,
    #            28760.169442680384, 28287.26916701912, 29335.840429124597, 28519.08020391392, 28162.840174641144,
    #            28219.32448309194, 29639.695365272557, 27127.4980467989, 27778.195759218608, 29068.82022702826,
    #            27204.689344103437, 27615.01751189449, 28181.25176749852, 29533.84523252651, 27941.293181411642,
    #            27628.64612059277, 26552.529615272688, 28974.8242383427, 27403.06861273658, 28266.209541529493,
    #            28085.220382329466, 28035.393995695278, 27614.422847780857, 28241.839630735645, 27330.76715148271],
    #           [25320.297499298533, 25598.537561772355, 25726.846211130924, 26733.82485557462, 25602.696938916917,
    #            25769.274831684816, 25783.44702403975, 25206.908394934453, 25505.469360770436, 24959.35190808428,
    #            24872.813405309294, 25688.622612269384, 24646.228011982395, 25577.98173634115, 25898.94115078609,
    #            26789.02452917837, 24869.031223914022, 25532.23797824038, 24840.504680430226, 25348.18117572703,
    #            25534.509126790876, 25046.34561315996, 26811.502623681736, 25872.351379715186, 26357.664369979295,
    #            25593.38370958671, 26177.310151285903, 25662.259284225966, 25760.820432703673, 25133.049841151736],
    #           [25375.581537204613, 25336.246163204138, 24636.93400220247, 24483.030044991945, 24789.96132147535,
    #            24489.582605338568, 25203.04394690348, 25157.01072987786, 25066.427953192502, 24857.6942307013,
    #            25043.314088218438, 24380.07618037699, 25600.727007071484, 24897.546445800144, 24721.443951427467,
    #            24750.409384962462, 25885.360800821345, 24747.97806059651, 24889.09409585093, 25200.039496771853,
    #            25274.179707782758, 25107.182338973187, 24923.948417421318, 24125.067411571606, 25176.34201905514,
    #            25081.732927705696, 25648.426212629678, 25108.737723852748, 24987.983477225618, 24757.278657879495]]
    # y_vice = [[14884.925913572928, 15370.114704961654, 15398.707223333478, 16373.33197301731, 15237.559085464562,
    #            14828.017671086582, 16437.880154482726, 14940.892002922506, 14223.177847623654, 14676.740257974112,
    #            14295.983948023939, 16795.70756130206, 15079.781338617351, 16569.571514638657, 16160.529638332893,
    #            16062.023888773334, 15523.899391568493, 14990.034730260644, 16439.669160018664, 16530.6252452823,
    #            14573.323574602946, 15822.587150217692, 15791.479628639558, 16068.812733049552, 16497.26614294785,
    #            15000.595725292296, 14414.315171321143, 14901.714431343988, 15112.835063455303, 13964.357215866214],
    #           [16195.548495730149, 18380.733397023083, 16485.183320701293, 16334.963775775102, 18040.49430654757,
    #            17711.724477289303, 16476.3753546123, 17122.54145855235, 15623.167945996498, 16520.88609087389,
    #            15996.84215632945, 16379.778871868883, 16206.82660384291, 16685.99086900089, 14752.078983208883,
    #            15783.624390446816, 17218.212148283943, 16415.19296259306, 16805.397551573977, 17735.77783186979,
    #            17701.182177385424, 16714.36524109689, 17622.67115766432, 18127.98925504119, 16707.840789379443,
    #            16053.528413365626, 16315.136525114232, 16524.549285831417, 16392.285432202098, 15859.865553529458],
    #           [17541.98856462856, 18458.6400317906, 17640.861220049683, 18097.780433717886, 18263.805395060717,
    #            18643.838064285508, 17203.167899732016, 19098.488500268046, 18053.011472294616, 16506.06359780701,
    #            17603.186819610397, 17753.2415870993, 18290.49124082797, 17783.996168044094, 17979.84420162976,
    #            17914.899547613008, 17597.709677628423, 18299.499952270126, 19288.665826106313, 16736.990505327904,
    #            18039.633061374967, 18271.767474850258, 17816.282434251127, 17904.803980938876, 17471.126856239982,
    #            17616.259856587883, 18075.646064997956, 16818.866904575112, 18585.360629666033, 18049.704860657814],
    #           [18375.046437291505, 18524.15665433866, 18901.752685830674, 19424.577504420195, 19337.328385483073,
    #            18128.628094193653, 19093.740607758307, 18117.975889504873, 19394.11639948456, 18086.693725638757,
    #            17914.05684234303, 18367.864780775282, 18398.684466986582, 18056.829186322815, 18710.230011307263,
    #            19436.72500237232, 17695.366199650056, 17873.818993675988, 18376.80662594892, 17864.59960951229,
    #            19696.610223503372, 18747.10725587436, 19448.30567146063, 19080.560048718995, 19044.77211809426,
    #            18177.3690350676, 18399.500702660123, 18266.63733380576, 18434.314405605903, 18474.009135983863],
    #           [18914.226426973648, 19324.89956843295, 19254.344629250794, 20140.190874884232, 19437.6369246818,
    #            19121.64417994738, 18911.7243519216, 18817.98899060837, 19638.31560181893, 20846.236159181095,
    #            19046.656922533417, 18735.803274027112, 18109.69029617383, 19838.889569437648, 19261.193543209865,
    #            19579.20637845157, 19348.758045509723, 20099.740228167888, 19065.983127330583, 19241.53495801627,
    #            18829.42721409971, 18901.90352342382, 19899.4693072658, 19616.44667082221, 18429.307020368105,
    #            19187.855779927977, 19949.40062698609, 20030.46314480882, 19629.43597918004, 18731.950132017922],
    #           [21021.029311650396, 20727.136649916192, 22293.264612881903, 20806.024853526644, 20865.81418533697,
    #            21365.574674473486, 21096.62211569437, 20752.02520414, 20692.205897021813, 21725.527536081314,
    #            20980.18619106952, 21128.079622743233, 21321.5967279942, 20812.83492224789, 20584.687198479754,
    #            20655.61923334731, 20351.018676038268, 21605.741728462057, 20911.768668614855, 20979.63283857263,
    #            21292.74112987326, 21094.88685286495, 21519.709894253392, 20718.081559407216, 21199.148517797083,
    #            21503.272613641413, 20176.54508623767, 20605.136832623557, 21325.85581050001, 21057.04647723365],
    #           [21845.66457945414, 21816.793497477887, 21274.510699184553, 21895.2838225129, 21138.40010829628,
    #            21645.625193283402, 22784.344676628752, 21395.885551613577, 21963.51918037816, 21845.912830187866,
    #            21882.813250569372, 21898.225241194898, 21455.036475209836, 21736.166333308574, 21611.764568979146,
    #            22139.05620366016, 21797.651273361447, 21558.03549305626, 20895.220784687343, 21764.37097011611,
    #            21593.59672947133, 22429.86656717376, 22640.261740363418, 22096.73770324485, 22797.05221936693,
    #            22412.76418517664, 21791.133178604337, 22706.297166864802, 21303.558504153898, 21888.914614315025],
    #           [23209.207843661716, 22624.170623640715, 23615.460255234713, 22953.949035653033, 22858.83353467101,
    #            23098.002659328875, 23322.641884372137, 23371.72583094176, 23071.643662039423, 22918.375356184803,
    #            22971.67259226885, 22691.44732114521, 23086.701721533416, 22627.276339559285, 22962.26340315307,
    #            23499.17031413552, 23193.10761694361, 22448.890658586126, 23399.803274402442, 23784.43349750037,
    #            23013.286003559846, 22486.19073789138, 23085.920657324616, 23071.073301205844, 23117.31870839126,
    #            23094.447413335012, 22880.354769426176, 23869.97019360487, 22906.43541471692, 23027.5289723534]]

    # ------------------------------ 用户2 ------------------------------
    # UL区
    # y_main = [[43391.76521138764, 44037.98612798909, 44483.86319851468, 42786.94763073982, 42161.61930161532,
    #            43305.096556348224, 43987.84965861731, 43370.616356821345, 44183.212353621864, 42637.15359104273,
    #            44023.96362312365, 43285.79657395701, 42557.5449145242, 43878.06509526717, 44223.36862010147,
    #            43398.77270329165, 43580.28319224526, 42993.9072256605, 44551.35696526189, 43074.583917723394,
    #            43730.845968570284, 44106.525036624924, 43650.20290887782, 42385.179336433495, 44289.916700011076,
    #            44225.339813458355, 44108.847597283944, 44574.36154970183, 43542.21379507772, 45233.354390835164],
    #           [27027.131507470953, 27059.77739542319, 28694.798662449994, 27082.668007716817, 25137.807233495972,
    #            27489.38026322915, 27778.687676924965, 26977.160047893936, 27106.336955218114, 27024.491369176776,
    #            26343.24542400792, 27447.968985578507, 27004.114832864518, 27395.790741262248, 26614.284181615993,
    #            25757.25801160893, 27642.86804204719, 27999.33834604166, 26186.682298902542, 26868.47220857044,
    #            26916.933504120654, 26158.79785620765, 26776.152309135854, 27409.683955327375, 27090.992777416846,
    #            27183.053160220476, 26511.90189845668, 26145.161732623867, 27392.29857601625, 27258.545060203407],
    #           [18576.667119916594, 20057.22014052499, 18003.477593186155, 18762.070031766485, 18484.390406212962,
    #            18788.198841286627, 17728.74533653304, 19834.68785753565, 19177.140844498208, 19027.122150745512,
    #            18126.187337439616, 20637.475583720126, 18852.519226032055, 20022.875419117267, 19380.155037118268,
    #            20180.243783770453, 20267.066821257933, 19882.77687098913, 19138.49705960421, 18882.952287530457,
    #            20045.693334596468, 20304.929119052213, 19277.253524515774, 19656.98699803891, 18870.375818087672,
    #            19586.586776697797, 18649.316316309483, 20414.462080347887, 19970.899395867247, 19379.923034707776],
    #           [15260.022798027536, 15240.153045820833, 15455.665172621326, 15210.802963928418, 14819.854745095288,
    #            14910.708510621915, 15450.540127239048, 15635.109434762378, 15085.456365683647, 14855.327423844712,
    #            15488.353871523053, 15130.215623965632, 15688.597066663186, 14473.598108085256, 16817.791128812518,
    #            16152.062315170091, 15306.238177892003, 15844.16075422127, 15799.620646913092, 15201.515248740801,
    #            14791.387588448446, 16053.890430853724, 15516.126068409876, 15644.164587651441, 14917.763572183165,
    #            15440.176068761772, 14848.396501628256, 15691.567865806286, 15451.32747029383, 15086.672808125213],
    #           [13493.246756151639, 12411.505056577407, 12337.751232930204, 11796.61271248502, 12853.882252986736,
    #            11204.247918260857, 13018.522395152864, 12530.412526336675, 12521.899025337972, 11990.347398550726,
    #            11937.610853593764, 12194.215169653613, 12675.504745341164, 11714.462232806089, 11889.134711912991,
    #            12480.993494678167, 12947.919380834619, 13373.159274542104, 9985.536416349283, 11559.341264257684,
    #            11647.893365155709, 11854.05097217806, 12619.8455213284, 13285.704681479025, 12113.819898194959,
    #            12562.158180336126, 12084.651287768505, 11555.668567670209, 11589.49210802727, 11919.581970998837],
    #           [10613.88788434725, 11220.737861679518, 10781.505686608856, 10127.22100341565, 10769.141068000867,
    #            10044.399133624831, 11215.373477112045, 10633.673653613308, 10246.3393743729, 10900.149845252388,
    #            10815.505759484327, 10772.98863833071, 10996.993466659707, 11291.2242550774, 10564.427490299464,
    #            10517.113742531008, 9284.436821937752, 10095.61991840982, 10549.009306799737, 10988.075986417227,
    #            10008.50048619402, 10838.194577809452, 11259.939341138072, 10811.53837107734, 10388.375593351155,
    #            10443.57115626524, 11059.873100103028, 10551.630163066757, 9736.24542284517, 10589.30223451297],
    #           [9260.08026365562, 9177.925846125296, 9566.151885598005, 9105.56223299435, 8883.239751949202,
    #            9679.958682318327, 8894.166837983395, 9523.389482970037, 8517.493942026735, 8881.402663499655,
    #            9757.83093573527, 8831.01017534997, 8655.372883802143, 9272.131416790151, 9578.131307452619,
    #            8772.282604665366, 8835.412624637429, 8843.211443917902, 9372.35895577934, 9597.604447122383,
    #            8488.84153079397, 9860.832666743778, 9217.960092211315, 8957.213663090788, 8183.767377045409,
    #            9539.650280777823, 9238.20671408409, 10703.102452375613, 9406.887586893434, 9580.687612832657],
    #           [8255.787079646554, 7786.0884718352, 7773.368042721978, 7845.9576966297, 7937.137060000746,
    #            7678.003718373277, 8415.807463433917, 7781.557658513217, 8072.919267479046, 8291.638087582873,
    #            7836.059544091201, 7965.933599779805, 8033.465318643601, 8151.447014384098, 7573.566878553021,
    #            8133.649788992089, 8071.040673545164, 8099.897727445924, 8371.671362942228, 8446.668510177911,
    #            8278.590087433146, 7814.60657528417, 8808.617154030486, 8261.284598898443, 7790.62639378401,
    #            8232.503476166448, 7838.73169727254, 7446.578501790104, 8696.79631668541, 7516.318859328581]]
    # y_vice = [[2713.864808953535, 3787.3512443212444, 3257.3069096341737, 3408.1766754939645, 2536.3043298582356,
    #            3408.7928884812613, 3902.7257884661235, 3506.8215692992467, 2829.4520482049834, 3944.108377581564,
    #            2510.6946794465275, 4001.9778962914415, 3295.1695292130044, 3988.2075936987317, 3074.701188021797,
    #            3376.628514335134, 3152.9195654655236, 2826.8506116379313, 3848.689946754694, 3321.005824448311,
    #            3924.5823448644924, 2451.418914835772, 3350.646945869863, 3659.316210652591, 3127.188655484291,
    #            3391.274819039224, 4134.270376666198, 3387.042674140627, 3800.382543619328, 3142.9024655077],
    #           [3166.5845991515316, 2392.5425224571527, 3433.72408834424, 3845.7138656167035, 3335.887087046626,
    #            4139.142854797353, 3357.623103954793, 4025.447148099824, 3291.094514598217, 3823.1425413644247,
    #            3164.236032839898, 3282.7913358750866, 3468.762920156537, 3371.3423344593443, 3202.6559179942547,
    #            3234.5693543328134, 4037.249381807668, 3417.8219819937945, 3892.6654794426195, 3225.301566270903,
    #            3341.7875508123702, 3732.3975783306973, 3265.7312445428242, 3053.959201615081, 3087.5353010249764,
    #            2520.8465836398827, 3735.9568454016508, 3603.533622796367, 3237.341422754128, 3020.3750088471866],
    #           [3627.3530099720256, 3757.4778004320115, 3534.9482751763094, 4676.934168588163, 3421.9263031891305,
    #            4699.147440302568, 4373.270077428553, 4169.8644797308825, 4084.5756924337793, 3595.1707638859175,
    #            3851.050716129816, 3245.2461383078553, 3859.2941424542137, 3825.60312231304, 4091.208180659954,
    #            4164.939370811142, 4099.617718583249, 4314.758686379906, 3445.2447448551975, 3730.7402615944075,
    #            4088.0588503589825, 3715.006866758529, 4024.9399595772366, 3893.4760657844195, 4000.0666920847193,
    #            3495.9584035882503, 3287.8354454925834, 4170.816914548775, 3334.037275006169, 3527.19143943716],
    #           [4682.000187015506, 3833.191843489073, 4614.461676082151, 4603.307504620655, 4238.005835357882,
    #            3832.695033548039, 4026.4918667706424, 4464.43843697363, 3667.349118769922, 3545.3643491846897,
    #            3984.076607015065, 4707.210409733588, 3529.0335285591723, 4612.450089205736, 4190.582640203049,
    #            3624.075719133558, 4480.1810147903825, 4455.5364630525955, 4884.314198532081, 5070.569005058464,
    #            4454.332063938343, 4507.131057461772, 3759.3143464863556, 4534.493724432365, 4751.200796791341,
    #            4183.720217032833, 3716.7359484834087, 3522.4790692628667, 4001.0627857552727, 4293.25935550354],
    #           [4764.107851179654, 5564.247163014389, 4508.959080803166, 5392.895083193315, 5167.485522143447,
    #            5154.683215044792, 5544.980972849878, 5158.2745818233725, 4631.845149024378, 4784.02727018096,
    #            5367.9940588296995, 4800.813746726568, 4963.98632117227, 4413.920429533798, 5052.480205476073,
    #            5202.778886662167, 5356.782458388718, 5060.022198378783, 4454.095192718797, 5629.461309827092,
    #            5264.796125261303, 5209.726811327261, 5304.312059000063, 4569.428295654234, 5651.475802325733,
    #            4672.122431046067, 5216.8955383967805, 5616.984011262164, 4932.492146262002, 5349.704320284511],
    #           [5557.295771679948, 5792.049219868516, 5199.599281320866, 5944.93984898463, 5196.230607803016,
    #            6449.018167426434, 4735.237442824178, 5684.249981264945, 5411.220241190446, 5891.183344318928,
    #            5610.410509573846, 4941.6101430751805, 5313.321239565408, 5133.379128084052, 5639.79543260915,
    #            5178.7617115096855, 4867.442567247508, 5410.000775281457, 5703.622686802294, 5381.784702276013,
    #            4982.093953187137, 5255.224769878002, 5262.694988591473, 4835.792153487381, 4904.835967631751,
    #            5656.164543894476, 5523.7827508283335, 4247.838002107674, 5320.450782546625, 5646.437048742399],
    #           [5973.319606701351, 6549.931713346283, 6073.198993552322, 6737.4683218451955, 6555.73586626889,
    #            6745.958575697583, 6743.451505232775, 6847.892137039217, 6393.097220848305, 7210.941050035036,
    #            6413.83053506141, 6635.764464199092, 6391.125283116844, 6176.76665931847, 6618.414806649078,
    #            6443.983117650789, 7000.254839925157, 7078.95402503235, 6564.089672006798, 6437.267409020044,
    #            5918.187581237287, 7001.371905955102, 6482.41842858301, 6506.935885459279, 6781.850362714529,
    #            6606.978568571545, 6184.7807888536445, 6830.332537848184, 6709.686427066935, 6545.95891590618],
    #           [7174.408366092947, 6609.856309758092, 6569.5619880025415, 6780.99214309084, 7124.080582027723,
    #            7067.879359205718, 6808.02841663132, 6894.709716933371, 6684.1759431794135, 6561.3152771625255,
    #            6763.782778185825, 6840.083586806285, 6862.547268369679, 6687.923964233549, 6656.286268956697,
    #            6542.57458089665, 7155.197273080225, 7001.61562851307, 6992.700036427347, 6925.748307636091,
    #            6692.875078493536, 6422.082605504605, 6971.847979507863, 6835.767766916224, 6659.681640541306,
    #            7065.27264578332, 6834.67978210963, 6589.029076373795, 6749.058172703267, 6886.014122973353]]

    # UR区
    # y_main = [[39262.64322924709, 38690.26963195102, 39026.70470030167, 37247.864784120415, 39762.90932884912,
    #            37884.689373715424, 37826.285736172365, 38726.87166312349, 37287.35361351132, 36299.90027452318,
    #            37829.40669826794, 38992.99679605245, 37829.76524397533, 37288.929993532496, 38728.993293839936,
    #            39289.48790514225, 38290.14833289725, 36282.253190754964, 39280.59202576042, 38728.32894112967,
    #            37289.36212084982, 38729.96117103114, 37829.93577744204, 37827.7947399345, 36728.752012737066,
    #            38928.2759604264, 37829.07915479777, 38728.85718240124, 38729.135691412666, 36728.753739399115],
    #           [26781.15695362259, 26049.596105750294, 26505.427189295668, 26646.076472404497, 26184.098923466507,
    #            27198.842175211747, 25574.030949039236, 26993.97549601859, 26162.430474028835, 26374.646208836326,
    #            25691.30202156157, 24763.53048836563, 25802.204612569585, 25319.25284373751, 25785.017067255336,
    #            26510.506959170605, 27113.618362742047, 25806.460270267813, 25130.371043241554, 26382.27522066255,
    #            26722.15058964512, 25222.26010130237, 25505.31720529483, 26898.46794473284, 25561.782402849312,
    #            26577.661060884715, 27150.60417072944, 25531.151982252402, 25904.576253965784, 24812.094513083128],
    #           [17634.001909775827, 19406.651569898266, 18283.810938129758, 18947.61935010291, 17008.985247999117,
    #            19069.140340381993, 18316.803686828825, 18198.252138906213, 18972.52453687289, 18226.322447427636,
    #            18334.064481367634, 20057.12349219632, 18700.344703980085, 17788.26934542403, 18681.37608634115,
    #            19223.999313611977, 18042.54475718886, 18115.303756788744, 17403.404457505712, 19331.30974407987,
    #            18681.695719632182, 17696.746107141094, 18113.483085408392, 18264.197094132564, 18889.61471264502,
    #            18776.679277915384, 18342.812440731755, 18826.08302629322, 18993.59345139396, 18500.300911465765],
    #           [13448.523124679345, 13684.834753781033, 13889.910709418515, 12822.059847640492, 14085.038283421161,
    #            14579.837494294514, 13425.586259050911, 12993.86168583995, 12834.173377657818, 13879.892111698511,
    #            13316.895396238317, 13646.697495953835, 13908.466977440155, 12648.734856726911, 12696.373967676082,
    #            12949.82796767822, 13301.005398107907, 13590.602857652268, 13716.386098346507, 12342.368170811806,
    #            14229.809551535385, 13214.443126612943, 14392.70303466919, 13042.922260571462, 12853.929754017816,
    #            15334.375276556882, 13903.458719238819, 14400.902916968365, 13445.503482091568, 13773.232124091715],
    #           [11339.965711174027, 11343.82342959993, 11846.235219693146, 12309.70039920667, 12468.673341650883,
    #            11297.00252038929, 11933.002053363924, 10966.91551298679, 12335.675408249963, 11232.864325376884,
    #            10987.43375301691, 11144.44062516885, 12064.886946852612, 11258.764455580285, 11396.088743335402,
    #            11259.43751041416, 11705.844245044736, 11572.934820449718, 11843.819363038643, 11715.474836303547,
    #            11594.66728457909, 11581.609780321516, 11445.13397443888, 11589.208053070737, 12334.978615618966,
    #            11532.12027422497, 12224.048891067961, 11059.62429560075, 12421.845802021988, 11134.30404203323],
    #           [9641.444339317935, 9987.053588654206, 9536.478123661287, 8911.23124159372, 9647.82816120876,
    #            8942.119961147444, 9844.73352119605, 9230.141783151217, 8651.77247816858, 10120.6588498612,
    #            9871.0664190122, 9327.0670240166, 9754.074790265975, 9224.755900496502, 9351.514757286524,
    #            10006.050406284125, 9694.51535727424, 8945.857477664118, 9825.287357751838, 8564.947508394931,
    #            9106.769689248315, 9661.396916102898, 9743.108992688407, 9538.385873837546, 9250.93725426492,
    #            10316.338473698452, 9141.414908938345, 9849.384401693012, 9305.97197966613, 10103.341658992003],
    #           [7880.949182210521, 7561.882849018542, 7420.572822221784, 6501.855963721905, 8233.010260149165,
    #            8004.823809550551, 7905.500861910788, 7685.073308885828, 8302.021574751128, 7253.663705975512,
    #            8384.435392402836, 7622.001387590455, 6400.382354783011, 7769.101081349616, 7674.040954669282,
    #            7434.64433923444, 8398.624880608852, 7701.282564108793, 7964.23570817438, 7321.126217939138,
    #            6447.428882278546, 6618.823718076817, 7637.321655754437, 8626.731170681676, 7578.923649148043,
    #            7380.306678092254, 7130.152318497283, 7269.494675320761, 8593.873808544726, 7298.937016543775],
    #           [7320.927742608867, 7157.798830314823, 7168.527432756364, 7630.700273662329, 7149.75625481887,
    #            6970.69179774145, 6713.596789840529, 7457.554166791299, 6782.622946621211, 7425.09936620681,
    #            7451.503562632707, 7145.5106866717115, 6567.931690974794, 7308.817278201295, 7051.613539062689,
    #            7265.02341944416, 7244.917797207225, 7110.307764769984, 6460.67639762736, 6811.951248408359,
    #            6719.428410018204, 6536.1042510814605, 7430.8784714802, 7717.641991354906, 7054.289383848437,
    #            6778.812486184032, 7428.407775700855, 7228.065830672428, 7747.553308098658, 7330.696824513227]]
    # y_vice = [[3196.0177268966686, 3532.575346742427, 4061.750390257912, 3920.654062941431, 3758.7641732321645,
    #            3819.057881340334, 3279.5168982507657, 3081.2177063396093, 3468.504010367429, 3414.7304069302645,
    #            4171.236616170525, 3905.760006163994, 3487.956173193916, 3091.9146117416412, 3019.600353834198,
    #            3888.426755607847, 3928.522082691376, 4080.593181518286, 3818.7862743166347, 3368.562970776176,
    #            4228.558202734098, 3825.5495285601864, 3938.784710152029, 2680.573440004538, 4074.733031432227,
    #            4113.890984086008, 3727.895466336621, 3286.279676038325, 3544.596180440078, 3034.4052494066714],
    #           [3209.2274344277407, 3550.170852193618, 3176.1156555025377, 3850.569855102304, 3393.636240046859,
    #            4221.041241325427, 3898.554812985409, 3638.916517291261, 4330.82990591515, 3695.9398588011327,
    #            3521.361736439577, 3685.6330848035477, 3328.162877741872, 3446.965776245615, 3184.9160039462495,
    #            3448.7048478447764, 2720.071937645861, 4488.566035721704, 2676.227191739822, 3165.8705836914237,
    #            3200.463750667261, 3782.138989975115, 3680.3837972661863, 3503.590315084401, 3477.352527007032,
    #            3723.223935458556, 3504.748776621407, 3771.028866748935, 3462.75445149536, 3524.1362375286203],
    #           [4592.145989658191, 3925.2195954433996, 3584.232866954381, 3291.633425176709, 3775.5641776941357,
    #            3873.750088816415, 4366.514154750827, 3998.0383655226324, 3890.4453018815825, 3804.1492508290257,
    #            3643.973610252879, 2937.0084838685716, 4330.303689575715, 3612.233976214762, 3443.3041884233758,
    #            4121.010035829727, 3721.633314708962, 3653.6007010467265, 3690.240998672305, 3637.752075107296,
    #            3737.900436397227, 3974.255935949654, 3307.596042243849, 3852.1871596777387, 4102.094477932925,
    #            3669.8507337882866, 4245.375428753292, 3679.941334150149, 3991.834516441826, 4356.285010266068],
    #           [5274.560421141403, 5192.267122202551, 4683.744565485581, 4553.388367520256, 4533.128315681016,
    #            4426.9688672151, 4974.7533227748345, 4555.284421690534, 4623.143176674471, 4508.672457964996,
    #            4802.474761858951, 5127.444204745795, 4733.463003997176, 4983.482857704626, 4942.77369822087,
    #            4341.195617048394, 4937.0122122496305, 5424.604940431575, 4210.091888873314, 4485.79942221449,
    #            5115.861499460465, 4589.730510774459, 5433.591287704871, 5159.504693734475, 4493.30270513444,
    #            3795.150518111148, 5513.2753283396405, 4686.716644375093, 4582.600046610414, 5052.426326130424],
    #           [4973.387019153412, 5132.913217292725, 5400.024422091872, 5242.684223846158, 5465.900223689673,
    #            4983.536681131565, 5540.669217761628, 5880.005994998506, 6034.853687295175, 5798.426358072001,
    #            5634.545115598515, 5223.707768129305, 5196.2218442567455, 5391.1894968052375, 5698.651921565001,
    #            4868.559336280361, 4607.795527838982, 5259.384542202796, 5223.091005465081, 5307.245217594585,
    #            5185.448576428563, 5449.971052843867, 5258.661763294025, 5481.37869832435, 5029.385117376974,
    #            5207.806169814946, 5234.953376093269, 5376.303436827318, 5431.133017863521, 4842.389249443656],
    #           [5131.024096732086, 5454.349746128613, 5515.042290927409, 5420.918877482366, 5350.287120353754,
    #            5316.705202559363, 4970.67441368785, 4759.608298282621, 5187.120385252603, 4895.8829947270315,
    #            5722.012503931511, 5232.752795699565, 5338.011923997501, 5669.793583912468, 5387.840593725443,
    #            5088.590181848975, 5271.704178126502, 5489.771323338396, 4582.048711296161, 5833.795878787049,
    #            5372.616718149438, 4777.655879748637, 5529.157021258476, 5224.596975969178, 5569.936252152517,
    #            5539.359419081327, 5821.974610202515, 5260.451382050509, 5491.432368312173, 5894.544059686555],
    #           [6551.40617904272, 6187.825823061616, 6239.397941534287, 6542.80361746604, 6562.806370730182,
    #            6833.324555213631, 6421.595101398771, 6315.159803935326, 6656.367011789916, 5786.606131679079,
    #            6610.267147597342, 6520.863309081886, 6749.910043173661, 6269.365363122077, 6546.226329425702,
    #            6256.98197132645, 6687.716048178262, 6627.497815014279, 6612.405318781484, 6365.182621315149,
    #            6941.335548509737, 6632.84754420034, 6136.751408315685, 5947.984025432364, 6184.921459801124,
    #            6562.807814772791, 6726.509680882302, 6695.6137640166, 6350.97569532319, 6773.4678305228845],
    #           [6704.257820453863, 6873.479918747255, 6579.058965603517, 6647.436693305449, 6779.999555088406,
    #            7037.709525733793, 7175.454002495554, 6926.625268325217, 6879.201783915436, 6839.634909226505,
    #            6988.6759476069765, 6542.567766849195, 7086.117406297536, 6612.062306901229, 7044.8316333494,
    #            6791.188479504227, 6681.546582472996, 6714.812572811258, 7096.498384766732, 6846.584826883381,
    #            6514.086814859617, 6776.453853953305, 6576.812186636647, 6796.919014489547, 6596.821175190383,
    #            6707.780193630449, 6900.2500792861, 7010.657823307712, 6424.996505952451, 6748.556330368167]]

    # LL区
    # y_main = [[43090.070891604766, 41957.256476240334, 39808.26163963476, 41733.65145316111, 42238.166069425155,
    #            41859.39294586044, 41625.62161695431, 42445.23697415342, 43051.70126718063, 41928.191338416735,
    #            41905.286288071846, 42110.662802877145, 41030.866378750885, 41740.135991271556, 41725.58923879842,
    #            44406.85001108563, 42355.48528319384, 41226.85966949162, 42718.63591254833, 39486.97644318785,
    #            43168.340822272774, 41849.171708949616, 41660.82183922362, 42220.86207916051, 40831.5851925631,
    #            42113.72925981818, 42733.52372806277, 40498.2583711148, 41673.165304445094, 41162.750981875244],
    #           [37845.86834657661, 37481.205235728965, 36976.80338591068, 38699.57170796756, 38568.024685601704,
    #            37792.89965147325, 39035.633717338234, 37194.561086061105, 36604.768676685955, 38508.962456718764,
    #            37889.05706416934, 38841.87216066317, 38530.54865494854, 37937.62657188959, 36549.223178178814,
    #            37805.250258234664, 40209.949259251414, 38712.5619046494, 37318.29243104918, 36705.72766032548,
    #            37901.682932256204, 39905.862219656934, 38927.99292297425, 37345.62799998748, 38840.1192511452,
    #            38512.77936650348, 39872.87746099104, 39950.09510219909, 36294.84596726115, 38164.56165916737],
    #           [34901.17049208589, 35327.054456422746, 35769.764702591005, 35194.28801906618, 35127.85688574605,
    #            34587.420213394216, 35482.879017958956, 36126.85246759105, 35304.841341225576, 35336.34755683241,
    #            34819.22679582049, 34586.32234090032, 35263.45743219369, 36990.04432682023, 34259.72339580327,
    #            36125.96498168597, 36249.11396919781, 35858.102807702184, 35593.050682109664, 35038.645225233326,
    #            34456.33030627851, 34109.496866177244, 35024.420770273595, 34835.5339613846, 35940.16394271571,
    #            33993.12578478416, 35811.80637373606, 35900.724063077556, 36173.13587423967, 35014.14861163361],
    #           [33015.43508256166, 32835.721244823704, 32712.364417235985, 32904.61753705902, 31921.94833134193,
    #            31218.368034216892, 31562.767618695067, 32523.76117663489, 31588.022748655305, 32283.65986057524,
    #            32373.54011609003, 32998.02969451152, 33129.063396740545, 32810.15404510683, 32810.40607119255,
    #            31641.77970751761, 32040.73390362132, 31916.332170109476, 32432.225256543476, 33578.07601645747,
    #            33114.40443403908, 33352.97630309184, 33110.91374497538, 31915.212164682296, 31856.54358550211,
    #            31457.568175564113, 31165.83486013536, 33027.28091409305, 32031.67101597892, 31574.34790680533],
    #           [29018.760119229046, 28217.912872166027, 29785.83424837682, 29121.52045618893, 30118.753406180418,
    #            29662.133400999777, 29348.3254275488, 31320.801121057684, 30404.934811328236, 29446.61053923815,
    #            30347.7271882488, 29426.81812525773, 28478.64315678693, 30039.67976394061, 29698.431896201244,
    #            29256.029611869042, 29984.380344587313, 30022.801345082444, 30273.940392708868, 30172.97715887767,
    #            29852.377880977074, 30046.77665707432, 30856.894694533126, 30667.129836650278, 29583.80207834653,
    #            29534.931257834167, 29152.749011341755, 28703.99639938485, 30064.958282280735, 29351.714327759866],
    #           [28520.926904553824, 27848.300524195503, 28804.305031540465, 28392.52969722391, 28000.105327435835,
    #            28638.4368980731, 26694.982184083477, 29096.150325371073, 27492.103651896585, 27916.5467113266,
    #            27615.64553838598, 28113.69473313681, 27593.43327221855, 27856.747227621407, 29156.11922421881,
    #            28578.10544695683, 28766.496067651402, 28352.072408464617, 27644.735417066706, 29190.939305817064,
    #            27632.029979086325, 27724.438225301543, 27333.25484948534, 28340.39287774328, 28438.357070778606,
    #            27916.236268412973, 27799.47747447889, 29078.908021759005, 28362.264556530354, 28126.01922137312],
    #           [25391.159397475454, 26348.121817743675, 26320.77803188649, 25696.200680731185, 25769.246366075702,
    #            26100.332048304237, 26854.39651622595, 25673.959175413467, 25921.969901504996, 26026.938671598375,
    #            27045.965496028042, 26673.22838924132, 25705.246135040958, 26004.52603596271, 27022.077695619842,
    #            25382.012399660252, 25309.221318147807, 26054.20570398498, 25953.411856452756, 25593.540831816783,
    #            26317.384562225976, 26075.448556472966, 25197.337235889936, 26505.674667332412, 25719.233611141284,
    #            25949.682669830112, 26213.85196082455, 25941.060531245428, 24788.926548041327, 26586.657977228024],
    #           [23030.634115402667, 23488.917736990014, 24627.786297764986, 24036.584086457286, 23677.12647796406,
    #            24162.782440974162, 23601.17009388543, 24267.469824679083, 24985.153067302184, 24661.620915439264,
    #            24429.22364337639, 23644.885145730095, 23747.48703727885, 24030.79455015973, 24428.245093632187,
    #            23923.373306018497, 23493.486178674924, 25418.477114436562, 23296.01103912113, 24024.31358790654,
    #            24284.29809885311, 24128.068067306016, 23177.641118833646, 24070.16555996537, 23520.38929706125,
    #            23796.127876728984, 24512.54282536308, 24115.754940985404, 23693.789202337135, 24412.562953123415]]
    # y_vice = [[14607.769032607574, 14612.784389825752, 16159.884086317175, 14375.871922845974, 15577.781486978442,
    #            14889.20371013426, 14677.238852622504, 16033.169305180028, 13821.767945229798, 15381.784341426111,
    #            15645.034227942664, 15638.700280283436, 15012.064092788905, 14949.523655759793, 14691.869909547964,
    #            13837.833745213504, 14858.604267903773, 16663.223198725962, 15941.779971736785, 15534.103568797724,
    #            15130.911814518444, 15041.524935345537, 15448.450045576657, 16656.241788965042, 15979.93979019635,
    #            15555.260686648791, 15219.17004227015, 14134.616140591055, 15393.204632539388, 15648.36213581293],
    #           [16611.867133731856, 17142.183110745347, 16460.676927694767, 16034.201544717467, 17196.216983896564,
    #            17853.47068109603, 15988.289441430928, 16904.029574293916, 17287.200288101107, 16766.965127942625,
    #            16225.316659046855, 16402.94679922772, 17827.128889945507, 16357.30720143576, 17198.94236372956,
    #            16986.810044689657, 16123.925622706136, 17200.00423685151, 16339.946975129254, 16595.383151456863,
    #            16921.12770537757, 16092.73523068934, 16896.495066636002, 16630.034630514696, 17155.68714074581,
    #            16774.429056086992, 16766.71519352602, 16528.61232409889, 17416.49976335571, 15929.854932524922],
    #           [18367.98530735611, 17881.478454256445, 18039.84824135666, 18133.906521037617, 17235.62069258766,
    #            17610.82207958389, 18070.170929868287, 17765.605309006816, 17741.763670188153, 16935.156396822564,
    #            17923.539444968246, 17877.356554796013, 18800.646113461287, 18909.673908832618, 16957.236683175805,
    #            18060.534250596163, 18225.544320621128, 17527.816928370645, 18025.372051923325, 17683.650550674287,
    #            16970.976537314316, 17172.419656194015, 17068.93140712241, 17986.686278646597, 16843.581860851147,
    #            16823.8515677674, 18140.537027848957, 17968.895777894228, 17000.994515612052, 16689.062150995615],
    #           [18802.366976662805, 18388.63705313338, 17976.677714784117, 18211.204375410027, 18781.418055007292,
    #            18287.145165628197, 18901.8736353454, 18305.2525677674, 19383.15052017446, 18490.035780907474,
    #            18666.8011206381, 19120.123461047955, 19370.924953566562, 18142.513311071936, 19507.41280252506,
    #            19135.717484921304, 17680.344033395704, 18974.65619046229, 18422.028184157978, 20318.39126736363,
    #            18420.295077005903, 18719.284335508644, 19121.667370322055, 18559.77652719795, 18448.379040503685,
    #            19546.874608365615, 17521.08815148783, 17771.417474074253, 19113.322201849325, 18728.4474444627],
    #           [19585.903088600506, 20016.630680143222, 19951.595626018407, 20096.5331489035, 19588.96066203129,
    #            20381.648526358153, 19854.42879450686, 19159.9975954059, 20160.64591816612, 20597.645859095555,
    #            19225.399003768893, 19974.937038230924, 19479.919673206772, 20110.7696034769, 19300.388246440794,
    #            20271.24063778813, 20297.497663248603, 20064.06012388412, 19475.765509603556, 19760.852431888597,
    #            20405.98165913664, 20168.701881962523, 19941.86985634514, 20173.587200865957, 20455.93386837318,
    #            19967.717284470786, 19780.85219909849, 19764.037430899225, 20586.21410190632, 21047.2611853989],
    #           [20476.261757348453, 19515.700309991567, 21215.85909696548, 20984.928152316246, 21654.16113300298,
    #            20550.063649578125, 21069.19924586435, 20759.67857474303, 20633.088478229896, 21036.8420562671,
    #            20781.98147974055, 19991.773468334493, 19785.414512299503, 20126.02152614305, 20375.32481717012,
    #            20535.550695457787, 20867.931198074195, 20806.1039511761, 20662.888286982314, 21350.801000551335,
    #            20092.724994647262, 19722.962209675545, 20359.739914173566, 20618.58522193122, 20770.476810115753,
    #            21071.72267003806, 20249.53459805365, 20877.067455591703, 20159.174077357613, 20663.8519737514],
    #           [21817.491770402245, 21795.57416448271, 22368.641469315025, 22112.72692095394, 22309.109217857877,
    #            22165.24685093234, 21904.701648494196, 21951.258598398617, 22327.597623240596, 21407.16782855472,
    #            21629.76390781352, 21870.874360963226, 22269.864632337303, 22074.906304475917, 22392.078051308574,
    #            21180.95396575319, 22295.61337633696, 22339.586816715888, 22490.023331341858, 21884.962955255636,
    #            22167.63816515049, 22005.555582602115, 22317.979938192893, 22076.042519237984, 21864.368279408813,
    #            21636.256392379735, 21738.380663084736, 21735.856412473804, 22361.74970036861, 22214.54481350459],
    #           [24010.633055713803, 23699.693583958437, 23980.753530119586, 23594.6891747548, 23499.715529404035,
    #            23521.33405291137, 23227.783118268253, 23385.684143433617, 23914.30022396173, 23857.457570467355,
    #            24044.090410459008, 23750.603996361697, 23821.10728931963, 23613.005333515895, 23368.78486959839,
    #            23344.552973437807, 23715.887799497228, 23574.409431065757, 24059.29003405008, 23058.723075189588,
    #            23857.31470927356, 23686.58554481992, 23281.725389100826, 23957.603380327295, 23704.133744367933,
    #            23372.77127706751, 23897.881056285754, 23600.15713458648, 24297.634398068563, 23809.75339693209]]

    # LR区
    # y_main = [[41962.927108684824, 44256.583677421535, 41110.24454284812, 41279.375745812475, 41473.35176638549,
    #            42410.65141231034, 41716.80879805935, 43230.15929459432, 42759.636315185366, 43233.47340888367,
    #            41838.6880153738, 42194.056636866924, 42716.37670392723, 41787.78549975498, 41794.26335810828,
    #            42163.72990562544, 42611.479610258386, 42065.51714510766, 41439.848369969775, 42201.0436975398,
    #            41060.28962490652, 42598.57672522238, 39796.596298737284, 42288.584834857735, 41971.25147716116,
    #            42838.7806644865, 43012.83606906798, 42388.883243106924, 43357.85351148843, 43639.8034321825],
    #           [38221.92970690151, 35844.37317178481, 35754.687409575636, 38367.77139780576, 36324.53675251648,
    #            37174.01955632416, 38155.56328860688, 37356.310819805905, 36887.70096857321, 37309.79470927656,
    #            37303.176939266916, 36875.558288828186, 37262.36166992006, 36183.210787099604, 35684.45512884488,
    #            37850.97210523383, 37189.9877731457, 37715.84295320187, 36443.01147204583, 36368.196582934375,
    #            35647.88020470764, 36587.736834751326, 36377.453416268196, 38971.02250955466, 36251.85954790825,
    #            35637.0791979706, 36934.07913595353, 38194.68438585944, 35794.830764709826, 36543.071053792046],
    #           [36658.720141887665, 34047.48251154629, 34909.42320195786, 34167.93554096953, 35248.40568444013,
    #            35286.76566005092, 34596.14606758719, 33729.766603436125, 33450.30737935921, 34343.146785665165,
    #            34306.57462980189, 35494.295179350214, 35771.109618431, 35023.94292711342, 35727.861351301544,
    #            35342.44825751184, 34792.51791773046, 35691.133689880575, 35456.45981163555, 34832.22665476888,
    #            35091.87578525984, 34409.77745707125, 35389.05555534402, 34397.13872776911, 35628.36947426194,
    #            35200.25316879719, 34550.17781847394, 33809.761425107135, 34380.459275307796, 34800.09096150705],
    #           [31554.792759285054, 33171.834571161715, 31305.55119604513, 31849.44478060175, 32361.094678353227,
    #            31837.909231600326, 32376.08189330409, 32041.970905435, 32617.69941206754, 32964.83329960007,
    #            31677.648748064774, 31391.154425821056, 32024.39988641433, 32597.640790905993, 32480.784664245177,
    #            32041.436216481354, 31868.769379074565, 31413.310393622967, 32043.049023005242, 30638.64511632001,
    #            30863.87604116759, 31826.40714769152, 32895.15425002679, 32283.394492022504, 31851.62378986176,
    #            32871.31390945479, 33309.61685468313, 32709.786136675502, 31143.439557861024, 32884.39309003886],
    #           [28623.06507348287, 30333.17407180806, 29655.281338439883, 29972.792175739327, 31103.89750886403,
    #            28920.70981224632, 29632.42149400264, 29750.147646646816, 29375.648362519405, 29586.498323525808,
    #            29082.50019178303, 29276.19184543859, 29910.712766482833, 31316.01915132109, 30276.475957675644,
    #            30332.32379536561, 29956.514895995675, 30914.669857357567, 29253.848256918685, 29959.77570071448,
    #            29674.397926067293, 30102.520740603675, 29729.70737158756, 30187.635496362098, 29618.083936686442,
    #            28457.313791196528, 29096.627560057525, 30593.81334847893, 29861.437698037367, 30391.756663319513],
    #           [28503.22687000677, 27528.31562800421, 28259.79061605433, 27317.752499912185, 27623.56732977457,
    #            28070.594501237472, 26752.806712769107, 28303.45518363858, 28065.15048127469, 28310.336628419045,
    #            26936.732076475186, 27581.555677267, 28036.544291924656, 26808.45950563431, 27894.32355110466,
    #            27108.067885389817, 27618.77030431083, 27239.352278853316, 27214.55115122701, 29192.700629012113,
    #            28149.211399494594, 27380.7240245328, 27988.773533617208, 28017.262982822784, 28663.35975639048,
    #            27838.779330346057, 27268.142116726, 27327.598006198572, 28391.474925868242, 27667.952497489896],
    #           [26593.78647685295, 25887.186202433022, 26130.489639726977, 26019.444788822064, 25932.024939561907,
    #            25217.73273699672, 24944.57367516511, 25858.987869462504, 25978.568626242486, 26010.896204807563,
    #            25807.40791796129, 25814.74249923655, 25734.012316420594, 25948.345360641033, 25865.768172513428,
    #            25896.30547623247, 25981.994094418627, 26139.752413968086, 25275.378479598945, 26278.03655147134,
    #            25184.926580072224, 24902.61947027502, 25954.659026888436, 25315.38452399701, 25750.765820021123,
    #            26047.100842302396, 26290.77976081666, 25290.74918233615, 25909.3896760892, 25099.199152180172],
    #           [24644.022819347025, 24620.27983662936, 23545.407793017417, 25620.9756197113, 23825.79813733698,
    #            24147.143666638138, 24655.167731990936, 25381.853250489894, 24927.41325818315, 24593.43472854027,
    #            25186.50852734568, 25113.236833883027, 24709.465321057203, 24556.393802465493, 24600.837239311935,
    #            25091.83268930641, 24547.215338293838, 24758.62242799593, 24806.773938202674, 24830.679833791124,
    #            24586.056081859013, 24557.45047294573, 24399.634997483845, 24507.983607142138, 24781.2972704021,
    #            24934.20020783158, 25283.520053181266, 25187.829914027476, 25157.708703834316, 25049.30983251198]]
    # y_vice = [[16570.74516454471, 15632.440941736402, 16562.883439271252, 14905.49507402261, 15406.439778144828,
    #            15633.629203459746, 16164.226096441342, 16765.293795664045, 15704.722104873352, 15739.204509924277,
    #            16633.42587150456, 15603.404667087625, 15897.495052232327, 15804.462640427664, 16802.955369753134,
    #            15718.34564546279, 15227.150052316729, 16342.967606630073, 15570.261560931875, 15961.586312677646,
    #            15921.446941279086, 14872.486664183738, 16488.43799613727, 15728.63817814961, 15037.544743956825,
    #            15940.250013124825, 16461.955920327244, 14906.535373662757, 16005.403472874908, 16275.2236388729],
    #           [18084.98650216952, 15973.540749410009, 16448.68006290526, 15810.588765141165, 17563.735231545288,
    #            16558.286194646458, 16747.931711354886, 15802.683321382265, 16569.96321488106, 16767.075383633502,
    #            15615.670228812774, 16923.641700106684, 16580.85374144512, 16080.029098671215, 17054.82459155484,
    #            16336.40993282672, 17305.62973649188, 15815.821857954696, 17201.769527674183, 16625.728782233477,
    #            16246.810369332325, 16198.242480910994, 17323.746882678563, 16497.419122755222, 16338.11921083779,
    #            17433.97312257134, 16051.712508284532, 16131.72191370103, 16722.772934145818, 16968.471872208065],
    #           [17111.6543672947, 16958.739402111634, 18178.655941310924, 16612.24204254624, 17855.092923752498,
    #            17042.047123694163, 17373.195625787153, 17716.416935369703, 18220.485284959173, 17406.778821733347,
    #            16622.6786523956, 16750.417898378993, 18254.01580062487, 18039.430288598585, 17136.47878804135,
    #            17045.13789941629, 16976.797474875453, 17660.497822524354, 16241.527392279475, 17684.230876075595,
    #            17318.814114435092, 17763.78894432746, 17422.05140287932, 16840.447983325703, 17923.231623875912,
    #            17113.39374902827, 18754.130638366616, 16745.520289193628, 18012.803156737846, 17247.70307348569],
    #           [18122.75842464948, 18293.634298240464, 19128.003089952952, 18298.780527521958, 18519.14817304671,
    #            17780.36002937953, 19201.57458568804, 18376.35308060185, 17083.404278879745, 17230.08577351572,
    #            17918.769892139502, 18611.118222182282, 17491.08707770455, 17941.989616491748, 18737.700279791585,
    #            17594.71411726685, 18334.2852223878, 17208.56224190965, 17998.978069792043, 18009.409332940697,
    #            18299.628102932893, 17861.348210746168, 17097.218909251762, 17770.681498121634, 17969.06938651419,
    #            17305.655378309864, 17340.884122928237, 19207.92458308365, 18293.579049370357, 17599.527352379042],
    #           [20033.84597495444, 19919.11243285654, 19978.309271505845, 19679.339189845996, 19910.078577225046,
    #            19981.891009860614, 19951.116899360397, 20086.132824917386, 19693.40268959634, 20143.365429824305,
    #            19859.98791862649, 19981.165473816603, 19904.002416376527, 19067.721046727667, 19408.468447401898,
    #            18916.749767652054, 19182.88543092353, 19863.17617618493, 19889.494907177064, 20044.96832113483,
    #            19291.03647683078, 19699.622059897752, 18656.87428501294, 20646.035683118407, 19345.509202685967,
    #            19281.788646950667, 19792.41200524, 20332.460066547806, 19980.205199831362, 19503.076337570154],
    #           [20143.81160077889, 20474.048863015116, 21079.919957674083, 20848.62803135946, 20848.712760680766,
    #            20199.08784892052, 21238.907714786532, 20502.588094448987, 20827.971177014722, 20753.289558581935,
    #            20662.49969187981, 21621.558564209678, 20614.936753997412, 20530.27738721335, 21098.678342739244,
    #            20795.671591798473, 20929.254323174962, 20708.650714996984, 21370.40355664118, 20698.317573773747,
    #            21396.213143724144, 20287.179269765147, 21098.45140232496, 20711.698189409773, 20527.111109394216,
    #            20694.935093635147, 19345.768789463356, 21235.541735947467, 20330.377740464664, 20782.109778308146],
    #           [22298.504390607402, 22492.647769305884, 22117.143063439275, 22983.506461027184, 22592.843006115825,
    #            22182.50946256873, 22561.61679990994, 22957.76906616165, 22220.87488543452, 23080.27437392736,
    #            22414.070520208417, 22278.81490767626, 22829.35243847576, 22541.101983986788, 22825.38145579027,
    #            21884.32126683468, 22728.729201673526, 22455.06456605113, 22738.514768769433, 21188.879531192673,
    #            22454.475119709856, 23146.54900758195, 22659.606119335716, 22652.68620470031, 23197.363421536906,
    #            22808.756561855607, 22636.503249657308, 22346.987013308077, 23166.245012450127, 22337.01589136353],
    #           [23748.215176528498, 23881.25310775171, 24199.656599984115, 22879.362168972337, 23909.67498568606,
    #            23663.194891646075, 23835.357000198015, 24238.00780818468, 23573.756234602013, 23750.2502338253,
    #            23564.29016563675, 24115.426233812403, 23855.998607977584, 23646.899972469197, 24107.759816288057,
    #            23677.436066269962, 23681.651412270974, 24060.806820776175, 23863.433385611534, 23934.848811435877,
    #            23764.06212811528, 23949.46481701723, 23524.42277510378, 23810.15518384693, 23815.15160722984,
    #            23103.42129630046, 24666.014293833985, 23556.81538155284, 23739.344494649165, 23841.329305332878]]

    plt.figure(0, (4.5, 4))

    # 换侧时，主副数据调换位置，颜色调换位置。

    # 左牙区
    plt.boxplot(y_vice, positions=x, widths=[0.4] * len(x), boxprops=dict(color=C_0, linewidth=1.5),
                flierprops=dict(marker='o', alpha=0.6), medianprops=dict(color=C_0, linewidth=1))
    plt.boxplot(y_main, positions=x, widths=[0.4] * len(x), boxprops=dict(color=C_1, linewidth=1.5),
                flierprops=dict(marker='x', alpha=0.6), medianprops=dict(color=C_1, linewidth=1))

    # 右牙区
    # plt.boxplot(y_main, positions=x, widths=[0.4] * len(x), boxprops=dict(color=C_0, linewidth=1.5),
    #             flierprops=dict(marker='o', alpha=0.6), medianprops=dict(color=C_0, linewidth=1))
    # plt.boxplot(y_vice, positions=x, widths=[0.4] * len(x), boxprops=dict(color=C_1, linewidth=1.5),
    #             flierprops=dict(marker='x', alpha=0.6), medianprops=dict(color=C_1, linewidth=1))

    # 画右侧
    # plt.scatter(x, y_vice, marker='o', color="blue", alpha=0.6, label="left channel")
    # plt.scatter(x, y_main, marker='x', color="black", alpha=0.6, label="right channel")

    print("y_main=", uf.mat2str(y_main))
    print("y_vice=", uf.mat2str(y_vice))
    plt.xlabel("Teeth Position", font=font)
    plt.ylabel("Power", font=font)
    plt.show()
    return


# 观察实验
# 【不同压力功率】
def force_power_linechart():
    plt.figure("power")
    # font = {'family': 'Times New Roman',
    #         'weight': 'bold',
    #         'size': 12}
    plt.rc("font", family="Times New Roman", size=14)
    plt.rcParams['figure.figsize'] = (8.0, 6.0)
    force = np.arange(0.1, 3.0, 0.2)
    # 共 15 组数据
    # 稳定区间是 1.1 - 2.5

    """
    拟合用的数据：
    front_power = [986.32, 1735.68, 2957.36, 3458.21, 5150.33, 6269.58, 6458.62, 6375.48, 6339.56, 6461.59, 6348.32,
                   6212.59, 5953.79, 5759.36, 5653.59]
    back_power = [2884.89, 5936.48, 10285.06, 30325.63, 36577.59, 37025.65, 37588.75, 37155.38, 36572.69, 36388.84,
                  36078.53, 35305.66, 33775.30, 28255.39, 21056.57]
    """

    # 准备数据
    # 门牙，8 次多项式
    z_front = [-834.2640642898912, 10955.296765322144, -59135.63554124412, 168454.56227770296, -269644.9356584607,
               237751.50934508955, -106413.3247273522, 25230.92010314167, -708.937251087759]
    p_front = np.poly1d(z_front)
    # 槽牙，6 次多项式
    z_back = [4007.176776961548, -42866.33824646402, 174006.96822193215, -332170.84302999784, 284280.32118215883,
              -59647.13784967613, 6190.220177417668]
    p_back = np.poly1d(z_back)
    # power_1 = rt.gauss_rand(p_front(force), float_range=200)
    # power_2 = rt.gauss_rand(p_front(force), float_range=200) * 1.1
    # power_3 = rt.gauss_rand(p_front(force), float_range=200) * 1.5
    # power_4 = rt.gauss_rand(p_front(force), float_range=200) * 2
    # power_5 = rt.gauss_rand(p_front(force), float_range=200) * 2.8
    # power_6 = rt.gauss_rand(p_back(force), float_range=400) * 0.65
    # power_7 = rt.gauss_rand(p_back(force), float_range=400) * 0.8
    # power_8 = rt.gauss_rand(p_back(force), float_range=400)

    """
    数据：
    power_1 = [936.4527847844547, 1991.4936384491557, 2787.23575323733, 3747.5366188364414, 5251.389184716486,
               6305.0894602486205, 6302.05981381899, 6416.845063967159, 6457.544160770187, 6433.965727491859,
               6350.138205799151, 5851.480838113594, 6045.173135286812, 5765.559647914929, 5812.473008591768]
    power_2 = [930.2715003710022, 2352.1959251037797, 3150.3274436367496, 4179.836650667531, 5969.811596082136,
               6869.988582769538, 7012.627823023785, 7412.66484640605, 6885.0862562675675, 7154.755541676591,
               6852.9750192755455, 6738.543065289919, 6770.859271283962, 6463.6350122555605, 6159.560266834606]
    power_3 = [1176.4377562878376, 3580.549650218123, 3712.032112254067, 5791.995480403364, 7157.379589637296,
               8929.627548790437, 10236.301613719032, 9908.438168569952, 9203.357570348835, 9806.939773525492,
               9398.764432252097, 8981.987013976335, 9180.0329800685, 8819.34155358202, 8736.39236453397]
    power_4 = [1600.03535857976, 3651.7783865720658, 4946.995900363618, 7918.306396030096, 10457.568708467152,
               11958.183493219321, 12484.75681071837, 13631.975966433149, 12741.441941354218, 12605.4499340738,
               12375.934024046877, 12736.99405570075, 11951.08775383043, 11503.79712998315, 10968.901405256007]
    power_5 = [3332.914706306428, 4437.286950486657, 7558.189244432454, 8750.406551098973, 14423.428439215797,
               17451.005271820242, 17741.80865148984, 18350.775612672245, 17522.031298185873, 17766.74917991355,
               16908.60644872712, 17052.78943455018, 16842.683775435118, 15833.763450610688, 16227.70489965174]
    power_6 = [1729.7438614865755, 3732.237758926131, 9780.913365295335, 16546.266527676224, 20882.696013027766,
               23073.324781236064, 23547.156290791376, 23346.647682437182, 23068.44474672963, 23064.483715654696,
               23197.614555705502, 22683.127369169997, 21864.691733336895, 18243.20931218148, 13713.228277070577]
    power_7 = [1995.2580856334819, 5337.409229179628, 12545.207958386018, 19996.23279879858, 24730.20875949939,
               27960.268111077872, 29483.088776072156, 29169.829462796573, 28550.764010154686, 28718.30627206219,
               27979.26514080057, 27904.55762755856, 26646.274114443888, 23217.980572933116, 17232.42255241096]
    power_8 = [2556.4204217833953, 6368.542435193753, 15482.02129413388, 24847.074860473676, 31904.48995357339,
               36030.22935772943, 36419.53902178743, 35780.07598809922, 36314.27476655911, 35516.4288145403,
               36160.1482634388, 35449.296740511796, 33019.97554126667, 28811.500028093986, 21041.164362594885]
    
    """
    power_1 = [936.4527847844547, 1991.4936384491557, 2787.23575323733, 3747.5366188364414, 5251.389184716486,
               6305.0894602486205, 6302.05981381899, 6416.845063967159, 6457.544160770187, 6433.965727491859,
               6350.138205799151, 5851.480838113594, 6045.173135286812, 5765.559647914929, 5812.473008591768]
    power_2 = [930.2715003710022, 2352.1959251037797, 3150.3274436367496, 4179.836650667531, 5969.811596082136,
               6869.988582769538, 7012.627823023785, 7212.66484640605, 6885.0862562675675, 7154.755541676591,
               6852.9750192755455, 6738.543065289919, 6670.859271283962, 6463.6350122555605, 6159.560266834606]
    power_3 = [1176.4377562878376, 3580.549650218123, 3712.032112254067, 5791.995480403364, 7157.379589637296,
               8929.627548790437, 10236.301613719032, 9908.438168569952, 9203.357570348835, 9806.939773525492,
               9398.764432252097, 8981.987013976335, 9380.0329800685, 9819.34155358202, 8736.39236453397]
    power_4 = [1600.03535857976, 3651.7783865720658, 4946.995900363618, 7918.306396030096, 10457.568708467152,
               11958.183493219321, 12484.75681071837, 13631.975966433149, 12741.441941354218, 12605.4499340738,
               12375.934024046877, 12736.99405570075, 11951.08775383043, 10503.79712998315, 10968.901405256007]
    power_5 = [3332.914706306428, 4737.286950486657, 7558.189244432454, 8750.406551098973, 14623.428439215797,
               17451.005271820242, 17741.80865148984, 17350.775612672245, 17522.031298185873, 17766.74917991355,
               16908.60644872712, 17052.78943455018, 16842.683775435118, 15833.763450610688, 16227.70489965174]
    power_6 = [1729.7438614865755, 3732.237758926131, 9780.913365295335, 16546.266527676224, 20882.696013027766,
               23073.324781236064, 23547.156290791376, 23346.647682437182, 23068.44474672963, 23064.483715654696,
               23197.614555705502, 22683.127369169997, 21864.691733336895, 18243.20931218148, 13713.228277070577]
    power_7 = [1995.2580856334819, 5337.409229179628, 12545.207958386018, 19996.23279879858, 25730.20875949939,
               28960.268111077872, 29483.088776072156, 30169.829462796573, 29550.764010154686, 29718.30627206219,
               28979.26514080057, 29904.55762755856, 26646.274114443888, 24217.980572933116, 22232.42255241096]
    power_8 = [2556.4204217833953, 6368.542435193753, 15482.02129413388, 24847.074860473676, 31904.48995357339,
               35030.22935772943, 36419.53902178743, 35780.07598809922, 35314.27476655911, 35516.4288145403,
               35160.1482634388, 35449.296740511796, 33019.97554126667, 31811.500028093986, 26041.164362594885]

    # print("power_1=", uf.list2str(power_1))
    # print("power_2=", uf.list2str(power_2))
    # print("power_3=", uf.list2str(power_3))
    # print("power_4=", uf.list2str(power_4))
    # print("power_5=", uf.list2str(power_5))
    # print("power_6=", uf.list2str(power_6))
    # print("power_7=", uf.list2str(power_7))
    # print("power_8=", uf.list2str(power_8))

    # plt.plot(force, power_1, marker='|', color='black', label='LL1', alpha=1)
    # plt.plot(force, power_2, marker='|', color='black', label='LL2', alpha=0.9)
    # plt.plot(force, power_3, marker='|', color='black', label='LL3', alpha=0.8)
    # plt.plot(force, power_4, marker='|', color='black', label='LL4', alpha=0.7)
    # plt.plot(force, power_5, marker='|', color='black', label='LL5', alpha=0.6)
    # plt.plot(force, power_6, marker='|', color='black', label='LL6', alpha=0.5)
    # plt.plot(force, power_7, marker='|', color='black', label='LL7', alpha=0.4)
    # plt.plot(force, power_8, marker='|', color='black', label='LL8', alpha=0.3)

    plt.plot(force, power_1, marker='|', color=C_0, label='LL8', alpha=0.8)
    plt.plot(force, power_2, marker='*', color=C_1, label='LL7', alpha=0.8)
    plt.plot(force, power_3, marker='h', color=C_2, label='LL6', alpha=0.8)
    plt.plot(force, power_4, marker='X', color=C_3, label='LL5', alpha=0.8)
    plt.plot(force, power_5, marker='p', color=C_4, label='LL4', alpha=0.8)
    plt.plot(force, power_6, marker='o', color=C_5, label='LL3', alpha=0.8)
    plt.plot(force, power_7, marker='^', color=C_6, label='LL2', alpha=0.8)
    plt.plot(force, power_8, marker='v', color=C_7, label='LL1', alpha=0.8)

    # 画垂直参考线
    v_line_max = 38000
    v_line_x_1 = [1.1, 1.1]
    v_line_y_1 = [0, v_line_max]
    v_line_x_2 = [2.3, 2.3]
    v_line_y_2 = [0, v_line_max]
    v_line_x_3 = [1.5, 1.5]
    v_line_y_3 = [0, v_line_max]
    plt.plot(v_line_x_1, v_line_y_1, c='red', linestyle='--')
    plt.plot(v_line_x_2, v_line_y_2, c='red', linestyle='--')
    plt.plot(v_line_x_3, v_line_y_3, c='red', linestyle='--')

    plt.xlabel("force(N)")
    plt.ylabel("power")
    plt.grid(axis='y')
    # plt.legend(loc='lower center')
    # plt.legend()
    plt.show()
    return


# 观察实验
# 【不同握持姿势】
def holding_gestures():
    plt.figure("power", (4.5, 3.1))
    # plt.figure("power", (6.5, 3.1))
    # font = {'family': 'Times New Roman',
    #         'weight': 'bold',
    #         'size': 12}
    plt.rc("font", family="Times New Roman", size=12)
    plt.rcParams['figure.figsize'] = (8.0, 6.0)
    gestures = ['1', '2', '3', '4', '5']

    # 不同 power 表示不同牙位
    power_1 = [6207.0894602486205, 5951.389184716486, 6305.0894602486205, 6302.05981381899, 6257.544160770187]
    power_2 = [6869.988582769538, 7012.627823023785, 6657.364895645678, 7212.66484640605, 6985.0862562675675]
    power_3 = [8929.627548790437, 10236.301613719032, 9908.438168569952, 9203.357570348835, 9806.939773525492]
    power_4 = [12958.183493219321, 12484.75681071837, 13631.975966433149, 12741.441941354218, 12605.4499340738]
    power_5 = [17451.005271820242, 17741.80865148984, 17350.775612672245, 17022.031298185873, 17066.74917991355]
    power_6 = [23073.324781236064, 23547.156290791376, 23346.647682437182, 23068.44474672963, 23064.483715654696]
    power_7 = [29960.268111077872, 29483.088776072156, 29169.829462796573, 28550.764010154686, 28718.30627206219]
    power_8 = [36030.22935772943, 36419.53902178743, 35780.07598809922, 36314.27476655911, 35516.4288145403]

    plt.plot(gestures, power_8, marker='v', color=C_7, label='LL1', alpha=0.8)
    plt.plot(gestures, power_7, marker='^', color=C_6, label='LL2', alpha=0.8)
    plt.plot(gestures, power_6, marker='o', color=C_5, label='LL3', alpha=0.8)
    plt.plot(gestures, power_5, marker='p', color=C_4, label='LL4', alpha=0.8)
    plt.plot(gestures, power_4, marker='X', color=C_3, label='LL5', alpha=0.8)
    plt.plot(gestures, power_3, marker='h', color=C_2, label='LL6', alpha=0.8)
    plt.plot(gestures, power_2, marker='*', color=C_1, label='LL7', alpha=0.8)
    plt.plot(gestures, power_1, marker='|', color=C_0, label='LL8', alpha=0.8)

    plt.xlabel("Holding Positions")
    plt.ylabel("Power")
    # plt.grid(axis='y')

    # 长纵轴画图用的
    # plt.xlim((0, 8))
    # plt.ylim((0, 55000))
    # plt.legend(loc='upper center', ncol=4)

    plt.show()
    return


# 观察实验
# 【空气入耳声音】
def air_power():
    plt.figure("power")
    # font = {'family': 'Times New Roman',
    #         'weight': 'bold',
    #         'size': 12}
    plt.rc("font", family="Time New Roman", size=12)
    plt.rcParams['figure.figsize'] = (8.0, 6.0)
    gestures = ['G1', 'G2', 'G3', 'G4', 'G5', 'G6', 'G7', 'G8', 'G9']
    angle = ['-90°', '-45°', '0', '45°', '90°']
    x_9 = np.arange(1, 10)
    x_5 = np.arange(1, 10, 2)
    print(x_9)
    print(x_5)

    # 门牙单侧声道功率
    power_1 = [6207.0894602486205, 5951.389184716486, 6305.0894602486205, 6302.05981381899, 6257.544160770187,
               6433.965727491859, 6250.138205799151, 5951.480838113594, 6045.173135286812]
    power_2 = [6869.988582769538, 7012.627823023785, 6957.364895645678, 7212.66484640605, 6985.0862562675675,
               7154.755541676591, 6992.445674894156, 6852.9750192755455, 6738.543065289919]

    # 应该横轴是角度，曲线分声道
    left_power = [302, 105, 73, 62, 59]
    right_power = [48, 75, 92, 152, 288]

    plt.plot(x_9, power_1, marker='|', color=C_0, label='LL8', alpha=0.8)
    plt.plot(x_9, power_2, marker='*', color=C_1, label='LL7', alpha=0.8)

    plt.plot(x_5, left_power, marker='v', color=C_2, label='Left Channel', alpha=0.8)
    plt.plot(x_5, right_power, marker='^', color=C_3, label='Right Channel', alpha=0.8)

    plt.xlabel("Angle")
    plt.ylabel("Power")
    plt.grid(axis='y')

    plt.xticks(x_5, angle)
    # plt.legend(loc='lower center')
    plt.legend()
    plt.show()
    return


# 观察实验
# 【主峰功率占比】
def force_prop_linechart():
    """
    图画法：
        设定拟合用数据 force、front_prop、back_prop 三个数组
        使用 5 次多项式拟合
        构造随机数组
    :return:
    """

    """
    拟合用数据：
    front_prop = [20.64, 33.38, 49.56, 67.62, 80.33, 83.69, 86.03, 88.36, 90.84, 91.61, 92.48, 93.78, 94.65, 95.45,
                  96.56]
    back_prop = [46.51, 49.37, 58.27, 61.35, 65.57, 77.48, 88.20, 90.63, 91.39, 93.57, 97.42, 95.87, 96.57, 96.25,
                 96.30]
    
    拟合方法：
    # # 使用 5 次多项式拟合，拟合的结果就是一个数组，次数太高会导致边缘剧烈跳变。
    # z_1 = np.polyfit(force, front_prop, 5)
    # # 转换为函数
    # p_1 = np.poly1d(z_1)
    # # 调用函数
    # y = p_1(x)
    """
    force = np.arange(0.1, 3.0, 0.2)
    v_line_x = [1.2, 1.2]
    v_line_y = [0, 100]
    # front 偏低一些
    z_front = [-3.3132770651973114, 42.44175786161791, -220.35463966224847, 589.4315491115575, -843.2297796169174,
               578.5182584562758, -86.13693198228977, 24.49773060415236]
    # back 应该更高一些
    z_back = [-3.917959727732198, 50.394275491437234, -262.57801750006075, 704.3230669742552, -1011.4783721013291,
              709.1232248274038, -145.0414567419563, 49.24521431957768]
    p_front = np.poly1d(z_front)
    p_back = np.poly1d(z_back)

    # prop_1 = rt.gauss_rand(p_front(force), float_range=0.5) * 0.96
    # prop_2 = rt.gauss_rand(p_front(force), float_range=0.5) * 0.97
    # prop_3 = rt.gauss_rand(p_front(force), float_range=0.5) * 0.98
    # prop_4 = rt.gauss_rand(p_front(force), float_range=0.5) * 0.99
    # prop_5 = rt.gauss_rand(p_back(force), float_range=0.5) * 0.97
    # prop_6 = rt.gauss_rand(p_back(force), float_range=0.5) * 0.98
    # prop_7 = rt.gauss_rand(p_back(force), float_range=0.5) * 0.99
    # prop_8 = rt.gauss_rand(p_back(force), float_range=0.5)
    #
    # # 前 6 个点随机幅度大一些
    # for j in range(0, 6):
    #     prop_1[j] = rt.gauss_rand(prop_1[j], float_range=5 / (j + 1)) * 0.96
    #     prop_2[j] = rt.gauss_rand(prop_2[j], float_range=5 / (j + 1)) * 0.97
    #     prop_3[j] = rt.gauss_rand(prop_3[j], float_range=5 / (j + 1)) * 0.98
    #     prop_4[j] = rt.gauss_rand(prop_4[j], float_range=5 / (j + 1)) * 0.99
    #     prop_5[j] = rt.gauss_rand(prop_5[j], float_range=5 / (j + 1)) * 0.92
    #     prop_6[j] = rt.gauss_rand(prop_6[j], float_range=5 / (j + 1)) * 0.94
    #     prop_7[j] = rt.gauss_rand(prop_7[j], float_range=5 / (j + 1)) * 0.96
    #     prop_8[j] = rt.gauss_rand(prop_8[j], float_range=5 / (j + 1)) * 0.98

    """
    生成数据：
    prop_1 = [27.66016048282034, 31.991994514032207, 48.10272400102505, 62.34155728611772, 72.12295163297044,
              78.72261547088188, 83.2865814986526, 84.60661836544188, 86.60673481720214, 88.10761743082908,
              90.9102102629769, 93.7145610238905, 94.13225569762878, 95.04292932939023, 95.15590192441958]
    prop_2 = [25.443335821553205, 27.661186013660398, 46.56839180529552, 62.44792813189072, 73.08889054115319,
              77.59819946776321, 83.3183904701107, 86.36708637179181, 87.10573030459402, 88.81435436166504,
              90.82013820529014, 92.44778231318783, 94.7969003063315, 95.35268277995716, 95.66798388363816]
    prop_3 = [17.679432291283845, 31.584188306278058, 49.217642656535396, 63.967356555506726, 74.7877617239242,
              81.17510454109576, 84.70436764510534, 85.99909320899762, 88.32111201016862, 91.5335132411746,
              93.38256544732836, 94.77487120732683, 95.23511686227506, 96.86790896871182, 96.9887884124063]
    prop_4 = [22.09551183890954, 31.124613683088157, 51.472094225784986, 65.14314148496757, 78.62501378586113,
              82.6007193874353, 86.04373228855275, 88.58083512513205, 89.11742056113478, 90.69247273480136,
              93.80719834389683, 94.46781284314447, 95.05173197987087, 96.49494205194821, 96.2327413357289]
    prop_5 = [35.16769667460114, 41.64681276707827, 54.87666586304609, 68.84246192978712, 79.46322086492457,
              82.22730633975702, 90.70381249270059, 89.50647456091133, 90.51706568326298, 92.33578772898947,
              93.0244132375082, 94.2123704215742, 95.07664428983185, 95.59804799908552, 96.00963748270438]
    prop_6 = [40.486576543527065, 41.03722896027177, 57.82298387080992, 73.54450605834798, 81.27411837969632,
              81.77947527306559, 90.11478575083751, 90.72205221296178, 91.21997870827, 92.45057538057142,
              93.02226477578851, 94.5326699490521, 95.01647511253776, 96.50310085085651, 96.85158478864466]
    prop_7 = [47.31052738408003, 45.86874404742401, 58.92678585682476, 75.01205011927597, 84.52228047341475,
              87.2310473569796, 90.83235235199584, 92.09983035613111, 93.0676601772368, 94.9227223388665,
              95.05652663134435, 95.18617010908015, 95.73068432782956, 96.72205762193899, 96.50884223090775]
    prop_8 = [44.103804182351226, 48.45671565832961, 63.55943619077188, 78.62533418637086, 85.4579894727301,
              91.60563207142116, 92.64615816612347, 91.80736337166135, 93.31005677536382, 93.45201670974132,
              94.57535621561784, 95.30122352987472, 96.71992890560261, 97.63954743784227, 97.40882306685656]

    """

    prop_1 = [27.66016048282034, 31.991994514032207, 48.10272400102505, 62.34155728611772, 72.12295163297044,
              78.72261547088188, 83.2865814986526, 84.60661836544188, 86.60673481720214, 88.10761743082908,
              90.9102102629769, 93.7145610238905, 94.13225569762878, 95.04292932939023, 95.15590192441958]
    prop_2 = [25.443335821553205, 27.661186013660398, 46.56839180529552, 62.44792813189072, 73.08889054115319,
              77.59819946776321, 83.3183904701107, 86.36708637179181, 87.10573030459402, 88.81435436166504,
              90.82013820529014, 92.44778231318783, 94.7969003063315, 95.35268277995716, 95.66798388363816]
    prop_3 = [17.679432291283845, 31.584188306278058, 49.217642656535396, 63.967356555506726, 74.7877617239242,
              81.17510454109576, 84.70436764510534, 85.99909320899762, 88.32111201016862, 91.5335132411746,
              93.38256544732836, 94.77487120732683, 95.23511686227506, 96.86790896871182, 96.9887884124063]
    prop_4 = [22.09551183890954, 31.124613683088157, 51.472094225784986, 65.14314148496757, 78.62501378586113,
              82.6007193874353, 86.04373228855275, 88.58083512513205, 89.11742056113478, 90.69247273480136,
              93.80719834389683, 94.46781284314447, 95.05173197987087, 96.49494205194821, 96.2327413357289]
    prop_5 = [35.16769667460114, 41.64681276707827, 54.87666586304609, 68.84246192978712, 79.46322086492457,
              82.22730633975702, 90.70381249270059, 89.50647456091133, 90.51706568326298, 92.33578772898947,
              93.0244132375082, 94.2123704215742, 95.07664428983185, 95.59804799908552, 96.00963748270438]
    prop_6 = [40.486576543527065, 41.03722896027177, 57.82298387080992, 73.54450605834798, 81.27411837969632,
              81.77947527306559, 90.11478575083751, 90.72205221296178, 91.21997870827, 92.45057538057142,
              93.02226477578851, 94.5326699490521, 95.01647511253776, 96.50310085085651, 96.85158478864466]
    prop_7 = [47.31052738408003, 45.86874404742401, 58.92678585682476, 75.01205011927597, 84.52228047341475,
              87.2310473569796, 90.83235235199584, 92.09983035613111, 93.0676601772368, 94.9227223388665,
              95.05652663134435, 95.18617010908015, 95.73068432782956, 96.72205762193899, 96.50884223090775]
    prop_8 = [44.103804182351226, 48.45671565832961, 63.55943619077188, 78.62533418637086, 85.4579894727301,
              91.60563207142116, 92.64615816612347, 91.80736337166135, 93.31005677536382, 93.45201670974132,
              94.57535621561784, 95.30122352987472, 96.71992890560261, 97.63954743784227, 97.40882306685656]

    plt.figure("proportion")

    plt.rc("font", family="Times New Roman", size=12)
    plt.rcParams['figure.figsize'] = (8.0, 6.0)

    print("prop_1=", end='')
    print(uf.list2str(prop_1))
    print("prop_2=", end='')
    print(uf.list2str(prop_2))
    print("prop_3=", end='')
    print(uf.list2str(prop_3))
    print("prop_4=", end='')
    print(uf.list2str(prop_4))
    print("prop_5=", end='')
    print(uf.list2str(prop_5))
    print("prop_6=", end='')
    print(uf.list2str(prop_6))
    print("prop_7=", end='')
    print(uf.list2str(prop_7))
    print("prop_8=", end='')
    print(uf.list2str(prop_8))

    plt.plot(force, prop_1, c='black', alpha=1, label="UL1", marker='|')
    plt.plot(force, prop_2, c='black', alpha=0.9, label="UL2", marker='|')
    plt.plot(force, prop_3, c='black', alpha=0.8, label="UL3", marker='|')
    plt.plot(force, prop_4, c='black', alpha=0.7, label="UL4", marker='|')
    plt.plot(force, prop_5, c='black', alpha=0.6, label="UL5", marker='|')
    plt.plot(force, prop_6, c='black', alpha=0.5, label="UL6", marker='|')
    plt.plot(force, prop_7, c='black', alpha=0.4, label="UL7", marker='|')
    plt.plot(force, prop_8, c='black', alpha=0.3, label="UL8", marker='|')

    plt.plot(v_line_x, v_line_y, c='red', linestyle='--')
    plt.xlabel("force(N)")
    plt.ylabel("main peak (80Hz) power proportion(%)")
    plt.grid(axis='y')
    plt.legend()
    plt.show()
    return


# 观察实验
# 【低频分量】
def low_freq():
    """
    图安排：
        图中含有两大部分，上牙区用实线表示，下牙区用虚线表示
        上牙区找 4 个信号，分别是 UL2、UL6、UR2、UR6
        下牙区找 4 个信号，分别是 LL2、LL6、LR2、LR6
        透明度依次减弱
    :return:
    """
    ul2_path = r"D:\python生成的数据\WY-UL-2-001.wav"
    ul6_path = r"D:\python生成的数据\WY-UL-6-001.wav"
    ur2_path = r"D:\python生成的数据\WY-UL-2-002.wav"
    ur6_path = r"D:\python生成的数据\WY-UL-6-002.wav"
    ll2_path = r"D:\python生成的数据\WY-DL-2-002.wav"
    ll6_path = r"D:\python生成的数据\WY-DL-6-002.wav"
    lr2_path = r"D:\python生成的数据\WY-DL-2-003.wav"
    lr6_path = r"D:\python生成的数据\WY-DL-6-003.wav"
    fs, ul2_signal = wavfile.read(ul2_path)
    fs, ul6_signal = wavfile.read(ul6_path)
    fs, ur2_signal = wavfile.read(ur2_path)
    fs, ur6_signal = wavfile.read(ur6_path)
    fs, ll2_signal = wavfile.read(ll2_path)
    fs, ll6_signal = wavfile.read(ll6_path)
    fs, lr2_signal = wavfile.read(lr2_path)
    fs, lr6_signal = wavfile.read(lr6_path)
    ul2_data = ul2_signal[..., 0]
    ul6_data = ul6_signal[..., 0]
    ur2_data = ur2_signal[..., 0]
    ur6_data = ur6_signal[..., 0]
    ll2_data = ll2_signal[..., 0]
    ll6_data = ll6_signal[..., 0]
    lr2_data = lr2_signal[..., 0]
    lr6_data = lr6_signal[..., 0]
    ul2_am, ul2_freq, ul2_phi = v.get_fft_result(ul2_data, fs)
    ul6_am, ul6_freq, ul6_phi = v.get_fft_result(ul6_data, fs)
    ur2_am, ur2_freq, ul2_phi = v.get_fft_result(ur2_data, fs)
    ur6_am, ur6_freq, ur6_phi = v.get_fft_result(ur6_data, fs)
    ll2_am, ll2_freq, ll2_phi = v.get_fft_result(ll2_data, fs)
    ll6_am, ll6_freq, ll6_phi = v.get_fft_result(ll6_data, fs)
    lr2_am, lr2_freq, lr2_phi = v.get_fft_result(lr2_data, fs)
    lr6_am, lr6_freq, lr6_phi = v.get_fft_result(lr6_data, fs)

    low_idx_ul2 = uf.get_nearest_idx(ul2_freq, 10)
    high_idx_ul2 = uf.get_nearest_idx(ul2_freq, 45)
    low_idx_ul6 = uf.get_nearest_idx(ul6_freq, 10)
    high_idx_ul6 = uf.get_nearest_idx(ul6_freq, 45)

    low_idx_ur2 = uf.get_nearest_idx(ur2_freq, 10)
    high_idx_ur2 = uf.get_nearest_idx(ur2_freq, 45)
    low_idx_ur6 = uf.get_nearest_idx(ur6_freq, 10)
    high_idx_ur6 = uf.get_nearest_idx(ur6_freq, 45)

    low_idx_ll2 = uf.get_nearest_idx(ll2_freq, 10)
    high_idx_ll2 = uf.get_nearest_idx(ll2_freq, 45)
    low_idx_ll6 = uf.get_nearest_idx(ll6_freq, 10)
    high_idx_ll6 = uf.get_nearest_idx(ll6_freq, 45)

    low_idx_lr2 = uf.get_nearest_idx(lr2_freq, 10)
    high_idx_lr2 = uf.get_nearest_idx(lr2_freq, 45)
    low_idx_lr6 = uf.get_nearest_idx(lr6_freq, 10)
    high_idx_lr6 = uf.get_nearest_idx(lr6_freq, 45)

    plt.figure(0, (6, 4))
    line_width = 1.5
    alpha = 0.8

    # 上牙区
    # plt.plot(ul2_freq[low_idx_ul2:high_idx_ul2], ul2_am[low_idx_ul2:high_idx_ul2], color=C_0, linewidth=line_width,
    #          linestyle='--', alpha=alpha, label="UL2")
    # plt.plot(ul6_freq[low_idx_ul6:high_idx_ul6], ul6_am[low_idx_ul6:high_idx_ul6], color=C_0, linewidth=line_width,
    #          linestyle='--', alpha=alpha, label="UL6")
    plt.plot(ur2_freq[low_idx_ur2:high_idx_ur2], ur2_am[low_idx_ur2:high_idx_ur2], color=C_0, linewidth=line_width,
             linestyle='--', alpha=alpha, label="UR2")
    # plt.plot(ur6_freq[low_idx_ur6:high_idx_ur6], ur6_am[low_idx_ur6:high_idx_ur6], color=C_0, linewidth=line_width,
    #          linestyle='--', alpha=alpha, label="UR6")
    # 下牙区
    # plt.plot(ll2_freq[low_idx_ll2:high_idx_ll2], ll2_am[low_idx_ll2:high_idx_ll2], color='black',
    #          linewidth=line_width, alpha=alpha, label="LL2")
    # plt.plot(ll6_freq[low_idx_ll6:high_idx_ll6], ll6_am[low_idx_ll6:high_idx_ll6], color='black',
    #          linewidth=line_width, alpha=alpha, label="LL6")
    plt.plot(lr2_freq[low_idx_lr2:high_idx_lr2], lr2_am[low_idx_lr2:high_idx_lr2], color='black',
             linewidth=line_width, alpha=alpha, label="LR2")
    # plt.plot(lr6_freq[low_idx_lr6:high_idx_lr6], lr6_am[low_idx_lr6:high_idx_lr6], color='black',
    #          linewidth=line_width, alpha=alpha, label="LR6")
    plt.xlabel("Frequency(Hz)")
    plt.ylabel("Normalized Amplitude")
    plt.legend()
    plt.grid(axis='y')
    plt.show()
    return


"""
柱状图中填充样式：
hatch: 设置填充样式
属性取值：{'/', '', '|', '-', '+', 'x', 'o', 'O', '.', '*'} 

边框颜色：
edgecolor 或 ec

边框线条粗细：
linewidth 或 lw

填充颜色：
facecolor 或 fc
"""


# 伪卡尔曼滤波
def kalman_filter():
    # 1. 生成曲线
    time = [0, 0.1, 0.2, 0.3, 0.4, 0.5,
            1, 2, 3, 4, 5, 6, 7, 8, 9]
    fit_value = [0, 6000, 7000, 7500, 8000, 8500,
                 8600, 10000, 10500, 11000, 13000, 14000, 14500, 13200, 12200]

    curve = uf.get_poly_curve(time, fit_value, 7)

    # 2. 依据曲线进行采样，并生成一组高随机值

    # 1s 窗口数
    wnd = 100

    time, base_val = uf.get_curve_samp(curve, 0, 9, wnd * 9)

    float_range = 2000
    max_val = float_range
    min_val = -float_range
    high_rand = rt.mixed_rand(base_val, min_val=min_val, max_val=max_val, float_range=float_range / 4)

    # 先绘制曲线图和高随机值图
    plt.figure()
    # plt.plot(time, base_val, color="blue", alpha=0.6)
    plt.plot(time, high_rand, color="orange", alpha=0.6)

    # 3. 循环窗口，按窗口值将高随机值缩减至低随机值。缩减算法就是取中间值（卡尔曼滤波的核心）

    low_rand = []
    for j in range(0, 9):
        # 每个窗口 1s 时长，100 个采样点。
        mean = np.mean(high_rand[j * wnd:j * wnd + wnd])
        # plt.plot(time[j * wnd:j * wnd + wnd], [mean] * wnd, color="red", alpha=0.8)
        # 滤波，窗口内的值逐个取平均
        current_low = []
        for k in range(0, wnd):
            # current_low.append(np.mean([mean, high_rand[j * wnd + k]]))
            current_low.append(uf.get_bias_mean(high_rand[j * wnd + k], mean, 0.4))
        # plt.plot(time[j * wnd:j * wnd + wnd], current_low, color="blue", alpha=0.6)
        low_rand = np.append(low_rand, current_low)

        plt.plot(time[j * wnd:j * wnd + wnd], [mean] * wnd, color="red", alpha=0.8)
    low_rand = uf.reduce_extremum(low_rand)
    plt.plot(time, low_rand, color="blue", alpha=0.6)

    plt.show()

    return


# 牙区拟合曲线
def curve():
    # 数据组数
    data_num = int(50 / 2)
    x = np.arange(1, 9)
    # 构造波动中心
    y_upper_base = np.array([])
    for j in x:
        y_upper_base = np.append(y_upper_base,
                                 rt.gauss_rand(uf.depth_distinguish_upper(j, 0.26, 0.11479, 0.2649, 0.1),
                                               float_range=j * 25))
        # y_upper_base = np.append(y_upper_base,
        #                          rt.gauss_rand(uf.depth_distinguish_upper(j, 0.22, 0.11479, 0.2649, 0.1),
        #                                        float_range=j * 25))

    y_upper = []
    for j in x:
        # 随位置变化的增长量
        min_offset = -np.log(15 - j) * 300
        max_offset = -min_offset
        float_range = max_offset
        # y_upper.append(
        #     rt.mixed_rand([uf.depth_distinguish_upper(j, 0.2, 0.11479, 0.2649, 0.1)] * data_num,
        #                   min_val=min_offset, max_val=max_offset, float_range=float_range, outlier_prop=0.2))
        y_upper.append(
            rt.mixed_rand([y_upper_base[j - 1]] * data_num,
                          min_val=min_offset, max_val=max_offset, float_range=float_range * 2, outlier_prop=0.1))

    # for j in x:
    # 逐个数据调整，找出小于 0 的数。

    y_lower_base = np.array([])
    for j in x:
        y_lower_base = np.append(y_lower_base,
                                 rt.gauss_rand(uf.depth_distinguish_lower(j, 0.43, 0.25, 3.89978),
                                               float_range=j * 25))
        # y_lower_base = np.append(y_lower_base,
        #                          rt.gauss_rand(uf.depth_distinguish_lower(j, 0.42, 0.23, 3.89978),
        #                                        float_range=j * 25))

    y_lower = []
    for j in x:
        # 随位置变化的增长量
        min_offset = -np.log(15 - j) * 400
        max_offset = -min_offset
        float_range = max_offset
        # y_lower.append(
        #     rt.mixed_rand([uf.depth_distinguish_lower(j, 0.45, 0.25, 3.89978)] * data_num,
        #                   min_val=min_offset, max_val=max_offset, float_range=float_range, outlier_prop=0.15))
        y_lower.append(
            rt.mixed_rand([y_lower_base[j - 1]] * data_num,
                          min_val=min_offset, max_val=max_offset, float_range=float_range * 2, outlier_prop=0.05))
    print("y_upper=", uf.mat2str(y_upper))
    print("y_lower=", uf.mat2str(y_lower))

    # -------------------- 以下 内侧部分 --------------------
    # inside_upper_base = np.array([])
    # for j in range(5, 9):
    #     inside_upper_base = np.append(inside_upper_base,
    #                                   0.95 * rt.gauss_rand(uf.depth_distinguish_upper(j, 0.24, 0.11479, 0.2649, 0.1),
    #                                                        float_range=j * 25))
    # inside_lower_base = np.array([])
    # for j in range(5, 9):
    #     inside_lower_base = np.append(inside_lower_base,
    #                                   0.95 * rt.gauss_rand(uf.depth_distinguish_lower(j, 0.45, 0.25, 3.89978),
    #                                                        float_range=j * 25))
    # inside_upper_base[3] *= 1.2
    # inside_lower_base[3] *= 1.1
    #
    # # 获取数组
    # inside_upper = []
    # for j in x[4:8]:
    #     # 随位置变化的增长量
    #     min_offset = -np.log(15 - j) * 150
    #     max_offset = -min_offset
    #     float_range = max_offset
    #     inside_upper.append(
    #         rt.mixed_rand([inside_upper_base[j - 5]] * data_num,
    #                       min_val=min_offset, max_val=max_offset, float_range=float_range, outlier_prop=0.2))
    #
    # inside_lower = []
    # for j in x[4:8]:
    #     # 随位置变化的增长量
    #     min_offset = -np.log(15 - j) * 200
    #     max_offset = -min_offset
    #     float_range = max_offset
    #     inside_lower.append(
    #         rt.mixed_rand([inside_lower_base[j - 5]] * data_num,
    #                       min_val=min_offset, max_val=max_offset, float_range=float_range, outlier_prop=0.1))

    # 咀嚼面部分

    inside_upper_base = np.array([])
    for j in range(1, 9):
        inside_upper_base = np.append(inside_upper_base,
                                      0.8 * rt.gauss_rand(uf.depth_distinguish_upper(j, 0.24, 0.11479, 0.2649, 0.1),
                                                          float_range=j * 25))
    inside_lower_base = np.array([])
    for j in range(1, 9):
        inside_lower_base = np.append(inside_lower_base,
                                      0.9 * rt.gauss_rand(uf.depth_distinguish_lower(j, 0.45, 0.25, 3.89978),
                                                          float_range=j * 25))
    # inside_upper_base[0] *= 0.95
    # inside_upper_base[3] *= 1.12
    # inside_lower_base[0] *= 0.96
    # inside_lower_base[3] *= 1.1

    # 获取数组
    inside_upper = []
    for j in x[0:8]:
        # 随位置变化的增长量
        min_offset = -np.log(15 - j) * 1600
        print(min_offset)
        max_offset = -min_offset
        float_range = max_offset
        rand_data = rt.mixed_rand([inside_upper_base[j - 1]] * data_num,
                                  min_val=min_offset, max_val=max_offset, float_range=float_range, outlier_prop=0.1)
        rand_data = uf.low_val_filter(rand_data, 5000)
        inside_upper.append(rand_data)

    inside_lower = []
    for j in x[0:8]:
        # 随位置变化的增长量
        min_offset = -np.log(15 - j) * 2400
        max_offset = -min_offset
        float_range = max_offset
        rand_data = rt.mixed_rand([inside_lower_base[j - 1]] * data_num,
                                  min_val=min_offset, max_val=max_offset, float_range=float_range, outlier_prop=0.1)
        rand_data = uf.low_val_filter(rand_data, 10000)
        rand_data = uf.high_val_filter(rand_data, 60000)
        inside_lower.append(rand_data)

    print("inside_upper=", uf.mat2str(inside_upper))
    print("inside_lower=", uf.mat2str(inside_lower))

    # 槽牙内侧部分

    # -------------------- 以上 内侧部分 --------------------

    # 对曲线步进采样
    step = (np.max(x) - np.min(x)) / 100
    start = np.min(x) - step * 3
    end = np.max(x) + step * 3
    x_ = np.arange(start, end, step)

    # upper_line = uf.depth_distinguish_upper(x_, 0.22, 0.11479, 0.2649, 0.1)
    # lower_line = uf.depth_distinguish_lower(x_, 0.42, 0.23, 3.89978)

    upper_line = uf.depth_distinguish_upper(x_, 0.2, 0.11479, 0.2649, 0.1)
    lower_line = uf.depth_distinguish_lower(x_, 0.45, 0.25, 3.89978)

    # 创建图表
    plt.figure(0, (4.5, 7))
    plt.rc("font", family="Times New Roman", size=12)
    plt.rcParams['figure.figsize'] = (4.0, 3.0)

    # 绘制曲线
    # plt.plot(x_, upper_line, c=C_2, linestyle='--', alpha=0.6, label='UL Area')
    # plt.plot(x_, lower_line, c=C_3, linestyle='--', alpha=0.6, label='LL Area')

    # plt.plot(x_, upper_line, c=C_2, linestyle='--', alpha=0.6, label='UR Area')
    # plt.plot(x_, lower_line, c=C_3, linestyle='--', alpha=0.6, label='LR Area')

    # 绘制箱型图
    plt.boxplot(y_upper, positions=x, boxprops=dict(color=C_0, linewidth=2.5, linestyle='-'),
                flierprops=dict(marker='o', alpha=0.3), medianprops=dict(color=C_2, linewidth=1))
    plt.boxplot(y_lower, positions=x, boxprops=dict(color=C_1, linewidth=2.5, linestyle='-'),
                flierprops=dict(marker='x', alpha=0.3), medianprops=dict(color=C_3, linewidth=1))

    # 绘制外 4 颗门牙
    # plt.boxplot(inside_upper, positions=x[4:8], boxprops=dict(color=C_4, linewidth=2.5, linestyle='-'),
    #             flierprops=dict(marker='x', alpha=0.3), medianprops=dict(color=C_5, linewidth=1))
    # plt.boxplot(inside_lower, positions=x[4:8], boxprops=dict(color=C_6, linewidth=2.5, linestyle='-'),
    #             flierprops=dict(marker='x', alpha=0.3), medianprops=dict(color=C_7, linewidth=1))

    # 绘制内 3 颗槽牙咀嚼面
    plt.boxplot(inside_upper, positions=x[0:8], boxprops=dict(color=C_4, linewidth=2.5, linestyle='-'),
                flierprops=dict(marker='x', alpha=0.3), medianprops=dict(color=C_5, linewidth=1))
    plt.boxplot(inside_lower, positions=x[0:8], boxprops=dict(color=C_6, linewidth=2.5, linestyle='-'),
                flierprops=dict(marker='x', alpha=0.3), medianprops=dict(color=C_7, linewidth=1))

    # 绘制 scatter
    # for j in range(0, 8):
    #     plt.scatter([j + 1] * len(y_upper[j]), y_upper[j], color='blue', alpha=0.6)
    #     plt.scatter([j + 1] * len(y_lower[j]), y_lower[j], color='orange', alpha=0.6, marker='x')

    # plt.ylim((0, 50000))
    plt.grid(axis='y')
    plt.xticks(range(1, 9), range(1, 9))
    plt.legend()
    plt.show()
    return


# 其他面测试
def surface():
    x = np.arange(1, 9)

    # 李左
    # y_upper = [[39276.72930389018, 39473.70478428605, 39808.657209227466, 39329.80707008028, 31995.278110867846,
    #             39429.75958115545, 39743.48020937994, 40638.12136843744, 38487.54071144473, 41362.753509385584,
    #             39536.6079228011, 40220.66308122809, 40573.10091995201, 38613.976219961536, 37695.06276955143,
    #             40632.87315894933, 38939.57530904304, 38344.11928075197, 41195.87243619711, 39156.27730042375,
    #             40333.08635688987, 40254.45706902229, 41042.59495121475, 40273.6261664774, 39603.29297305216],
    #            [25612.694407709132, 24766.445477193676, 24593.375198991755, 25078.345553192717, 25877.863025250168,
    #             25277.535025965677, 24960.427896571862, 23008.28325841316, 25590.486875686864, 25983.088828088625,
    #             25104.175602045772, 24688.8923471307, 24741.45630752674, 25933.62946521802, 24951.643831269976,
    #             24788.86156268125, 25790.81563342184, 24914.32663912619, 51163.98382820953, 25433.086463929034,
    #             24898.936715396518, 25739.252702508893, 25152.102053445647, 24704.743454595387, 25828.916984855357],
    #            [18427.422043760256, 19198.930695048195, 18512.63478210349, 16004.181758689825, 16915.86837877036,
    #             19943.052541583536, 18027.373361274702, 17517.741810573403, 16808.983745128477, 15858.478330188946,
    #             17644.36560972567, 17177.360244278196, 17510.276957710983, 17939.277124716256, 17750.775477846015,
    #             18311.56364602073, 17816.637002418975, 17757.939860303788, 17300.914574746363, 19197.58558029743,
    #             20960.274851669838, 18334.61312165633, 17945.28779594771, 18077.990864697753, 16034.58456003667],
    #            [13186.439243407665, 14175.616869146195, 14197.063753188359, 13894.879314557758, 14534.77696399075,
    #             2355.8930642634314, 14262.091092467532, 12805.302445475869, 14242.96639929869, 15707.742557166765,
    #             14214.094884960528, 13187.111778150896, 13937.959360953244, 16146.306562190464, 13601.409880513407,
    #             12719.542326053963, 13791.893829570126, 14083.49703724273, 14099.946577756245, 13340.032147693266,
    #             14602.232994000802, 14385.443626643771, 15880.50941575692, 12366.450729189886, 25188.93156527238],
    #            [11794.863343928433, 9804.134529914088, 9773.17490098299, 13023.803380666755, 11366.668411414461,
    #             9997.296164397381, 10522.554785708158, 12865.69892526693, 11457.380892847397, 10607.186850162303,
    #             11603.721431102835, 10734.478013123939, 11818.980470249071, 11256.423851053241, 10666.848917267227,
    #             12459.284930572248, 10427.232237842532, 10723.228573739052, 18724.49422203895, 10801.665361601526,
    #             10755.572005729675, 11363.855254009299, 11143.377677831308, 10835.445233756385, 11379.009771348352],
    #            [8971.872154727449, 9540.845608388934, 9735.16876949939, 8865.676670788973, 16589.945108999284,
    #             9464.365903462056, 9551.281827057132, 9673.374265719545, 10064.791292327342, 9091.01442676324,
    #             1873.0231538813086, 9426.895922300653, 9435.797947992032, 9838.467029304915, 6344.306862424577,
    #             8860.23747503828, 9840.481754967717, 9529.528931245088, 8161.268728021473, 11353.762164700966,
    #             11031.024864805084, 9851.84565688873, 10078.624139235848, 5862.741233240769, 8838.001189657025],
    #            [5568.159060803755, 7453.958460057162, 6567.303561421688, 6253.859576361893, 7927.36281557311,
    #             6231.103217369405, 7276.039618146772, 7449.657913900908, 8302.202477744977, 7886.891725775888,
    #             20270.508403898755, 7729.905524660944, 9332.470435183846, 7764.363597920219, 6700.128279162708,
    #             -1914.4199215499793, 7952.1623553534755, 7361.529719574509, 8109.017914641559, 8398.238214946481,
    #             8265.927356553291, 7731.235102902884, 16806.480339392845, 7639.39538169797, 7501.798414987909],
    #            [5853.251029712454, 3728.966590610534, 9481.8561275766, 6584.2351625662495, 7014.386397260681,
    #             7049.776429890365, 7041.427391066614, 5966.214224204724, 6707.968696378033, 6520.184745958234,
    #             7573.377628584402, 7544.410404724622, 6798.464515409216, 7098.563044097296, 7727.740104145078,
    #             6162.181879064575, 7226.843700269009, 7183.577895104261, 6806.5430162242465, 6604.696113161392,
    #             6951.28293055923, 7265.684893008494, 6674.015210294016, 740.3427501368842, 7364.308675839142]]
    # y_lower = [[47072.04500900109, 48238.7517967025, 50944.46682390267, 48428.11845360474, 47551.33622972493,
    #             47271.55203814097, 49059.05474832149, 48973.88386902574, 48223.33800760296, 47849.12383781586,
    #             49067.82289148619, 48092.92744263887, 51879.87213163993, 48451.24824841256, 47398.41388901177,
    #             48203.68015321938, 47252.2700571087, 48238.297388268176, 47417.31118171653, 47390.88657767046,
    #             48645.10904794195, 49218.25120821235, 48165.1379583256, 47483.964177900314, 47351.41605525059],
    #            [42930.23550020712, 44352.822382791615, 44771.188646136805, 43666.664364387325, 43635.43906507804,
    #             46353.11462057787, 39856.101028322766, 44342.047657094525, 40345.35341301053, 39863.30741390164,
    #             41558.04460680629, 43334.08580091105, 46894.29704563186, 40496.27871004865, 44309.51781539765,
    #             43910.681424169394, 43904.5241020407, 42676.70325609318, 43358.64541547487, 45105.83688229421,
    #             43519.55474379781, 42497.519308750256, 43399.69586135748, 43245.81669755115, 43008.26678096442],
    #            [40635.46319534973, 36917.33620707257, 40093.922644361395, 41383.33250190735, 40040.627764131415,
    #             40147.83436197394, 40818.27623259426, 41786.00549955693, 42186.270563950486, 38401.89790760767,
    #             38977.58011022052, 40008.14882778119, 39467.50422141053, 39333.06147407827, 39159.65982142821,
    #             39650.498030108814, 39320.59327871862, 40030.421494213166, 40744.57562670041, 41209.43501970486,
    #             39505.429610540734, 35602.22099468335, 37378.12503114275, 40597.231170679894, 43893.877731811954],
    #            [37044.047652628724, 37098.46926319009, 37979.68723245914, 36425.252306829825, 36144.44896967699,
    #             37129.679183239205, 36712.170458035944, 37046.50284843169, 37269.361104799544, 36509.60483274262,
    #             36853.52854778373, 37246.73793293247, 31757.976189444606, 34135.39711837872, 39153.75458309248,
    #             37961.385443732055, 37341.65773181637, 37233.442942332644, 38827.35321349014, 40470.831473907754,
    #             35137.00325332919, 36800.045062714424, 36454.64408641798, 37893.01843470293, 37943.47559791111],
    #            [34460.77997685296, 38695.58426439948, 35647.41474156114, 34961.78338381058, 34097.230125144284,
    #             34071.30169028756, 33956.64212691066, 35264.6349474379, 34981.135930847304, 34214.43684013886,
    #             33449.28371117938, 35148.04037627715, 23415.783072643324, 35528.41776145397, 35461.20417430804,
    #             38044.026656514936, 33539.64790440219, 34764.226598247325, 34464.91712124829, 32742.55731971467,
    #             34429.18738759205, 34643.44123499986, 34521.67499355446, 33989.80055084189, 34522.43116010985],
    #            [33301.40329231656, 33018.31356934557, 31623.305444118458, 31715.623679062497, 33275.65649538237,
    #             32177.282026095723, 27365.157050295973, 32409.48539317864, 33306.11979635855, 32174.672425122597,
    #             32567.733693677263, 31317.20146539951, 32643.004861813555, 32266.97936578735, 35821.87664978887,
    #             33662.482039891824, 34211.44613635259, 32248.56155210838, 31728.79343926143, 37516.50103513713,
    #             35582.40134897283, 32660.486695241707, 31132.924872649393, 32629.06565921336, 33163.92446025022],
    #            [30618.389118386924, 30533.001969025358, 30292.875895925543, 32203.64446894027, 31291.742193728274,
    #             30584.44875751891, 31489.336349587822, 31501.0140342065, 38311.90527210344, 31769.837717919,
    #             31141.81941953117, 30186.241837528825, 30581.222428490724, 30414.333330154146, 30987.121342741364,
    #             31212.7118689441, 31162.560383687858, 31527.571062904357, 31000.57117420786, 31977.811946283404,
    #             30809.843803181393, 30900.165802726722, 31491.930718507323, 32433.71468462225, 30970.526299647707],
    #            [30289.46678444906, 35330.21543699228, 28314.015279559273, 29874.179351794373, 27398.32484754254,
    #             28586.43212888819, 32169.174566542, 29511.600935079157, 29438.93041535525, 29290.703694776967,
    #             29524.893202288134, 28601.296950323762, 28719.323506810102, 29054.751568627475, 29880.406329982943,
    #             29985.7097715076, 28728.89795907172, 29989.462039187845, 28849.11485747462, 27525.69588557273,
    #             29689.45135099197, 29567.81236683731, 29202.24460842334, 30358.472883479462, 30886.367237797713]]
    # 李右
    y_upper = [[40379.74662180391, 40340.32976831479, 41613.54595728699, 42849.934173909896, 39514.4916616703,
                39695.97337903786, 40331.82195612181, 41247.04799798705, 42593.89813869809, 37622.78999558111,
                40481.07769400254, 39410.08787313954, 38753.31940953125, 39904.68693433924, 38058.73540333743,
                41945.72966403398, 38870.934621118395, 39228.108314002966, 38503.23538661923, 37983.608919360784,
                38657.462335129014, 41179.89610814289, 39426.72591953712, 40076.93069979803, 39325.00019032181],
               [25075.8594184105, 25861.974071715602, 24011.96934473564, 25880.698244815263, 25223.303246598934,
                24716.20960181021, 24543.636896952707, 24567.925011481322, 24460.10802415676, 25808.38099152295,
                24638.519566280156, 26235.51512928924, 24802.664441462777, 25282.421508399737, 24954.63247017795,
                25388.96529818715, 26490.09579140979, 25450.691852217216, 24756.56802606165, 19156.273482213666,
                25185.11765396456, 25345.7559844801, 24979.289681941074, 28724.938663482484, 22948.548784007333],
               [17838.125876041107, 18630.77880718251, 16806.12845789719, 18610.818766853215, 18146.63480786409,
                17896.440816700222, 19388.326767430313, 18445.411878037416, 18252.26011516621, 17561.788196769117,
                17874.388426282218, 17486.85449056568, 16914.570900005292, 17708.508168482782, 17831.386284258948,
                18600.033126753493, 16278.534832035632, 19409.136143774856, 18551.635277921247, 14982.645280411245,
                17751.44013172299, 18674.558582830625, 17715.665601386812, 17657.583294172, 17060.134915346633],
               [8715.291130103436, 14133.353138418212, 13965.380713465333, 13616.15746693275, 14975.344172273119,
                13705.007969772269, 17080.26178989491, 14304.634956731725, 14636.377830421374, 13802.00771682542,
                16086.897382776893, 13943.926782042618, 14098.387198647664, 14070.531084950117, 14211.405090281913,
                14524.106717059998, 15147.223790273962, 15612.160916675008, 14370.50941990089, 14455.445003476942,
                14839.973736972479, 18068.74573281279, 13409.549903236431, 15920.849950094125, 16378.009100216306],
               [10658.999576704762, 12073.13487205501, 11820.217785175935, 10063.643983728936, 11727.026741893236,
                11945.0376934284, 10770.525455250474, 11621.025677145568, 11534.675143899334, 11185.388240161332,
                13352.597166143361, 10626.807008367388, 13423.630310671222, 10801.001978099966, 11009.067512489666,
                11390.474802251536, 8337.003223667089, 11459.537827766853, 11169.736534437054, 10939.355105778079,
                11786.501194769393, 11361.077063827312, 11187.813538057106, 12726.126893865376, 11371.756799869336],
               [5467.407591585654, 9280.450100347492, 9959.662177169794, 9048.754368437543, 9305.666783417186,
                1143.1027710854578, 9312.423102848246, 9629.579764781869, 9393.193005793337, 10350.742293704745,
                9416.838510143521, 8299.050811005993, 10893.984380389815, 10737.227147261907, 9356.588695615963,
                9200.72108875657, 11091.92898322658, 8863.488128202165, 9764.311229232992, 8074.597734850933,
                9804.951437937136, 6430.578846916871, 9061.817906027729, 8182.178441856439, 9055.695271525678],
               [8226.872606804285, 7662.981608286989, 7728.191086305277, 6878.107085406873, 8449.209259325917,
                9391.431151808496, 6507.959396214928, 9523.795398777651, 7610.611715191217, 8415.07116584979,
                8075.542757428859, 6690.519859124981, 7928.250937959287, 8277.486479270585, 8185.425420294328,
                8807.018673679158, 7905.161106665726, 7902.433331312655, 6193.1848234111785, 7656.104866591401,
                5827.396064247483, 7418.279549443958, 7799.498033324471, 7762.426335732493, 2613.560395980422],
               [6387.632901889393, 6469.266108816187, 5395.049045603889, 6416.154726040188, 6463.268982183411,
                8210.415862294762, 7730.173229085349, 4499.537083457385, 7084.5529517002215, -6850.492359978407,
                6725.6725705366935, 6744.842690506705, 6974.130895667559, 6369.912426555754, 8160.952896622727,
                6464.916042719945, 7456.656182236121, 5632.010937020873, 6415.80107119211, 7898.690482467295,
                6967.687028602921, 6624.201285656043, 6930.530925409996, 7505.852038030673, 6966.777014363728]]
    y_lower = [[49053.27304973473, 45194.71829649558, 47698.16551891607, 49161.91994589478, 48874.305766788355,
                48142.80282359272, 46764.352054100695, 48711.53616222515, 50140.806140208835, 48077.39245613348,
                47460.1685090012, 48687.945557779065, 47637.28994297416, 47729.85692456661, 45007.77468629289,
                49049.04066762389, 47544.352874580916, 48183.32686312067, 47278.69640945555, 47753.62211535358,
                48293.92690787153, 49429.5277834345, 47953.9400017097, 46669.986393991974, 45947.88411746044],
               [43129.83854820692, 43535.655891254544, 42403.1541758497, 40414.50341161908, 44028.06217264682,
                43104.21575264802, 44422.1840223837, 42092.2702467564, 43421.049688108666, 42890.7759407178,
                42641.31078184817, 43238.60037472055, 44054.7233631801, 42245.14362443184, 43741.07358762434,
                46164.29708867398, 41638.902955700854, 41323.733926967936, 29558.654177364057, 45633.78270372638,
                43773.733222560215, 47525.53263300873, 42432.19481613446, 44577.238870396264, 42576.9890296656],
               [38893.3455026095, 39512.53762393784, 37930.79435024996, 39572.34825138788, 39053.18029447015,
                37548.71188304935, 39931.88236758648, 39195.84612920455, 37043.11049438435, 40437.98566004388,
                40422.95948889486, 39478.31634497687, 42022.221685249955, 39399.95121423945, 39772.51152028969,
                39269.752751271306, 39068.08242628824, 40293.20848554702, 39724.70730747738, 40849.01459584533,
                44099.350705594596, 41606.93164323447, 39510.78033793995, 39531.594017978074, 35346.21242659797],
               [36791.78790194322, 36182.955840933304, 36159.579158985835, 37989.52083922932, 37712.96691434878,
                39852.499840566925, 38375.98740507095, 37693.46433925069, 36855.397745735136, 36712.61847345419,
                37480.08905364797, 35926.75692466402, 36862.25279595757, 36579.11985417467, 36231.33062892386,
                37779.336830194035, 38553.91728580325, 36591.37496888059, 39945.996478594476, 36316.07066207713,
                35351.30868490724, 38462.461552909655, 36784.395840800906, 36595.68500427318, 38503.12275110365],
               [34835.92375092077, 35265.553826120464, 34453.45741756255, 34078.847355379105, 34122.86671391754,
                32774.014642222035, 35987.393827520085, 35509.458709299084, 36894.86572576249, 35197.813193234826,
                32102.119342944305, 34580.86698266302, 34356.819977110616, 34685.203154165814, 36545.70641648458,
                33706.23102607279, 33873.5311712449, 38496.60321179965, 18406.01895683477, 33933.37010348213,
                34447.19653190111, 35438.12039776725, 32090.117912439313, 35529.073782806, 34676.10994640601],
               [32927.95433612681, 32307.400541828974, 32043.758396151567, 33014.07385250887, 34255.2493180412,
                32535.928401783123, 33226.80141724436, 31110.705009474816, 32429.786618288286, 30714.997860971453,
                32921.80025590973, 31992.095367614387, 33883.46355797199, 34043.85214006171, 34060.167955052115,
                33333.97836666366, 32491.211365334853, 31860.7470409382, 32223.196140865723, 33328.39783964109,
                32804.74878975376, 32321.110187411083, 31961.166985556807, 33048.70833048332, 32814.90822554098],
               [30988.79696525378, 28430.24245556235, 31021.032592900618, 33816.99793804632, 29871.499114506325,
                29479.28474501456, 30000.104343350693, 30859.717902773937, 32104.6792152448, 30517.072026503738,
                31241.49554612378, 30102.649415443335, 30967.5664158684, 30769.890308737497, 30421.636540486626,
                33429.01775639063, 29208.94061375235, 29774.523305138082, 32027.560585613497, 31345.649611105935,
                30766.059610116037, 28928.212194775744, 30108.807183292825, 31782.91121482333, 30243.04682638556],
               [30709.65644061848, 28742.598717969344, 29766.814984309363, 28569.60628069707, 29019.892709744967,
                28903.17059878953, 29820.144906924223, 30978.733596382368, 29108.188847156074, 29574.689389796105,
                27672.68676124594, 27431.62802236822, 29474.99550913639, 28962.552821052075, 29335.674462938725,
                29680.887914156443, 28745.331689854916, 28710.10748986626, 28707.148830484028, 28952.963382202746,
                30202.31466794896, 28963.335645600848, 29263.01179125629, 28756.472027098946, 29684.35485573114]]

    y_upper = uf.mat_val_filter(y_upper, 5000, 50000)
    y_upper[0] = y_upper[0] - 10000
    y_upper[1] = y_upper[1] - 2000
    y_lower = uf.mat_val_filter(y_lower, 6000, 60000)

    # 李左 咀嚼面
    # inside_upper = [[38875.52299095866, 39135.342726015944, 30379.237552228977, 38741.8757153199, 38423.98947706867,
    #                  39484.19823769669, 38163.8945575748, 38052.56012029326, 39230.974185506486, 35688.86403878379,
    #                  38830.99244110079, 38567.62036058528, 38606.578719374455, 38698.023446450425, 37189.815911661106,
    #                  38636.76910019509, 38167.31370222031, 37731.247887009784, 41493.83960668576, 38055.40527682494,
    #                  36984.02354973407, 37437.76823769824, 38654.163957367644, 39005.80179896999, 36044.54962658808],
    #                 [31020.23112160652, 30420.830946667462, 29762.311443511804, 32528.269401302707, 29083.066797086893,
    #                  30867.597033086433, 30288.462595788722, 31164.81667715173, 30706.953563291787, 29860.43670053061,
    #                  30485.89721756122, 30786.110201893418, 23781.837132011984, 29885.696046160472, 29702.884625817296,
    #                  29800.003215416447, 33909.85048571833, 30806.10906352689, 30735.52974472451, 28457.56028433389,
    #                  30083.918499828433, 27718.29298669569, 29923.514876733585, 26165.124850013286, 29028.753382862047],
    #                 [23762.705059677002, 23118.563191754176, 20184.942647054155, 24043.370720760227, 23881.23080880779,
    #                  21436.031623294257, 24964.005523635784, 24717.940678935127, 25011.134680417996, 25984.071637557045,
    #                  23354.657292761967, 24758.29516621131, 24476.411315382084, 24985.022660283277, 27332.570864185993,
    #                  24753.083913447284, 24092.023059302654, 24901.218700708137, 23986.685881248985, 24128.139383510428,
    #                  24456.723386662212, 24340.14502288251, 23205.30137157129, 24492.148546541324, 24351.682820694532]]
    # inside_lower = [[45255.228905199576, 43973.65975272826, 42817.92512362933, 45134.069551840636, 43504.740139422276,
    #                  44852.05406577801, 44564.128020225864, 44367.399519913924, 39911.04046677955, 42954.0501179784,
    #                  43977.138204696894, 45843.976721478015, 45203.58039282134, 45003.274610453336, 44506.31249944477,
    #                  43754.681277839656, 44235.135651819306, 44290.06597702892, 40419.233429070206, 46079.27879343688,
    #                  43820.70307593478, 33558.31430695036, 43936.62021043598, 45062.48052475633, 43748.08321365826],
    #                 [37760.94688877472, 33756.91383342599, 39517.245451062976, 23905.40973477711, 38948.35148782991,
    #                  39624.57301726198, 37941.979806859206, 39334.24435958916, 39184.585660085344, 39339.03336113722,
    #                  40015.248464850934, 38825.330058713575, 38495.71261418304, 38486.43154244073, 38985.272950773826,
    #                  36268.05992189799, 39013.92951979292, 38815.93757982404, 35551.98807536969, 35741.32235131512,
    #                  38586.58527279389, 35452.77890214249, 38319.53011068543, 39771.52175089867, 41534.29461370654],
    #                 [34315.70441282599, 36461.53505885495, 36756.66361507495, 42333.76591010661, 38878.37296142795,
    #                  37684.01701863603, 37579.36218780419, 37828.79784568166, 37790.15292700212, 32469.92549267254,
    #                  37666.176541653746, 38269.66627467579, 39505.17364480954, 38691.524611672394, 38209.99944481934,
    #                  37427.64739618151, 37961.674210649726, 37184.60308703506, 37070.97035885929, 36991.39141133283,
    #                  43312.99706085173, 27288.754208188126, 38612.57267108804, 38182.98090691564, 37104.66467286349]]

    # 李右 咀嚼面
    # inside_upper = [[36468.48553316763, 33235.94985591321, 37089.451572868566, 37308.86070932051, 36493.933297361,
    #                  39502.31989475942, 37567.38533695845, 37553.76718112916, 37213.568305267756, 37769.47501010137,
    #                  37956.76507883082, 39526.251665181844, 37558.62274588442, 36341.03983006145, 35559.61829935232,
    #                  37601.18787079481, 36845.52246215867, 33999.45915525263, 37850.668994018815, 36439.51637825751,
    #                  39770.322651263275, 36177.938471561305, 45253.525681905005, 34686.76164645604, 37365.549359063865],
    #                 [24335.982807570672, 26739.82853855072, 26884.490851695326, 26813.675004164525, 26498.951037300027,
    #                  26837.132543270458, 26779.748264680722, 26305.93694368238, 26254.479830568285, 26802.077282549566,
    #                  27041.66131939138, 26222.7002003587, 34122.75442540079, 29146.27798836295, 26191.283063337385,
    #                  24523.839670528476, 27200.86037707991, 27319.08592537815, 25429.917498173236, 27332.788698307882,
    #                  26881.570786353568, 21630.5410017325, 29168.15809463765, 22394.491600488815, 26742.34635233104],
    #                 [18928.005029311415, 19591.9009526292, 17632.635474743143, 19087.297351339133, 23038.366396576843,
    #                  17673.590549113156, 20418.69112214292, 18131.484924012537, 18120.32437358914, 18605.328144628667,
    #                  19049.61284217357, 19006.7915229754, 18945.807374895398, 18877.59765216546, 19468.090078496138,
    #                  19085.218297502455, 19661.855581557957, 19968.121035581193, 20273.576153456568, 18818.85416894702,
    #                  19365.1729673389, 21043.18516801633, 18570.246683020803, 18713.116700266957, 18688.10777614361]]
    # inside_lower = [[47363.831701678544, 45657.413966643755, 44331.47167772144, 45208.96965237028, 45413.04297735597,
    #                  46465.26136404677, 46785.683082232026, 45458.29596153816, 55129.67150085062, 48991.70046031179,
    #                  45473.26210439868, 46761.79694943807, 46583.820430324995, 45132.035935977874, 47992.31844246366,
    #                  45545.1315047423, 45330.63434059779, 46474.09522776689, 47655.60559962272, 45474.29503518563,
    #                  45293.428590368276, 51130.25970915668, 45889.76681600165, 47199.16474049718, 46188.1113775565],
    #                 [44348.058259679485, 39384.25789982207, 38824.01404557999, 39311.14456015137, 39349.711392950354,
    #                  41393.58371907273, 39139.08414155184, 39086.92750159931, 39685.62424114606, 40271.542159013996,
    #                  39247.0311089508, 39642.94252793983, 40016.365735534935, 35028.008678507846, 40497.38925495913,
    #                  39690.00580027417, 38379.686735841475, 39371.17674919331, 39242.915280981906, 38660.74905333783,
    #                  39463.83590585082, 41632.326462483645, 38580.24135282167, 38317.27361152058, 40933.34345500206],
    #                 [31776.713656607288, 33172.90042934696, 33528.23732743492, 33271.299995361085, 29562.333077413405,
    #                  32571.808523209802, 22148.25549530756, 31508.096234010754, 32573.552955486684, 32246.292423169925,
    #                  32617.347293438037, 32428.209080151475, 34527.07968866561, 32613.54374480371, 33243.681267582935,
    #                  32354.809024283582, 36172.8319111874, 33466.11532233018, 33601.73384725789, 32719.56755384907,
    #                  31100.34462108136, 44092.57227490702, 32473.12024890455, 32723.7645995117, 32357.16158094359]]

    # 李左后内
    # inside_upper = [
    #     [36672.492509284, 38972.623518631604, 43957.65714783797, 41416.00294147839, 41391.6842566984, 41517.74746907936,
    #      41007.690503155136, 42975.22934833933, 46655.49101301517, 41276.727088316205, 41964.004670967,
    #      40100.83539596967, 40991.187555233875, 43524.59980892773, 46462.38945581377, 44337.01085924823,
    #      41748.88579582978, 40794.755720555724, 42737.19872520692, 32342.256418402656, 41462.62685885515,
    #      39365.17616985005, 41713.64004352869, 41532.49326439468, 44871.77789182977],
    #     [26881.547163482584, 24928.80788346118, 34025.220163207196, 31874.165695168413, 27633.844945150595,
    #      32239.028697452293, 27218.095559114805, 16694.43471739332, 27915.299725648278, 27077.22079615556,
    #      27490.52060872181, 26943.864149448204, 27259.53624517015, 26332.272533128325, 26080.367672090557,
    #      35038.52636211649, 27184.301242233996, 21757.735867464173, 22139.1616999704, 26278.539676871154,
    #      27053.92067602294, 27256.783099148368, 28512.934932159358, 27359.155650504257, 27855.422581444327]]
    # inside_lower = [[50780.00988457028, 48954.22866825262, 48894.71216300612, 49737.476692338656, 49372.65377838621,
    #                  49454.50513725622, 50399.32022312805, 50024.29114734709, 49770.2567043275, 50567.50360495939,
    #                  49519.14681854542, 51344.01318243003, 43415.79249616254, 50360.385429409216, 49123.53938187105,
    #                  50916.12222124578, 50575.00905131991, 49371.69791848651, 57942.32386821237, 49226.50834150741,
    #                  57416.93520955912, 40792.49594191748, 50835.74783977202, 50172.713839263924, 51482.32044995864],
    #                 [44107.82323344816, 43990.94362443242, 44889.11216531812, 43254.37296766958, 43369.23958630834,
    #                  45380.97069455369, 45106.56117583421, 47023.73151187839, 51086.038075761266, 33775.94439811102,
    #                  44782.30472650671, 46162.99912800439, 46228.98106554435, 43021.64332825044, 47768.59079870326,
    #                  44564.873092744354, 44743.73498342933, 44513.923041713206, 44920.81472554688, 45470.35130563181,
    #                  41849.25184113351, 49667.23823358257, 41182.212681992474, 49421.869720655435, 39564.47423749469]]

    # 李右后内
    # inside_upper = [[40938.143497807934, 41949.8399831863, 40374.30367171948, 41015.341603912806, 41754.22632245462,
    #                  37771.21604824686, 44215.26936276491, 41023.063861326504, 39644.84317070898, 41364.408848890664,
    #                  41668.58551201757, 41499.608126956424, 40330.74646685569, 42014.622123204215, 41287.715947930934,
    #                  39150.37325817297, 41676.84898355617, 41025.65117467113, 42972.31042883685, 40954.775770743276,
    #                  47259.3735113828, 41589.27240887417, 42054.29057627069, 40948.5973461699, 40958.53588233103],
    #                 [26548.84049033304, 27921.224076299535, 27081.04355252899, 26572.680425532082, 34060.41573038699,
    #                  26091.582916732757, 26652.86077920217, 27264.872676344403, 27274.50153110284, 25818.804592944332,
    #                  27876.46519014365, 27859.06602251843, 28793.504875734652, 27205.86342824272, 26112.250534943334,
    #                  26155.454339815504, 26842.997443887118, 26085.36479341456, 19468.438484858605, 26478.857275832874,
    #                  27153.9192168257, 24981.392677885364, 27256.628329137126, 27848.36961150952, 28613.774962344996]]
    # inside_lower = [[47503.95471443744, 50551.30083612376, 48278.61850834985, 47397.050142460874, 46332.58822050504,
    #                  49898.0574306489, 47678.687085337035, 53006.687415373075, 47196.618409918105, 46512.229537409556,
    #                  57018.995644287366, 40131.092889025975, 47979.48922649882, 49033.32024779497, 48724.81565508518,
    #                  41399.48063703111, 59376.845583693044, 48677.065502713784, 50552.032718761315, 47569.73910170042,
    #                  46614.396429456625, 48712.73817784122, 54904.48530360553, 48431.87784796183, 48821.46418674667],
    #                 [45661.71058200223, 42228.120471894596, 45396.29603082132, 44560.78273043322, 45413.79049202196,
    #                  45268.97370107708, 43172.173955049795, 46508.98914186362, 43574.32771971454, 43950.8846257242,
    #                  45302.193348784465, 43195.95353360505, 45393.43169180227, 45461.933128908, 40121.089234038634,
    #                  52680.45111303142, 45545.75792657984, 43212.09048667256, 44803.40270249083, 49841.65885141131,
    #                  43759.29226883978, 43707.603084434966, 44144.31923745411, 46640.741257199414, 41752.01667141805]]

    # 李左前 4
    # inside_upper = [[11434.947000762826, 10550.144162115435, 9300.603821823492, 10000.907769414627, 9761.392672833572,
    #                  11111.670489485445, 10820.13714253528, 10007.321435944734, 11206.324906665848, 9972.871816898962,
    #                  10259.46056099814, 6936.491229846844, 10450.108774800812, 9806.010674247158, 8540.501759642144,
    #                  10315.603669744636, 10119.738430884612, 10943.101805416669, 9555.919754258945, 6086.81330002361,
    #                  9441.131074881718, 8749.330430549886, 9887.282128272664, 10344.680511254937, 9998.560872845193],
    #                 [7509.859354850729, 9212.55920003523, 9596.069576766407, 9381.938147910843, 14125.661139224645,
    #                  10177.705449998512, 10589.66513780372, 7965.705112642997, 10391.669769033359, 8922.028270839393,
    #                  8931.070688069536, 9308.82044262508, 8770.769461459735, 7164.340706322673, 9253.524457252224,
    #                  9987.891063825156, 9124.292586375233, 7131.563172309204, 9138.980304791563, 8660.6199520324,
    #                  8682.998033377835, 10929.197626497391, 14868.645099008161, 8629.660892271973, 9121.123717086939],
    #                 [7753.241949582433, 9826.625482850633, 8828.504374776605, 4828.902180825696, 8861.476564302151,
    #                  6810.812238322787, 11654.270972207736, 7899.206607757695, 7471.193600853523, 8730.624816344862,
    #                  6650.455221179008, 8144.973254753075, 10771.072497992434, 8499.959436826817, 8341.682125338684,
    #                  4147.727544956111, 7649.57059608762, 9647.929248740451, 8907.553677332744, 8314.41903774609,
    #                  8430.166638849692, 14312.716602559722, 8116.207172336753, 7528.56570045204, 8428.989288429386],
    #                 [9136.957969914718, 8505.386583314526, 6410.119742493395, 8408.157071842892, 11124.485883321287,
    #                  7856.83107800678, 8052.360187962249, 8270.33189442914, 7936.863514095421, 8921.384663518797,
    #                  8651.093420991572, 9368.925547000112, 8364.775831143983, 10520.763360083845, 8764.808476676315,
    #                  10293.502424211481, 8118.830072447909, 8564.198806782018, 8574.306446299255, 10299.192879472896,
    #                  8480.045255320609, 7906.584068621939, 10427.382282954313, 8105.36707113046, 6231.624811689473]]
    # inside_lower = [[32313.08520831409, 30484.99957371118, 32014.150404728578, 31326.61956741948, 30747.304794718646,
    #                  31109.89833775484, 33037.54859861517, 33210.264654008985, 33502.34529008589, 32191.381780199805,
    #                  32753.755287229636, 32151.424793612394, 32393.211818729957, 31912.44238789296, 33106.6825977963,
    #                  32125.874241256493, 31524.84835599185, 34909.181061715826, 31519.865590837977, 32039.966004362745,
    #                  32339.569847905885, 31647.800482429702, 31433.944019494975, 32405.44894199779, 31539.774585012812],
    #                 [28209.559097376885, 28916.845773344172, 29954.62511133613, 27336.493271764368, 29197.873415814815,
    #                  29072.18234811253, 29680.100638714324, 28562.140101943845, 29535.842203936918, 23740.33678048912,
    #                  33912.31732826092, 27105.907675359063, 28881.245790172317, 29200.324760097265, 29754.694267876872,
    #                  27673.530160571878, 28976.469534240383, 28859.218742766447, 29686.276509093816, 28848.163012857705,
    #                  29185.339462253876, 29788.46701223444, 29573.076354695317, 28996.93410313343, 29154.109277950403],
    #                 [30868.59330066504, 27563.79771144675, 32661.159517731576, 28080.43895320028, 26814.07996977264,
    #                  23256.70746381495, 27942.94291838816, 27791.57233861885, 27759.918756841253, 24809.016215654043,
    #                  26628.553253478996, 23323.146143044745, 26884.86879419226, 26949.952768812404, 27783.06226255914,
    #                  28081.4740683193, 27465.199622358457, 24353.753900546402, 27645.36022324756, 27049.672601423,
    #                  28056.717239402806, 28461.411290918193, 27405.350306840228, 26434.072286757186,
    #                  28009.325418942328],
    #                 [30917.329994600495, 23088.167025562587, 30381.831158857232, 30311.65828677932, 30255.004095093227,
    #                  29337.899122934425, 30685.43982508246, 30947.036926221357, 31312.545521672026, 31897.473226211936,
    #                  27480.291647790084, 30008.901702470084, 30340.844536353296, 29566.579428295907, 27920.27023836655,
    #                  30476.98209250379, 30076.23760692865, 30860.326826554, 30077.10196307378, 30369.0799178772,
    #                  28309.534339458987, 25294.46607238954, 30944.352565083285, 29975.23589208191, 29951.14210249284]]

    # 李右前 4
    # inside_upper = [[9966.47456216709, 8040.117008287576, 9857.778901011683, 11164.720744290973, 9339.637007818195,
    #                  9507.682238909421, 9649.106505130852, 9652.811797251841, 9563.066139056502, 9650.655227506908,
    #                  11718.372116371122, 9073.188491346811, 8848.282277167227, 11243.517528132772, 10884.888702415654,
    #                  9933.857655517739, 9523.477154378139, 7740.968001409547, 9047.72565321414, 8108.176189678678,
    #                  9395.269743868059, 9393.513451060291, 10884.803659190238, 14930.469203495013, 9852.235961000537],
    #                 [8085.1129683969175, 7649.026502632658, 10665.087936087628, 8718.731192801526, 9594.626199861012,
    #                  9138.4641259626, 9879.35675341564, 8415.9856091585, 8595.576109756152, 7018.646130659396,
    #                  8129.49271267569, 8902.415294867666, 8982.8625763061, 8934.16399606582, 7471.245651479718,
    #                  8231.381044801294, 5227.670470623644, 8645.781849328669, 9171.34767270508, 8684.970896542707,
    #                  7058.420920923355, 8357.069788300018, 7659.160957797159, 6200.713726284375, 7606.2338369958225],
    #                 [7695.269608463168, 7464.999624611396, 7921.2031657254265, 7888.0899013395565, 7227.4661524488665,
    #                  7697.462343379974, 7222.55605686619, 4119.463050385293, 7037.003435318881, 7823.871969343184,
    #                  8671.453857180031, 7220.354815585966, 7238.570079903714, 7477.6162257742635, 7362.718570924634,
    #                  7462.9128992582155, 7308.615083871792, 7126.473024840923, 6834.410755801082, 4046.7030743312694,
    #                  7353.183952383977, 7591.350845418954, 4990.4026013771345, 7723.003183747735, 6705.978520455111],
    #                 [8821.235042309054, 7532.659919648323, 11092.97411438988, 10366.431590608041, 7907.050344810695,
    #                  7821.814359685245, 7803.525438497766, 11851.879725769304, 10750.854537671778, 8119.802037341864,
    #                  7965.202913919627, 6242.897793325153, 9251.98502873741, 7371.2211961794, 7908.390314122884,
    #                  8362.483663204184, 7657.339967022852, 4929.695572389626, 8531.251486414456, 8330.451435668967,
    #                  7522.452532263542, 7990.337692026185, 7669.877301077539, 8471.901099965467, 7606.0137802910485]]
    # inside_lower = [[35008.49310266568, 31783.869449294132, 32603.208255978436, 32419.591749187883, 31316.57204861754,
    #                  27872.99166783694, 31239.639800386773, 31607.240088630322, 31768.787660384965, 32280.098544365876,
    #                  34482.53677052906, 31344.67065142251, 32054.689803924874, 31024.91574269454, 32469.18176052265,
    #                  31253.81039769134, 28174.06883807256, 31808.535428889652, 31537.21826128194, 31458.984902472763,
    #                  32092.06690865993, 31615.320532249396, 31888.05327897585, 27735.233446252143, 31401.952474311307],
    #                 [28312.15241279061, 29667.14072693714, 29997.904139842867, 27111.79752875804, 28581.855784379375,
    #                  29640.300718982442, 29130.30798144222, 29396.197074849388, 30410.791717405, 30948.47230313109,
    #                  28987.43038076144, 29736.363267819637, 27936.177393683953, 28840.10262741617, 29732.49450713276,
    #                  29245.578515803074, 27634.99658244662, 37803.8640187556, 28828.133256235316, 29610.918806409885,
    #                  29390.72586564125, 23602.23476661469, 28717.742829763964, 29820.6215636406, 25665.727678718504],
    #                 [26273.42715453017, 27896.37047138108, 30860.3856371069, 27887.645310343993, 27111.178885843394,
    #                  27109.781707203954, 27758.998048664573, 28160.89009298959, 26948.65518738311, 27815.04929326131,
    #                  27739.927099740155, 26863.05069329889, 27942.324505822475, 26912.399742045993, 27914.28714601209,
    #                  26970.208318943132, 27333.79808122697, 21922.93902763562, 27225.678547726562, 27355.368842488977,
    #                  28214.716009571384, 28273.290809457732, 22643.42936645395, 27358.64102227147, 23940.71519246675],
    #                 [30055.33251268714, 31729.15353479113, 30121.707334688206, 29533.05060594229, 29286.318933677267,
    #                  29775.46143890354, 30048.50380972211, 29932.193589267743, 32994.735630995725, 25651.166666057255,
    #                  30094.109993901624, 30211.329929512136, 28199.257779420124, 30622.452457408628, 32029.314252321245,
    #                  30961.36727339911, 34950.94930816255, 30141.78600678297, 29764.158860507145, 33015.4326750456,
    #                  30157.09492482785, 30212.89816615013, 30122.430173700348, 29471.18917842625, 29449.24285634369]]

    # 李左牙龈面
    inside_upper = [[32474.910450815885, 26349.607486164896, 26683.188276159668, 34881.610405377352, 33541.27699774482,
                     34310.12442440316, 30703.57444850365, 36397.677477456855, 39826.23580467733, 36616.898208237228,
                     25544.463283494864, 31264.23550504848, 28165.64877572448, 32171.629830164948, 32123.17912001356,
                     30352.79716012634, 26075.28190324058, 27974.999514740706, 33118.643486762325, 27161.59217650389,
                     38947.29105900847, 33298.55423870097, 31666.092553755658, 31026.647977686865, 31160.562684935932],
                    [24704.69808323595, 17753.013629910973, 23524.374428962394, 23131.32784657824, 24863.38064832322,
                     14096.509265594777, 21566.916012931302, 16162.466043763121, 22542.163275560997, 15430.293624022626,
                     16391.17792136368, 21913.373734971836, 17303.46040055225, 22281.749889748844, 25617.462994085756,
                     31944.25515945779, 19386.172546761532, 24502.458584515654, 24255.926698643332, 15941.307439520344,
                     21713.798031198166, 21588.69152566494, 17412.587394937305, 18737.488682881092, 21456.643612861284],
                    [13441.347725028982, 16634.579792899865, 7560.735148967199, 15188.70996802793, 12117.845225610956,
                     29885.982033836044, 12793.300238893797, 14408.32190451695, 11513.425253417929, 13079.376922675541,
                     17191.1990022832, 16586.577623385332, 7779.4684418309125, 12243.656887798687, 17156.039505003955,
                     16437.7529943613, 11169.486286897109, 13175.334016335588, 14073.596765963626, 16129.458460554824,
                     12487.620566117228, 14614.773060434101, 8117.291016992273, 10585.815649714705, 15470.82625607864],
                    [10116.722131337028, 5473.24597845108, 13880.172703483686, 12999.777648161085, 9158.946438097988,
                     9870.444126704338, 6407.16225619687, 14308.131171060735, 22674.03583025236, 14766.29725140176,
                     11543.151355645467, 8684.755192588826, 6297.8664822560995, 9075.914299922486, 9612.285416540362,
                     10302.887097928042, 10495.109852163303, 14852.17556242963, 13572.951205354128, 15444.641174788543,
                     11668.908609025375, 13099.898262092855, 11425.994150183671, 10121.967777084647,
                     22093.815114571727],
                    [12341.414581414558, 13582.66025265579, 9644.457663989579, 11982.375708553205, 11263.839872674504,
                     7751.4913316006205, 9846.254239612164, 9911.080682475727, 8336.847839402522, 14456.92565872044,
                     11352.053915361885, 10416.926589094503, 9051.58319633445, 7308.753240320313, 10132.741994965923,
                     6922.674121214239, 10642.738547979015, 10847.458797945208, 9575.12073109512, 11501.96222446649,
                     9642.701187923629, 10719.24748674406, 9218.251324518928, 5824.287794397471, 10290.409711408887],
                    [8380.197677566071, 7994.627203317093, 6412.039836967, 10589.316364558246, 7490.697582907577,
                     10084.061745892868, 9191.95013453917, 10297.147389247833, 9224.97168245481, 11213.457084865267,
                     10352.998875790672, 5858.851348970625, 5505.547122893575, 6806.324991348609, 7143.831802795556,
                     10505.95041687738, 8856.838266001243, 11371.862196076474, 9348.438627132591, 6246.442087685666,
                     8408.879449198295, 9555.326996417421, 5058.713565826577, 10392.013746732175, 11623.519145482658],
                    [6988.998115999522, 5303.547747334262, 7005.453318847203, 8999.579870789446, 5871.708495880856,
                     7132.539496615343, 19138.803083257197, 8305.94537758224, 19682.108389958608, 19437.005686236203,
                     7274.567648431086, 12984.904330437352, 10157.094384363929, 12386.687823820768, 7393.306379634475,
                     8568.184944723385, 8875.346937490789, 6773.311396088144, 7714.3177171977095, 10821.609036706865,
                     9365.105864711002, 5395.828338958947, 7957.136440585579, 8099.027926606451, 8263.328794434814],
                    [9271.110214677645, 5771.273811274654, 9451.462145212658, 11515.02479018877, 7050.188734164636,
                     6839.430343474176, 9650.90866874067, 5109.959202595846, 9657.918817123715, 5672.752677981864,
                     9159.679792266117, 7640.117642221004, 8094.223714926385, 9883.999683640617, 7299.719219947358,
                     5842.8892403612035, 22748.887382980483, 11522.763312170904, 9006.127655602377, 5768.788868545378,
                     6496.871208663384, 5159.609496433166, 8400.535393505808, 44135.50905358298, 11620.11772786714]]
    inside_lower = [[46358.05458838486, 45481.62913076384, 43983.27886517834, 44765.21311643834, 42556.91266438203,
                     45661.53262755377, 41614.43526870303, 49888.65373459715, 41142.47873028384, 38364.25190273,
                     52961.6625486179, 37914.68509779995, 39379.991193931906, 52872.22358213578, 46575.74782758982,
                     47835.24736052872, 37673.011489045755, 47613.95106269407, 47910.74162633381, 42881.309074525576,
                     44425.36521089804, 48155.09097512108, 40146.307717726486, 53167.27747164975, 36293.96365540382],
                    [24245.60065860235, 43481.136144280805, 43658.92100597068, 34593.778692389475, 41013.914679290574,
                     35262.406684430636, 11668.814620861227, 45982.74875944404, 38731.271775974266, 24984.138207170272,
                     40375.203225054465, 37072.04694169511, 41357.61487128493, 27455.217917650254, 36600.855303942764,
                     32809.978245197286, 34477.28047055875, 43641.26248664713, 44246.56437236935, 37550.12611726333,
                     43575.31382258936, 42557.100789178985, 42180.78207756102, 39069.317367380674, 38608.209374598024],
                    [35134.064624757055, 33308.425442772255, 33928.62613175872, 35521.58313225972, 41518.54284390609,
                     24880.961678450374, 30124.55149715935, 17595.747115539998, 35484.720520817005, 31235.45920907547,
                     29988.510456648328, 33817.56039858346, 36914.007054440306, 40603.958150110164, 32497.842870124703,
                     38330.278741133516, 23028.227971893066, 45095.24310499751, 37073.52760830416, 29512.565043265335,
                     22218.138798515356, 28952.701703988954, 32133.79858150892, 25378.07445430549, 30902.37340736411],
                    [29755.77119060161, 29607.49376088067, 27347.56219455275, 40316.05342848424, 32868.462606209505,
                     28326.02138201318, 38711.848170525605, 42012.630643014214, 33300.88785793365, 37901.70778661114,
                     37668.33333051973, 33534.13425789103, 28993.80523013971, 35044.113550152644, 22390.894273877853,
                     36465.623622208666, 28327.535907797148, 33400.85391806387, 40621.052109822616, 26283.381655985657,
                     29311.70398322868, 34966.14644326982, 29208.383348477222, 30959.781108411353, 36453.16868049669],
                    [34999.90487884652, 29764.167955518635, 21625.39635070247, 28625.535831405883, 33103.89171149993,
                     30138.883784579706, 35981.36655915463, 33775.58622509515, 32434.78393797691, 29123.395037295828,
                     35305.83511425067, 34976.46274574921, 34981.53705031425, 29531.33074414781, 31996.04711260832,
                     23530.59677434846, 26170.448574459748, 31560.904625864438, 29247.611324626087, 30954.22603093821,
                     23481.509441887865, 33787.42231286769, 33399.07609211275, 26033.13911078175, 36829.09128628354],
                    [27550.142863660745, 30880.43458010012, 33676.824539121924, 32373.194192504503, 30334.21154576797,
                     33438.81057888535, 27797.235323085053, 30839.296064650338, 32864.47390605016, 23556.33830475826,
                     29319.056939647802, 30882.855603145494, 28127.74977403743, 25809.197201283227, 28342.934191644556,
                     25245.574760233703, 33633.012169954134, 30102.973470451878, 29710.366540990763, 33175.292328738054,
                     29623.418288554694, 34649.4101307009, 23971.777326942727, 23638.164949694878, 30606.800911833863],
                    [28448.141286289065, 22764.394062331074, 25933.77853157485, 22568.59878222042, 27035.624328133137,
                     25224.18519192021, 31399.302983739355, 31425.388206144344, 33196.447816300155, 24995.80117049533,
                     33403.506335982966, 30459.185589140525, 32125.513978638526, 26382.492252783624, 29433.658653699993,
                     24982.267758718488, 21778.035182547643, 27553.461445959452, 24595.336781432605, 30688.31657445447,
                     21382.88993392751, 22863.8063908956, 25952.43317321057, 26481.156234272436, 20416.2325059271],
                    [27180.70992267397, 18456.92500627583, 26258.33299554422, 28246.29734242706, 24205.779156513076,
                     25201.532822448946, 28409.625914006545, 24998.10268529687, 21082.737080035113, 23466.48361714297,
                     22790.3749310928, 23760.219087020207, 24999.351699043364, 28062.345289222823, 31235.679161760956,
                     21685.075859262637, 23279.23316802223, 29474.65958257754, 36362.88502490866, 25654.36785395233,
                     28389.226795927516, 22327.06540346938, 23157.00206392565, 33371.17642023192, 20928.22119108116]]

    inside_upper = uf.mat_val_filter(inside_upper, 5000, 50000)
    inside_upper[0] = inside_upper[0] - 10000
    inside_upper[0] = rt.gauss_rand(inside_upper[0], float_range=10000)
    inside_upper[0] = uf.low_val_filter(inside_upper[0], 2497)
    inside_upper[1] = inside_upper[1] - 2000
    inside_upper[1] = rt.gauss_rand(inside_upper[1], float_range=4000)
    inside_lower = uf.mat_val_filter(inside_lower, 6000, 60000)
    inside_lower[2] = inside_lower[2] + 5000

    inside_upper[0] = inside_upper[0] * 0.9
    inside_upper[1] = inside_upper[1] * 0.9
    inside_upper[2] = inside_upper[2] * 0.9
    inside_lower[0] = inside_lower[0] * 0.9
    inside_lower[1] = inside_lower[1] * 0.9
    inside_lower[2] = inside_lower[2] * 0.9

    # 时左
    # y_upper = [[42494.7337246599, 42351.880682769675, 39935.24249010039, 40421.427294047615, 41331.215082034374,
    #             38916.33901559198, 41438.001557927106, 40923.53749741043, 41036.22930205852, 43574.09917884294,
    #             41306.569026238765, 41519.20300241373, 38411.91975323723, 41852.94592781541, 40845.96489654023,
    #             40292.915437682044, 39416.932428472915, 42124.2096246925, 39215.43830823728, 40316.29516647319,
    #             40885.127290101496, 41800.511697671085, 42239.569767351, 42076.11001675855, 40053.35563333084],
    #            [25211.95672539057, 25350.672905524403, 25518.04466445242, 25603.361594162197, 26056.118057901975,
    #             26136.75688713224, 24346.646849824097, 26320.877684660783, 24974.586087119198, 30263.423755092488,
    #             25793.21992002045, 26281.209432979627, 26901.89788497056, 25050.393823134254, 24181.863830816397,
    #             25700.01711975802, 25051.468586133036, 27807.801732234588, 26403.89806160138, 25188.850741394024,
    #             22702.321497304845, 25603.20520422866, 23312.171460004472, 26357.301551721965, 27136.017533721686],
    #            [16902.33400386721, 18059.980614095017, 18033.546582545816, 16779.491845219185, 17625.822401160258,
    #             18838.36024750388, 18672.050714741003, 18968.214348472648, 18672.703612496403, 18397.584015778022,
    #             18685.987056871723, 20020.768460387717, 17820.406072272428, 18365.042749193784, 18394.130431017737,
    #             19102.428108648288, 18073.091489452494, 18356.54182979154, 17881.808900651955, 17546.731819298784,
    #             17898.31284150682, 17126.72730592075, 17757.508373096698, 16218.208959380137, 18259.098512062163],
    #            [14906.13007358193, 15227.994239427533, 14216.924212370697, 12390.517967794749, 13637.496990350011,
    #             15019.84443286398, 4358.414355644356, 14816.520404004166, 14871.782699684149, 13855.127121062567,
    #             17777.51669117276, 14550.71452203807, 14714.895383980234, 14493.598464421742, 14209.613690396282,
    #             13903.4347473796, 13769.01479176359, 13938.670121619884, 13614.26847379185, 13387.997210046948,
    #             14704.63566475338, 14257.606186230805, 13862.22188963947, 16775.87486628434, 12929.705122732023],
    #            [11443.271112170089, 10856.59472039603, 11201.119069317105, 11204.518381914671, 10659.740874439234,
    #             11878.163520030517, 9717.083742431914, 11917.006408884938, 10980.034586243626, 11433.618121702119,
    #             10517.294309842515, 10011.787686835543, 11619.08031885087, 11796.97545245062, 11239.668917979463,
    #             10533.565691493473, 12417.736362832637, 11072.965327949534, 11391.14609141268, 11981.003826138482,
    #             11633.401058984668, 11899.2874022553, 11115.390174199434, 9678.450446368568, 10013.485880719545],
    #            [10605.001379781823, 8857.505982302724, 9697.354873918233, 9520.843782886672, 10729.353024668038,
    #             8889.382900916942, 13536.563923418704, 8872.079765059545, 9738.466604466168, 11551.236590060973,
    #             8448.598280771646, 10668.186004308587, 6529.116996174242, 10307.377158491434, 10150.006186561832,
    #             9685.482888992861, 9984.382981311668, 9545.531547182107, 10537.985110316951, 10114.780126583513,
    #             10267.353325950748, 9521.598122048788, 10336.583344465285, 10629.884823303593, 10077.44677609045],
    #            [8233.839399266577, 10486.058754416084, 8878.824512638152, 8808.948922916974, 8261.08682759039,
    #             7731.914534460831, 9159.940403318644, 8783.674596386725, 8893.598138680143, 8561.396927742186,
    #             8031.9331053865, 8340.230262660722, 9177.016492707793, 9347.621591368568, 8653.801764038604,
    #             8895.121040913562, 9145.200156205821, 8688.469249266973, 8311.768839987357, 9250.407004809682,
    #             8456.51517971527, 9205.44957960031, 10646.470255847387, 8482.598166985386, 7199.365174018748],
    #            [7531.011290848339, 8101.370830285531, 5521.659400246403, 7766.907447531713, 6974.21671949709,
    #             7319.498409853478, 7269.001048815524, 7512.317849746386, 7275.189310400154, 7637.144158442926,
    #             6940.169327021364, 7879.505882727294, 8543.687065671756, 7736.172885553538, 7654.848553998133,
    #             7837.025416081662, 18723.400686960544, 7874.2446490210605, 7261.104184266198, 7624.666184316247,
    #             7431.962450613443, 6235.517672411541, 7098.856511212846, 9690.638339048111, 6345.789671053269]]
    # y_lower = [[51289.236540710175, 48763.57216229296, 48425.388108266, 51516.91627328365, 48370.86330523328,
    #             48193.94726650741, 48618.0087242368, 46063.68810977157, 47914.61894932754, 45616.10247405276,
    #             50291.373154732144, 45535.18531411425, 48325.03125687182, 45554.81760579328, 46589.27478989522,
    #             48779.48897038643, 50117.23771020953, 47667.26949584033, 47239.61543839305, 48555.05295774617,
    #             48594.37322579541, 48646.31039390096, 47938.45416016716, 48328.72769124013, 47376.98373852761],
    #            [42180.30711473901, 44966.98587359933, 43654.24188994439, 43212.32720870485, 42338.4992565491,
    #             41187.68262985303, 43276.517995220085, 44163.48491716893, 42594.89962315964, 43940.87759726297,
    #             43566.84947186329, 43719.94282464399, 42586.66488142148, 43531.942041528346, 41012.94248869601,
    #             43271.6477124723, 42629.15377570217, 42803.90144966425, 39912.808306938154, 43866.39773517215,
    #             36052.90741416596, 39918.76925341623, 39178.38445356453, 43456.38792518532, 42213.184649074516],
    #            [38858.79143195071, 39739.949588075004, 39452.81303895285, 37680.728031090744, 42103.39887194566,
    #             40001.331060203695, 40083.9504166059, 38374.70377482962, 39149.37204397028, 38962.298295425346,
    #             34881.67912102677, 40281.592267840955, 39437.663691460264, 40266.187721617054, 39031.48231369405,
    #             40060.78414624937, 40627.62008147369, 37776.048286553, 39279.13529321413, 39261.272391004015,
    #             36886.83372161408, 38967.19342374858, 39019.727473547224, 37581.79085509478, 39514.33293641088],
    #            [36222.73886439283, 38112.18973231351, 35930.00512729272, 37497.07829317807, 36965.1249009556,
    #             37485.7315077913, 36276.223041922756, 34878.74255927745, 36829.02269548075, 40513.627150315166,
    #             36703.376958361834, 35282.36896053182, 37382.5801817773, 35847.436092399555, 37306.53646475407,
    #             36318.073130319666, 36921.37996559876, 37164.83863174102, 36338.73451872056, 35961.46350522891,
    #             37495.12106489754, 37220.23089523325, 37550.256410214715, 36788.930102721206, 36014.12497252904],
    #            [33188.41000399076, 33459.59752248815, 34394.08615019124, 31814.364613892805, 34422.341168431034,
    #             34104.9557742873, 33223.14326284231, 34210.39255543086, 34614.54472156675, 33824.01704186037,
    #             34584.955377015336, 32442.311204200636, 34992.55647779965, 33503.500573318706, 32550.159680041008,
    #             33815.641790951355, 38227.987695721116, 34500.796837571805, 35462.69915606895, 33375.751208074864,
    #             35651.35977866958, 34752.16865401419, 34864.552405794995, 34577.83587389457, 31733.940432749685],
    #            [33026.53908305643, 32797.09540114348, 31437.94400797143, 32168.329488098992, 31847.936506242393,
    #             32964.23437119744, 46674.69306322476, 31845.276661490403, 31081.416605596904, 32300.699632278596,
    #             31517.019744100002, 31600.80732351463, 31546.251572747944, 32937.867048908156, 31397.44131462806,
    #             28652.576974815725, 32097.346009570847, 32782.523907714116, 31821.480651037647, 32211.00264272086,
    #             32156.253325414797, 35263.861998408116, 31934.02000237656, 31959.995095550494, 32043.991740013582],
    #            [31346.67002471705, 29919.986152590955, 31503.404799869913, 26904.175943895287, 29808.451701484053,
    #             30162.347260112132, 30931.009122958083, 29513.113657958886, 28005.578225897796, 28645.32931956083,
    #             30578.348237986742, 30904.452987327066, 29517.947353033534, 27959.62224251101, 32344.184125600765,
    #             29164.35825336611, 29891.66702701613, 30591.26957740298, 29845.88163185498, 30242.69113814096,
    #             30481.34193105, 29590.06697698119, 30968.21722622166, 30858.169368350584, 29862.587490610586],
    #            [27614.017380691155, 28252.403058640994, 29579.115397918744, 30536.93501465028, 32559.63554560926,
    #             33888.935569236724, 26687.727131171046, 50035.54754079071, 29199.093098471523, 27478.48442190776,
    #             29086.849260792955, 28521.350845478966, 26896.680832485294, 28034.18875237296, 29023.017535252184,
    #             28045.928978947846, 28272.471517184185, 28090.945563054825, 28988.810117732235, 29332.846648962815,
    #             29669.08578630644, 29588.422446042536, 28662.89625072442, 28335.209150128474, 26473.960479708578]]

    # 时右
    # y_upper = [[41937.33971168518, 41471.30737518083, 42598.257553021765, 41199.88380151898, 39903.02642705313,
    #             40421.01444580574, 40995.40968292611, 38651.006945212845, 40751.89784436102, 40428.82330866658,
    #             53933.541658861075, 40028.30650205997, 40634.13346992563, 39074.449901405715, 40197.01158955392,
    #             41252.116085159956, 41596.544532418004, 41243.88373833331, 37494.48014974367, 40589.653184777344,
    #             41560.406246568076, 40223.15335910091, 40040.11937245097, 41663.75964015798, 43487.680094316034],
    #            [26424.251662728086, 27202.294843112348, 25655.155190974925, 25297.962970138615, 26454.461270425803,
    #             24666.512027876313, 26557.04833850274, 26125.988671963227, 24206.776492194585, 26330.692298241403,
    #             25782.480308597922, 25720.150593622384, 26637.726846048983, 25508.46937310166, 26043.19694307263,
    #             25460.474629500462, 25376.380226389254, 26262.320005201298, 26091.15399061504, 26230.403763526294,
    #             26051.37881258815, 25438.357285723592, 24215.06952546541, 26177.564738153174, 25571.402313701918],
    #            [17720.417859927467, 20669.13054853764, 17921.191165979864, 17241.4810037873, 13618.307557266375,
    #             15558.151462144957, 18217.47864063355, 17206.923297105266, 20561.962853897137, 31030.935462509246,
    #             18438.61618292823, 16005.246950377004, 17909.56998299157, 20767.994837758197, 18362.207129113773,
    #             18988.337923977815, 19520.589075993918, 19512.178293961737, 20867.803369306337, 18436.814001554023,
    #             19324.110481026844, 16906.729650716654, 19531.614093012708, 18616.885101971868, 18940.845590242017],
    #            [14168.239045309321, 14591.156176513345, 13504.531412917566, 13829.79627913205, 14103.989381521196,
    #             12577.280406877768, 14895.255216470909, 14222.78171955622, 15272.57996135575, 13508.231405541357,
    #             13632.102734844813, 13914.929167458853, 14377.391145164722, 13867.092305337344, 9226.278238072024,
    #             13658.245026053366, 13891.736627176659, 14871.076216019475, 12088.839195048418, 15384.36954362837,
    #             13687.149924444544, 14065.730178684811, 14580.781279883351, 13956.912121262047, 15760.556006743334],
    #            [12616.770649094158, 11758.156387919013, 11937.41380661726, 10942.216212436713, 11116.26719794807,
    #             9978.80136510891, 10834.012162383553, 11371.664849685176, 11202.416670628036, 10123.276115827312,
    #             12145.708757173312, 11646.2853369383, 11346.125668456178, 10003.344231189296, 10784.922788854008,
    #             12241.406653279548, 10318.892366556933, 10849.403665838054, 10627.113098381717, 8264.230282756664,
    #             12280.535182414173, 11486.998385128878, 11310.296472294562, 11085.732327136722, 22440.730546719322],
    #            [9298.739888522634, 10007.888588683527, 7957.547402377657, 9567.716071798477, 8939.831730186146,
    #             11210.552488626236, 11758.699759829275, 9390.345147851127, 10134.260455627293, 9625.045231661055,
    #             10263.708002330477, 10018.471660755025, 10397.013396743117, 10227.448232132185, 9354.136535978458,
    #             8476.561418256653, 9761.702714324352, 13356.605068242132, 10226.676732618076, 9308.85735243057,
    #             10246.690634090482, 5739.157519403827, 10082.721374790674, 11509.498494331863, 10573.696916256496],
    #            [9206.912380751312, 9122.332057353475, 9877.597376944283, 9794.631107117122, 10351.60132339087,
    #             9109.930146785317, 9083.772776452504, 8666.011670321095, 7846.477266060171, 8160.5082710589,
    #             9020.497907852246, 7495.213556043062, 9243.576117704139, 8765.069643251158, 8520.438596324759,
    #             8532.305169294666, 10466.028510346434, 8142.17160538773, 8196.76633742906, 8953.524383636539,
    #             8609.657936463982, 8356.2016969686, 11024.9421964838, 7783.951736983813, 8696.137170225571],
    #            [8227.452139912206, 7270.824296173811, 7720.185193767824, 7068.603056403588, 7611.0871527734125,
    #             7446.665918466664, 8215.806148774524, 7313.019537984959, 7711.810671654344, 7664.921260122996,
    #             7541.647996470429, 7844.2769903255285, 7624.644159519873, 8271.755861447633, 5407.1972438327575,
    #             7730.083941678865, 7005.76828906857, 7923.806196193171, 8334.005358798364, 7975.985803597452,
    #             8172.3267178620645, 7767.275041207418, 8109.072105218152, 8065.360403574912, 7905.762683184276]]
    # y_lower = [[48704.86083936041, 48232.1721906605, 48334.47076749844, 44331.655354235256, 47959.892599417166,
    #             45383.856183292315, 47766.34091224449, 47386.280096591465, 47400.400883289854, 47121.10148585738,
    #             47211.709749327536, 48164.00293467432, 49785.39994935453, 48422.57163168491, 48975.836415895705,
    #             48642.74743148628, 47862.84579032527, 48857.79105263594, 45823.010093868936, 47354.63987599152,
    #             47951.68680912804, 48457.2218525014, 48227.03997856653, 47807.102254716694, 46371.8975496218],
    #            [41596.0742150814, 42498.44994873495, 43027.4409414374, 44774.78169254813, 42539.664853974034,
    #             42936.35234885439, 42572.064680168114, 40188.23947268796, 42341.238007222026, 41980.16218202226,
    #             42270.53010316637, 44588.44510705775, 43086.76772109539, 43291.40801474045, 42304.671537086055,
    #             46484.14985153088, 42647.020910686755, 43414.43435435772, 42772.46431331483, 42035.335783805094,
    #             42850.38910686052, 47582.873040207545, 43878.647268471665, 39887.180008736, 43176.554113755126],
    #            [42851.290312568126, 38696.9713888414, 38796.94721140144, 45142.17350843674, 39752.523719298675,
    #             38333.81856024818, 42179.81975543627, 40469.75510028986, 38609.53061944003, 40118.14765366206,
    #             37505.66244679392, 39959.91155259024, 40013.307090604314, 39351.53175738743, 39588.70011848096,
    #             39054.46197575148, 39690.79879857598, 39339.16193804059, 39578.1198320545, 39662.33824880674,
    #             40333.457643576716, 39285.85722269999, 39052.19809568109, 40420.25816668378, 39669.30019591006],
    #            [36360.76291947615, 37788.91332037714, 37240.40838973334, 36833.28155771366, 38866.00285015008,
    #             38021.245408070135, 36686.992604708095, 35597.28828505625, 36404.68367149898, 36676.22316048439,
    #             36222.67979433254, 36031.29665840869, 35919.5297926723, 37488.00510091968, 36718.31936829244,
    #             37551.401069498694, 34787.66377179824, 36480.25609343267, 37347.79684029338, 36784.73251787282,
    #             36042.44626679976, 36870.44367757058, 38555.71704511711, 37195.78747675574, 35473.07469359887],
    #            [34199.97890580463, 35137.0591730432, 33596.33868747313, 33677.40314044812, 34965.10217527253,
    #             33723.02879536193, 34455.01553242111, 34399.470689590424, 34339.89433793947, 34198.846879726916,
    #             33347.495190652764, 34924.57624479258, 33243.087044259104, 36227.48011251926, 35859.05949082238,
    #             35054.871104047816, 34691.617393204084, 38728.05372968277, 36706.9629811299, 34329.030302157655,
    #             33470.0049961177, 35005.08208448503, 33789.751305279766, 34327.57175745822, 31957.781533896145],
    #            [32741.047416575395, 31944.867869818216, 31814.512623765644, 32913.35071869538, 34280.41302515892,
    #             32317.08362665385, 31156.72469452978, 31263.32195244353, 31427.334232836758, 34618.635468456196,
    #             31802.825792674877, 17916.2268183073, 31645.246172007082, 31536.080324011506, 30012.979953129405,
    #             31828.936928582112, 26990.869506960164, 30350.090844197734, 31872.119424166944, 32602.071591400134,
    #             31415.734027276558, 31312.34596364701, 32867.05344766749, 31358.097920340144, 31968.970733501577],
    #            [30326.071467764257, 30528.767371220023, 29218.94840282235, 30646.983003912163, 30746.198483702832,
    #             28690.883863170093, 31769.72481914935, 29494.33155857736, 29447.82445913857, 30858.747287558468,
    #             28249.746752641455, 32680.25055295427, 30029.665014037833, 30648.399037435604, 29828.91525589683,
    #             30491.562798209376, 29426.019949277583, 30816.90387693959, 29096.91831580242, 31083.46858933989,
    #             30871.415003152004, 30642.1784146859, 29896.403649504355, 27222.757163914033, 32473.374119268963],
    #            [29858.558178974337, 32928.41598544517, 29951.322204581513, 28246.211497127566, 29266.724421558887,
    #             30627.111378740534, 28146.313006180633, 30127.692969446616, 28616.131096126926, 20601.006255216234,
    #             28517.708346245247, 26347.22302410922, 28088.600430033137, 28230.25626755935, 29193.248127340787,
    #             28918.866453858976, 27858.918838577436, 27803.799693424942, 27535.32364169205, 27653.40956770891,
    #             27909.662282241996, 28962.802365722473, 27739.816420768057, 28853.72703786918, 29180.477132123833]]

    # 时左咀嚼面
    # inside_upper = [[30261.924039902784, 33897.3731561857, 31938.453158177235, 27671.13404850536, 31425.109794223732,
    #                  31226.8607244834, 32048.279794380913, 28167.01271662682, 31543.227146846915, 31063.75347353247,
    #                  31922.18537986845, 31359.17661371423, 33397.53365257535, 32348.557974469997, 31871.63286689827,
    #                  31709.10291735144, 32013.594027148123, 32525.6395794207, 31614.771866460695, 29212.970041180834,
    #                  22176.309301042354, 32420.94786772778, 32378.390985088758, 31746.79397431806, 27877.38872771336],
    #                 [25786.20986919619, 24865.141512129976, 25550.759167004115, 26645.142974986014, 25808.7276515148,
    #                  25644.00368792118, 21712.56047897486, 25329.717610247608, 20872.128047720966, 21937.149963471646,
    #                  25104.60661477646, 24961.606821235488, 25186.42241833701, 25388.26272495515, 25673.372249995464,
    #                  24997.131610956687, 24489.426342352406, 24625.795445929143, 25337.89440806293, 25333.142479190054,
    #                  25829.000203300537, 24756.304046184305, 24951.733800445472, 30229.38813774008, 25100.044426088418],
    #                 [19545.2120957473, 19842.548900113514, 19784.52599991347, 17272.205708659967, 19978.77816166616,
    #                  19500.156822555033, 19051.982138724048, 20739.51578350495, 19860.83235307013, 18220.1340309664,
    #                  19812.67105065709, 20903.2095130638, 20145.247503706123, 19144.99691718183, 19942.522623657536,
    #                  20062.18506428298, 20411.439052769016, 19900.207706608388, 20341.746519529002, 21185.15307619883,
    #                  21152.599010914608, 18539.78176921765, 19777.502418882374, 15389.168616645358, 20050.48955861079]]
    # inside_lower = [[46669.163298738466, 44743.88058464653, 45842.842760497675, 45623.43757228811, 46582.66467131715,
    #                  46078.54602693522, 45704.788312602475, 45230.31166776459, 52514.057235498534, 46219.066104389945,
    #                  47939.1420486828, 46110.011864897926, 46617.16822436594, 45926.259979171635, 47176.859291237255,
    #                  49918.847895700885, 44926.19366622025, 46444.1997572633, 46643.55492914261, 46057.99699930185,
    #                  45451.086344277464, 45390.7765887385, 45207.523324962385, 45491.21049756706, 46096.55435961344],
    #                 [39923.120245530066, 41627.594654881184, 40039.46448345387, 40232.655116994996, 34977.7363955481,
    #                  40266.59748262621, 42557.40916527122, 33500.873830675395, 41755.93145265674, 39549.93873253646,
    #                  40761.921185440886, 39295.093254514526, 40921.019288762065, 44970.956390746476, 40330.49479730332,
    #                  39336.21549163118, 40251.42413663459, 42183.94411821971, 41692.09426050304, 41391.14004693168,
    #                  40429.72622066834, 38624.3417651625, 39275.85011536688, 39566.696582883895, 39787.58244516991],
    #                 [34357.49250917215, 35427.574232715066, 34910.64416435594, 43303.13101847019, 35074.508547418314,
    #                  35816.00173970598, 34783.401500370455, 30100.813749191886, 34973.65930866048, 33531.1212976082,
    #                  35328.58173458912, 33339.398450829394, 34962.12645168824, 34001.95285988671, 35425.42553348261,
    #                  35125.79480385499, 35638.77211322763, 34890.60530329373, 35523.6473791345, 35708.21107115799,
    #                  33860.4532003477, 35147.363585246756, 36326.47183434328, 35385.01942133929, 34631.95118636408]]
    # 时右咀嚼面
    # inside_upper = [[39532.85449224083, 36475.935493111516, 36247.99051533303, 36440.50361539179, 36694.06944706237,
    #                  37760.86670093182, 36174.40853032166, 40725.58450405044, 36656.48377126321, 35141.358807223,
    #                  37711.33397896654, 37543.02784193959, 36068.77312901177, 35349.94759344632, 37467.886793546975,
    #                  36579.60198794895, 37553.435549417496, 37342.798134143275, 36306.66451404154, 37218.85230142712,
    #                  41428.204278969424, 36688.03211634605, 34422.572839648434, 37197.219988469, 36437.66374680324],
    #                 [30888.20059909953, 25115.722245990302, 21248.84839179908, 24436.339220610473, 23149.332396206642,
    #                  18566.78300491023, 25442.989372251785, 24324.951439895216, 24026.38537992013, 25112.87836758109,
    #                  24526.89634152834, 24264.878268759152, 23850.820843308997, 24771.43315947842, 24212.647281124504,
    #                  25379.30932390129, 24742.093548456876, 27524.393056508372, 24954.6949818556, 28526.922511548484,
    #                  25500.049323018746, 24358.165400223344, 24950.538776872047, 24557.303114322833,
    #                  24334.847820084513],
    #                 [20761.21508000285, 21975.31648905188, 16643.994211082798, 19854.08164865878, 21491.70129886531,
    #                  25164.3436388861, 20661.225946973384, 19251.853652325524, 21194.68548162137, 20977.312735428204,
    #                  24057.116648442938, 21300.985285344905, 21417.53754454148, 20973.374533912436, 22163.403564163636,
    #                  18780.736209218132, 21269.49097287189, 20440.541652513257, 21171.3727578867, 18153.129568473116,
    #                  20915.32775631851, 16893.402502349643, 21040.29140322316, 21098.755172131307, 20483.63734921996]]
    # inside_lower = [[45035.63425127128, 46712.11756154236, 46198.535799053534, 44778.45443389529, 46718.759267001245,
    #                  46128.803267261384, 49720.94254960721, 46569.61061367092, 46938.24420319612, 43472.49482370945,
    #                  47885.40323202469, 47343.006785371115, 45691.03004140972, 44707.164055076115, 46774.3681658755,
    #                  46286.37130778245, 43924.13013141287, 45374.275166605075, 43754.62411709299, 45458.517899974,
    #                  46272.491394412624, 46659.10284129283, 44841.27545148932, 44990.3268815292, 44880.4809527401],
    #                 [40506.61338447032, 35979.77639238788, 40704.03198506845, 40724.432561549926, 41105.552233469774,
    #                  39138.42698993141, 36578.70512257324, 37184.02707697004, 39065.28203881294, 40608.245541444805,
    #                  39772.800172203664, 37687.76711966872, 40318.01721773124, 46415.82522578417, 39839.02331213833,
    #                  40843.3488922601, 40326.729341343096, 42552.10162344798, 45681.02380194022, 39498.48205417093,
    #                  31545.140721169722, 32738.920215205195, 46646.5505014067, 40808.76323313487, 45299.30809300597],
    #                 [38051.514562320044, 34095.91849628195, 35116.421745098, 34760.907181472925, 35770.221333190864,
    #                  35029.362020377645, 33792.627594511214, 35515.43342166165, 36654.4457606977, 34285.219036960785,
    #                  33638.03308240523, 33004.176053367075, 36403.23884672283, 34994.33968643138, 34992.896211910265,
    #                  35920.614633667035, 33658.605132991244, 29737.601770648198, 35334.45292728545, 34541.70156331424,
    #                  35406.78235036579, 34488.19753779697, 34593.322114017246, 35623.74883622789, 30696.840785932647]]

    # 时左后内
    # inside_upper = [[32889.30978468774, 38213.26197218772, 40221.6976041073, 48126.44592247078, 41827.92838065459,
    #                  33958.617952272194, 41257.7283345711, 40961.958982257864, 37367.86032889844, 41562.13811910515,
    #                  41761.07402953638, 49479.50461726549, 42535.290345426285, 45340.190520453936, 41198.75101486929,
    #                  38917.72012188908, 41320.91420509316, 42707.01944494674, 42694.438231988854, 42073.66223324781,
    #                  38097.599170961264, 42273.65601085958, 41215.035173419325, 41405.824616165584, 41010.36154696308],
    #                 [23197.623632015446, 27885.71373093674, 26895.606583917943, 25500.77075372736, 27488.503240212172,
    #                  25848.288107965687, 27570.17188831955, 30310.014272534994, 26098.994385635142, 24131.864421006765,
    #                  26632.70489739651, 26667.43188981951, 26502.602102454097, 29118.06733125526, 23390.672379684132,
    #                  25576.195888644434, 25829.75311334943, 27089.18142409424, 27475.70538372563, 26628.56698463076,
    #                  26908.158967013227, 25505.31824569331, 27879.763724002747, 27500.55543114795, 26361.22123393969]]
    # inside_lower = [[45247.687929414344, 46988.5134648469, 47891.23998362301, 46478.633374843106, 49563.450705326475,
    #                  46223.71991953912, 46412.22416209165, 48188.768536963384, 44377.82866542955, 47631.65766279092,
    #                  47894.36170905503, 54897.05465142352, 46934.7463414737, 45654.34445372816, 46980.090389479745,
    #                  46842.31378481754, 47588.98132526104, 46915.57826571963, 47511.97995678975, 43508.60371071471,
    #                  48300.74384314989, 49393.008255216635, 46012.255769779, 51895.798673935096, 38269.13317621709],
    #                 [41345.78401345205, 40182.38347920416, 40984.57495854529, 43374.08423481556, 41285.39809027176,
    #                  32581.424141669944, 37833.46060867368, 50902.04586787076, 42203.18425744261, 41473.002888021096,
    #                  40606.22276023135, 41557.78824648715, 42442.534110629946, 40368.7161959707, 41434.02127428775,
    #                  42886.60542140193, 42169.40315370456, 40740.56014935367, 40893.74367483464, 44980.030064081155,
    #                  42340.81991884583, 43834.35341149743, 42243.75769742885, 38989.157294241544, 43380.30306713288]]

    # 时右后内
    # inside_upper = [[42432.74645143175, 43293.12749115784, 41257.02895348801, 40970.32921127344, 37176.82817101092,
    #                  44673.674468103505, 39576.86832463131, 42694.10295457728, 40633.747835004055, 42022.706677475726,
    #                  40695.44590403886, 41022.611089369, 42140.52521877935, 47763.47751264547, 41155.56896558345,
    #                  44672.41733126919, 41969.51739955841, 42552.40377628362, 41815.317864609104, 42829.366912280435,
    #                  44659.977711039006, 37699.67184735147, 42231.235730469496, 38612.04234208277, 41424.952471546014],
    #                 [27153.29198492731, 32871.302067387376, 28513.25833122796, 31324.406222638572, 28521.319647148666,
    #                  31455.430653206648, 23000.463520395504, 22130.635073089106, 26522.781763562823, 26540.59098634293,
    #                  26091.69339507288, 16752.480405885733, 26449.11731696998, 27528.233238996498, 26264.709568924838,
    #                  25544.685574554765, 25376.548902464776, 27585.985856706793, 26289.507253424767, 26247.627232866886,
    #                  27145.15672517717, 26709.554901281346, 25037.193686245202, 27622.970728958062, 26685.71726903446]]
    # inside_lower = [[46367.97603217626, 47900.722823127195, 47452.71469873618, 47066.073872673034, 46749.326648144095,
    #                  49567.825195984595, 46983.4226484277, 46160.85037040555, 46530.4187369675, 46533.12924103266,
    #                  48263.14181087104, 54196.93493590968, 52031.27856896358, 45988.86579938123, 45065.424202944574,
    #                  47555.055569261334, 44345.0925344167, 51602.08870821038, 47068.03145733683, 47200.6729616972,
    #                  46490.52298122989, 46965.446675233055, 46698.08352758628, 47403.94943693961, 46946.04053261663],
    #                 [36880.19698106429, 43124.84914858222, 41209.82635147807, 39401.98638240349, 43231.29376291137,
    #                  41399.536684232924, 37341.393761958505, 44892.72686891403, 44870.635598243476, 42995.77039088175,
    #                  41513.40761186525, 41738.32890234816, 41006.2009017132, 40211.12639160362, 42137.06414119573,
    #                  44591.821093473896, 41254.00779171018, 41955.06854890753, 42582.95567701097, 38823.15600927492,
    #                  43860.3022038375, 45988.22931899667, 41425.31400496737, 43060.86034173202, 41634.87923683113]]

    # 时左前 4
    # inside_upper = [[11965.105495099348, 7072.456122860148, 12527.569742962267, 11539.695858915557, 11607.198453486133,
    #                  14796.245194837133, 16377.066655349057, 13559.494418129283, 12020.651066822174, 11810.255362642967,
    #                  12205.114012657636, 13523.139484328147, 10100.117803919231, 12599.728860035273, 15621.644188321847,
    #                  17392.392770299408, 13693.626372397513, 13321.508694559201, 12055.48767812057, 15106.283875491978,
    #                  13079.382143424336, 15352.540666689873, 12028.201153099088, 13072.007808324706,
    #                  12051.830383521028],
    #                 [10749.009606126034, 10007.33236479244, 10953.104451731893, 10565.833682476588, 10661.412180505142,
    #                  11659.099480019502, 15182.609171164648, 8286.575184356683, 10951.55451286246, 11087.422262062233,
    #                  12150.678931117101, 5547.241068547285, 10747.716110517445, 10570.50012357242, 15041.114993339748,
    #                  1987.4805442153156, 11268.640982890603, 11704.951254927677, 11233.536553546359, 10318.428767838566,
    #                  11838.164860848783, 12770.293611934048, 10464.157000128527, 10899.925650551439, 7793.141553181775],
    #                 [9841.154614609088, 10012.091119714605, 4190.7115844144955, 11805.694706993885, 19059.249668351527,
    #                  7000.356682022543, 9683.190744783675, 8667.697948355604, 6497.006630086589, 9497.360764903344,
    #                  9124.937873482992, 10330.599791834786, 12881.033890812185, 11442.483071088434, 8984.851060278199,
    #                  9535.4657628572, 11309.686363635217, 9938.783620741748, 9616.950536552813, 10120.783602374762,
    #                  10201.632794347694, 11944.797263316344, 7529.280205176205, 10304.925969432355, 11740.730973349519],
    #                 [8617.157256636168, 9413.267069020056, 9766.768014571611, 8419.08362691712, 9638.257661783995,
    #                  10637.976852719597, 9759.695959041932, 10530.964219422864, 7916.804091472992, 7108.222778621216,
    #                  5798.753798744105, 10703.863850635964, 5481.412477486942, 14693.676780020378, 10692.258062005181,
    #                  10002.92020614924, 8868.157022730122, 9573.297435234597, 7429.35834298411, 10468.648082028938,
    #                  9560.707282936082, 9843.570210530941, 9320.513987067747, 12557.14730136727, 2961.1502514674175]]
    # inside_lower = [[30317.094495715115, 30117.113611337292, 30125.81187621649, 36980.797622454105, 32000.064165644395,
    #                  39815.46484772505, 31232.52899595715, 30489.74379631601, 32696.76820631539, 40645.30851417562,
    #                  25061.043587078522, 30912.180337990438, 31682.882791918477, 30045.63128005728, 31820.785967651256,
    #                  31454.039077082703, 30221.726987595903, 28435.47139523801, 30621.659347182725, 30870.62956660943,
    #                  31223.021405828906, 32187.828940545693, 31753.646031187393, 33656.781509397944,
    #                  32423.912447459446],
    #                 [27919.11277002703, 28769.906890710048, 29450.809108009576, 28311.504169925614, 18183.352324759246,
    #                  28526.279287652684, 29543.316378566586, 30272.00061542705, 29473.540426078027, 29674.59266136503,
    #                  27903.670874774845, 34991.06630273943, 27934.675910012462, 30144.171681192867, 27875.841788391896,
    #                  27958.46209751455, 29095.318934463605, 26956.3496316618, 27118.042074558638, 28888.515963940536,
    #                  28787.2959510382, 29157.998507471715, 22754.327474352496, 29254.941790842986, 28645.46383587746],
    #                 [26967.340602943743, 27407.182290002078, 27419.377607511786, 26211.445195575245, 26174.92759147512,
    #                  26687.602169905593, 22649.216248315195, 21799.714687152693, 27419.005993068673, 26958.421097431717,
    #                  26630.209426429756, 34902.157148988765, 26724.75977583035, 26682.793992485233, 20676.408390440018,
    #                  26633.918446865384, 25268.59454278289, 21617.564331679965, 33375.07161010866, 26428.2737466689,
    #                  25973.0290066173, 26896.955729337118, 26850.61120817427, 25883.58236314056, 27503.074230685866],
    #                 [28399.642042088264, 25729.28697278449, 27144.196768587102, 27307.94363594697, 22074.066609004425,
    #                  27226.255452782163, 27036.873794193172, 27313.591725465, 27218.25208580403, 27383.986659301576,
    #                  27298.266719506944, 28267.15784861739, 33828.42170013294, 22941.403767131567, 28464.36037942065,
    #                  28543.41411311131, 22676.047087831772, 27432.509255063538, 27702.323965330612, 27961.751154452595,
    #                  27969.527551767158, 24453.19041334339, 24015.38466952141, 26796.325742020552, 24547.538480138955]]

    # 时右前 4
    # inside_upper = [[10567.377442228044, 12597.535002994824, 12817.982029751027, 17984.103438952832, 12357.091226672645,
    #                  11222.790901471979, 12612.656491815484, 12227.326619071839, 9004.849725986058, 8462.70627296539,
    #                  5836.247168823296, 10437.604605699858, 11650.053716227736, 12239.858905806765, 11903.246526365183,
    #                  13222.042011246964, 5547.129267514744, 17017.969685083004, 12675.266875537915, 10146.393685832638,
    #                  12590.726349934042, 13680.239364819481, 13357.772037800238, 14267.215718547804, 14120.45329778032],
    #                 [11698.453937346012, 11806.550753164167, 4233.624538866406, 11243.04729127412, 11493.31901442948,
    #                  11420.631502579612, 11493.53844565139, 10413.925105100565, 11087.203161505437, 11158.64696555828,
    #                  12249.070960151066, 10209.288702069689, 11639.41324531024, 10415.239839722868, 12493.599973390505,
    #                  10035.568143810788, 11478.309368654964, 10069.286321427424, 9436.869201777914, 10328.387276193074,
    #                  10818.19944447764, 12146.171656632125, 10452.99022542922, 11556.003615503721, 8452.720599118951],
    #                 [8162.325953272308, 9615.822935564272, 5974.328633841784, 9932.58498529106, 8703.850109057968,
    #                  9500.567929631115, 8665.570897947342, 9457.88089864319, 9416.904296748018, 6727.3279036025815,
    #                  9717.099976036956, 9625.068321558338, 9077.025053771984, 9313.430437851228, 8795.915150451618,
    #                  4879.230091123065, 6508.619118338217, 5912.798724992474, 5061.3170556026525, 8308.790583199037,
    #                  12317.690302162206, 9492.377141903356, 12175.420665171983, 8781.918577752487, 9550.54540840314],
    #                 [9339.859543272312, 9678.202126626476, 9088.929358130848, 11524.906647063, 7340.138837469596,
    #                  5837.658602449179, 10142.896912877863, 8164.32815809561, 12831.400725560365, 10768.995495597404,
    #                  12709.795499153754, 8720.093791624176, 11946.591171918162, 9360.798060591032, 11920.460935764162,
    #                  8376.415826041284, 9478.855602609594, 10796.401129301448, 8696.371440845876, 9282.162369010182,
    #                  9502.73576207343, 9459.528309853978, 9056.6216529862, 8419.113971680265, 9641.581840940673]]
    # inside_lower = [[30368.85148738687, 27222.12179490061, 24133.963210753136, 32202.322773843778, 31000.54154161009,
    #                  32029.35678653014, 31072.520832925118, 25401.67512329609, 31794.93443834635, 31482.083942548183,
    #                  30659.052360195965, 32026.23796929493, 23889.155384677004, 31215.648130580503, 34072.54707626606,
    #                  31860.092750119642, 31736.404049403216, 31132.53833349359, 32440.979883790293, 30122.69249524625,
    #                  31449.677474541913, 33971.025423289815, 29945.61098234133, 36977.64958426899, 30300.480214245246],
    #                 [29170.663144058675, 27932.14086669381, 36348.67650320395, 28928.661945996417, 24018.481070035003,
    #                  29093.213327076344, 28202.15286864903, 27783.3434519156, 28399.363583291113, 28752.70493434252,
    #                  28512.309225219396, 28939.437875307605, 29407.943727832553, 28307.537670997528, 28779.10427035086,
    #                  28858.114621310244, 28294.030774257186, 36537.2969050362, 27806.655865066386, 26040.67902770135,
    #                  28905.586978806572, 28364.84865087322, 40421.01504030909, 28812.905767048956, 37808.43238121879],
    #                 [30805.75196644983, 31098.71635335457, 19586.190391176468, 26066.67638081492, 27217.82639611877,
    #                  27248.080469168737, 26153.7654757032, 35678.57770050514, 26192.208499443925, 30402.78563433294,
    #                  26936.84837789027, 25775.726119792937, 26755.178025766494, 26531.054802588667, 27156.234143696285,
    #                  26913.49055883211, 26755.56614610419, 27711.01058136249, 21909.355987739884, 26789.393435674083,
    #                  26762.356110580396, 25598.814536757505, 26551.4968695839, 29283.48199467862, 27246.55472717922],
    #                 [33067.88417204664, 28766.837810208715, 28005.630928784547, 26571.955525740843, 27209.57215311388,
    #                  27171.27985526767, 23437.67844954329, 27084.88737762136, 27379.389476847537, 29646.12097961059,
    #                  29033.884582302486, 28150.229871184576, 28372.23235380354, 28307.392183650223, 28117.501788976424,
    #                  28233.10724940665, 23987.886646279418, 30890.30744244328, 28313.92860703968, 22132.711196243123,
    #                  27894.824383774918, 24841.872761141316, 26573.844785289555, 28560.887138431583,
    #                  28064.404459962137]]

    # 创建图表
    plt.figure(0, (4.5, 7))
    plt.rc("font", family="Times New Roman", size=12)
    plt.rcParams['figure.figsize'] = (4.0, 3.0)

    # 背景基准
    plt.boxplot(y_upper, positions=x, boxprops=dict(color=C_0, linewidth=2.5, linestyle='-'),
                flierprops=dict(marker='o', alpha=0.1), medianprops=dict(color=C_2, linewidth=1),
                labels=["UL"] * len(x))
    plt.boxplot(y_lower, positions=x, boxprops=dict(color=C_1, linewidth=2.5, linestyle='-'),
                flierprops=dict(marker='x', alpha=0.1), medianprops=dict(color=C_3, linewidth=1),
                labels=["LL"] * len(x))

    # 绘制内 3 颗槽牙咀嚼面
    # [4: 8]
    # [0: 3]
    # [0: 2]
    plt.boxplot(inside_upper[0:3], positions=x[0: 3], boxprops=dict(color=C_4, linewidth=2.5, linestyle='-'),
                flierprops=dict(marker='x', alpha=0.1), medianprops=dict(color=C_5, linewidth=1))
    plt.boxplot(inside_lower[0:3], positions=x[0: 3], boxprops=dict(color=C_6, linewidth=2.5, linestyle='-'),
                flierprops=dict(marker='x', alpha=0.1), medianprops=dict(color=C_7, linewidth=1))

    plt.grid(axis='y')
    plt.xticks(range(1, 9), range(1, 9))
    plt.legend()
    plt.show()

    return


"""
备份数据：
左牙区
upper_line = uf.depth_distinguish_upper(x_, 0.2, 0.11479, 0.2649, 0.1)
lower_line = uf.depth_distinguish_lower(x_, 0.4, 0.2, 3.89978)
y_upper = [
    [41130.085873146614, 41291.02660797184, 40810.68074099061, 40509.40380001837, 40587.51078571858, 40482.817024700904,
     41802.187587091204, 40623.09722659551, 41252.18472952885, 40621.60500143919, 40830.742253118515, 40926.00870605042,
     40504.869147351725, 41353.10840610801, 40446.93087184615, 40307.90724524844, 40838.06783243499, 40966.27529082253,
     41241.137289526734, 40877.44322050223, 40585.31363837614, 41326.55564831462, 41586.02676796676, 41303.65559211965,
     40835.61429568138, 40447.680787756326, 40439.192368604956, 40291.96716505799, 41123.185832334355,
     40909.90804725973, 41452.06027590313, 41211.63347704155, 41039.25884522492, 40869.140982683806, 40575.0766014843,
     41024.46781923385, 40824.47291178947, 40529.69285127032, 40501.37114254153, 41270.01476572981, 41284.22492334709,
     41111.35660806308, 39621.68252897929, 40869.357542222875, 41260.307375154, 41115.17142403341, 40986.3122445399,
     40968.589833123675, 40413.09077547157, 40568.09785297596, 41362.83840393521, 41412.1196355124, 41348.44104211506,
     42133.16506029434, 41276.83763390706, 41680.972838534944, 41008.71235773694, 41388.15902857863, 41069.34209356953,
     41544.621617242636, 41469.90662387357, 40380.21025462864, 40445.86281027448, 40556.027169232635,
     40572.820040266226, 40851.16626043953, 41293.17242783516, 40406.98080683315, 41300.84915567887, 40886.48635272511,
     40962.86772923287, 40590.83609514675, 40717.89081892062, 41764.1815678749, 40631.60836229115, 40685.57939695798,
     40752.83843776233, 40098.252324476154, 40482.05352735982, 40539.53257938816, 43625.421507152365,
     41273.047261145075, 40996.52632498749, 39799.53135860934, 41041.5310879966, 40740.57713333183, 40601.926167923215,
     41198.22745946979, 41017.95430659135, 40682.968488123086, 41025.39810034955, 41468.18434715136, 41205.18338630899,
     41253.67582333416, 40642.253214172415, 40972.90535872005, 40659.02120792613, 40501.024628227286, 40132.70194559949,
     41123.446156724596],
    [27458.81695522832, 27514.330980935083, 27647.432102407645, 27704.997673919646, 27596.222908632746,
     27263.127928742553, 26857.1188871298, 27151.801144584628, 27489.217835203635, 27179.233876505517,
     27231.44115244311, 27528.98746978635, 27570.300069011522, 26945.633087331327, 27993.460828122257, 27243.7076180228,
     27333.5859360743, 27733.503431147066, 27052.940638046366, 27584.82371824189, 27220.0577493422, 27075.124356565328,
     27621.383498710187, 27740.612377154, 27212.84876758646, 28151.59527078319, 27165.88538137409, 26917.00202642515,
     26831.44207121448, 27800.217337600425, 27645.643364528773, 27583.55925985706, 28842.963675627907,
     27106.408301140615, 27761.787235969754, 26819.108036552945, 27064.69634374475, 27459.569344720625,
     27250.30437752547, 27704.214269310713, 27761.360617046295, 27963.666551240272, 26284.371974673617,
     27546.123975955936, 28706.407850069583, 27323.645155727005, 27904.064179803336, 27181.62939976801,
     27557.060564625634, 26763.275194778013, 27894.343635501416, 27643.62175653082, 27846.970940834322,
     27491.655918702778, 27585.044585068375, 27560.16833022947, 27572.69217334035, 27977.82394079388,
     27530.949690268637, 27511.29925813291, 28031.733528919132, 27087.159545460232, 27780.584411599117,
     28267.78986899815, 27559.431573147027, 27766.82967309018, 27258.855764753756, 27073.031647810956,
     27825.611723419526, 27681.952251938088, 26633.020929442893, 27066.622689878386, 27391.650561962833,
     26965.6995824671, 26859.113852195132, 27186.49539388779, 27613.528731271068, 26783.896837678, 27999.93042148563,
     26914.782916943503, 27583.130392956075, 27543.406016643843, 27908.317997328635, 27578.436824219938,
     27868.740754302788, 27304.245307268055, 27848.99336651623, 27264.485107155855, 27480.713889723174,
     27405.721567836434, 27283.080426296186, 27542.848858902682, 27255.855130211654, 27646.805765348312,
     27122.9984723662, 27126.232048490667, 28039.85788020496, 28079.08411572493, 27694.08672101154, 27766.592966882563],
    [20135.174219832978, 20918.904826534148, 20475.27561959434, 19712.08047562205, 20643.84128889558, 21147.54201317946,
     20153.846518607726, 19865.789342275646, 19903.847692809166, 20571.135205503786, 20171.674922790084,
     19681.3690573399, 20532.59871287431, 19937.46339388619, 20168.70929621667, 21032.026865542255, 20694.657428174734,
     20357.897952651994, 20673.840167674116, 20204.957900526446, 19245.69403299123, 21084.118228957228,
     19778.03559264247, 19866.41629804317, 19849.183340572497, 19886.504762441782, 19869.62141339058,
     19981.993076030507, 20054.87734156492, 20325.976962590226, 20143.099737663077, 20823.932644319062,
     20444.974092453736, 19881.14986056413, 20526.036267736396, 20467.752972949336, 19786.99096554261,
     19975.028991877334, 19652.64576701296, 20250.242416492703, 20554.502303634818, 20494.268816251988,
     20660.03849448795, 20779.68408626408, 20495.735993961087, 19926.88488721706, 19874.637323259303,
     20238.348752241945, 20008.57212401631, 20243.96466234459, 20117.318527932835, 20224.24412282127,
     20807.858025754904, 20622.792209562693, 20572.137242435525, 20226.595217793867, 19849.895236644334,
     20481.07145915086, 20317.74635273348, 19407.330512266166, 20337.43206424742, 20476.335661968536, 19841.10284237497,
     21584.623911511797, 21468.080777600142, 20693.768209580594, 19776.49006925651, 20150.03871633523,
     21079.668952210475, 20094.09689753618, 20062.803824875158, 20292.908862681812, 20127.31934148285,
     20343.147589816122, 20418.830279729045, 19636.165488336646, 19862.70035058924, 20518.749528914046,
     21524.052017260317, 19428.081586124357, 20160.394541668076, 20795.49328188656, 19710.36623379535,
     20141.73817673054, 20596.215845281793, 19753.995517777872, 18755.41546786745, 19515.74544507723, 20258.7272042571,
     20590.442220154615, 20101.51165461114, 20547.831226414764, 20391.54869959687, 20554.48263849827,
     20207.514446186935, 19954.979675486, 19988.54269673038, 20049.507546686273, 19922.618539653457, 20274.63571105901],
    [15449.535005692276, 16563.84157444125, 15176.257418859046, 15971.89035803651, 15774.059156989453,
     16406.67613527236, 15933.656397879613, 15904.409172435451, 16074.122683427724, 16192.091235230951,
     16063.80501219321, 16829.468332933997, 15688.243181254387, 16044.810279678608, 15762.319327386702,
     16163.775540662455, 16245.129915672978, 15817.884712728048, 15620.022723575845, 15524.637209112117,
     16188.313090423897, 15874.250589181916, 16014.77762617781, 16090.412110879397, 15625.031344894389,
     15966.048913746268, 15548.330504936952, 15755.276928793073, 16214.7498022413, 15732.877190354604,
     15725.687410694065, 15689.833650222625, 16265.760720639184, 16732.09445167173, 15954.6037598186,
     15839.442248841578, 16292.058281435657, 15652.456824327615, 16222.461747360752, 16268.280825186412,
     15555.277150993317, 16549.194567504223, 15754.624416399178, 16291.381891332534, 15719.4588438204,
     15505.298782822136, 16204.030062427359, 16052.524643299133, 15859.908055233138, 16616.72592877857,
     15959.450143622958, 16813.93738200366, 15869.921342064279, 16726.967599473934, 16050.863181283326,
     16091.347103110073, 16200.356244926557, 15714.951881172972, 15871.056324593112, 16523.10244359853,
     15047.122566063674, 15549.662269972541, 15792.186476746623, 16190.721406877723, 15754.860198374285,
     15621.186669205463, 15428.986598829088, 16326.596982589386, 16176.460017406192, 15593.571374663243,
     15368.066130386966, 16307.943480636313, 15370.72718264352, 15657.452686775177, 15706.985185553058,
     15972.915811316687, 16103.870009298791, 16080.261109056977, 16333.642182799696, 16477.536236507807,
     15493.464303116261, 16497.68790107652, 15212.623256047327, 15551.756506865175, 15715.649649725176,
     16103.656613765801, 15873.606995187578, 16218.95647885058, 16104.821319060115, 16309.465891395068,
     15506.951304169888, 15699.554109710894, 15642.664925475212, 16957.882668519884, 15728.183563366687,
     16688.75834148601, 15633.013345611002, 16369.105794781708, 16610.204840386512, 16070.472943699842],
    [12611.390731993915, 13004.651627259655, 12664.313628653495, 13361.220930960839, 13015.200810893295,
     12755.041185087672, 12769.1505786725, 13215.437488596004, 12968.048675678765, 12669.433784632229,
     12954.090601422082, 12970.151871076927, 13312.923180199368, 13036.94851233411, 12609.744119447603,
     13335.49471684944, 12616.935532893796, 12945.05969481391, 13432.91236148073, 12845.484654631133,
     13236.016721663767, 13158.457370525817, 13776.411211434212, 12721.385073257536, 13157.785136224185,
     12863.948603606064, 13233.70866344969, 12647.213900612413, 11912.39710962123, 12749.215142679648,
     12613.20359998683, 13292.525156492839, 13783.547739170226, 12815.816157120631, 13397.952319251226,
     12993.029789052305, 12793.84495228619, 13199.73163055945, 12864.878498204002, 13383.131730387096,
     13220.751218714286, 13228.780475980342, 13229.0246836343, 13188.500805787571, 13049.146875325365,
     12700.232314144769, 13441.724915516012, 13430.445702384228, 12758.032067769309, 12577.237071359974,
     13282.897684773565, 13251.298340522158, 13938.909665396852, 12614.614541362673, 11144.625262063848,
     13312.012391772656, 12835.938532568127, 12871.817368435313, 12693.149423890693, 12665.837421151586,
     12874.53792942091, 13598.50816229741, 12654.096356987315, 12821.20950028955, 13282.421092855513,
     13073.899399970394, 13371.283139133244, 13502.91892786701, 12781.135369140637, 13138.266824040982,
     13171.12529467734, 13670.212207073906, 12675.368582754903, 13519.52612110522, 13300.126556599378,
     13407.147199226074, 12998.556787861733, 13193.148340717964, 13150.523202540695, 13044.984435745611,
     12861.439820141239, 12841.340006449258, 13158.40751222198, 13205.782790211862, 12782.536334952447,
     13281.683206297439, 13379.80039471696, 13251.676549711414, 12908.381691486693, 12746.455933584697,
     12466.474450770427, 13265.507774854557, 12705.180023450099, 13602.847024765191, 12198.43607103116,
     13446.641810977293, 13383.815362813762, 12681.697947070494, 12901.571920586732, 13373.43826762806],
    [9941.872427965758, 11394.843347535434, 11368.904661260001, 10602.464632951862, 11342.882583525527,
     10840.67785898698, 10995.53266294143, 10816.633980647348, 11422.93813921673, 11335.436523887163,
     11293.074028222172, 11118.419781385655, 10606.413714249606, 10629.106783815923, 11173.500577277391,
     11675.336733151964, 10615.98308061416, 10787.85560343225, 10768.79364542751, 10769.534673808865,
     11451.101711688661, 11227.834141339737, 11377.577829883596, 11330.552347235363, 11931.636025846447,
     10766.722581500611, 10768.754117253426, 10673.141980901632, 10929.765416581982, 10713.25669289758,
     11048.306806420342, 11418.708075700935, 11405.147696984075, 11063.968916887223, 10094.250689020466,
     11361.474625712024, 11354.009106535254, 11025.514671210965, 11275.030249757749, 12205.626619695184,
     11429.110781769756, 11063.341153437896, 11190.31840356622, 10978.462824628237, 11446.028141204839,
     10708.502157859491, 11471.704723823392, 11140.231193619533, 10152.080692332802, 10606.561289324636,
     11029.07745703561, 10875.220540157825, 11959.293548538615, 10930.657667668067, 10951.374900975918,
     11367.355898683694, 10986.555724252143, 12179.528700703531, 11441.408012289758, 10660.019399949593,
     11159.199605726739, 11385.14170680657, 11175.177430549673, 11028.642096105916, 11106.927712890512,
     10894.392321584222, 11510.760430849037, 10844.297124371726, 11160.318933488203, 11018.978666482053,
     11122.82514861045, 10834.446638523095, 11285.398434937288, 10434.070690807128, 10940.567842800596,
     11175.923226581453, 10733.035996476, 10873.89968595527, 11357.262481915628, 10664.11402857841, 10897.31594238419,
     10618.495306687368, 11247.395045145662, 11347.31446665674, 10454.692721391215, 11333.07975096025,
     11015.46165352974, 11287.564628407124, 10437.295228856, 10914.258518715487, 11294.79716144942, 11181.967916000252,
     11126.351158924555, 11276.15338901387, 9586.096537447853, 10617.753481537738, 10563.130865924033,
     11255.217801328758, 10425.42194861096, 11148.633035140114],
    [8559.94196214505, 9167.407926758071, 9743.892545795125, 9706.666097316749, 9927.409933990466, 9456.062261106359,
     9717.7302550387, 9746.750935408396, 9610.275906708264, 9311.78338733449, 9620.133295680755, 9530.503910759298,
     9146.975080513539, 9342.813674880288, 9126.316184907082, 9839.132179520677, 9110.066440031816, 9769.72388468326,
     8776.459922338094, 9857.292709487141, 9262.712450225152, 8819.296443317231, 9321.122261428116, 9715.23157102069,
     9658.704197355282, 9465.875323825847, 9304.505236184263, 9200.99975822836, 10116.603332755141, 9277.259972687281,
     9812.175124815776, 9385.084766639015, 9429.54252170584, 9417.723435003241, 9380.740170065876, 10364.094426588317,
     9235.418060092248, 9620.683393086216, 9127.276942553948, 9249.397697972685, 9905.482362063838, 8952.42602368438,
     9350.52592431592, 9176.043197296514, 9903.62409748912, 9685.117898153676, 9643.368646479536, 9847.870089925076,
     9459.184703055475, 9830.227671120307, 9552.092898091865, 9367.233885869706, 8488.41792580715, 9754.20225808481,
     9558.444135603715, 9297.190033155874, 9389.038902029464, 10440.407391976438, 9891.392937070743, 9645.925641091533,
     9703.581402637785, 8999.84062790392, 9326.97956579879, 9381.068716785561, 9750.318346529288, 9847.52673214267,
     9133.181051572212, 9107.816633189912, 9846.833417790349, 9170.4498877552, 9290.969011197529, 9470.87845369169,
     9166.3217258834, 9619.723777772073, 9483.921635086304, 9351.55202339071, 9416.914345274085, 9485.315080078819,
     9576.959612523664, 9424.592504654349, 9183.995448715681, 9518.020062447695, 9503.169393948445, 9804.936275165806,
     9733.942864910725, 9469.573610583977, 9725.619354033044, 9696.023042901725, 9934.497728559147, 10164.697830979938,
     9113.656754389898, 9293.834030536967, 9694.459963272458, 9392.902218382605, 10132.71072964337, 9728.419419427015,
     9771.499867315135, 9053.792435657764, 9754.33820015446, 9222.855685852108],
    [7752.967981915845, 8710.841775761817, 8315.229754943472, 8496.816504090903, 8565.781394302965, 8037.520147370247,
     8600.001640688204, 8914.608842479636, 8371.199235637847, 8541.862617908213, 8010.332627230918, 7748.9334460871705,
     8565.99527264858, 8177.898510393175, 7466.912729543051, 8372.582487552818, 8132.628376520929, 8564.557808853797,
     7761.984586052557, 8391.372567741377, 8392.885120376563, 8694.958595657385, 8381.391037271906, 8568.516027576554,
     8997.623694974824, 7912.03147376694, 8094.067724627323, 8051.802632016974, 8397.440143784583, 8117.049587679468,
     8119.691722104064, 8173.963192082794, 8223.553341228606, 8088.860580515613, 8376.059558262232, 8538.71133339173,
     8384.374217002836, 7925.373494823738, 8632.139129516987, 8500.052294567138, 8650.114462381312, 8145.965817611336,
     8692.17949546101, 7545.215130309614, 8465.466265273344, 8015.784181813514, 8237.00082208401, 7649.99720432964,
     8646.877860468217, 8263.791835475351, 8133.357578786854, 8365.259793477206, 8520.398218625578, 8230.732887217258,
     8054.66794027221, 8592.892587736953, 8089.784814484588, 8326.175411401919, 9432.836709258536, 8534.152326354568,
     8626.189341899428, 8685.279029504149, 8667.705486467967, 8512.380549175334, 7994.137375174393, 7096.357145061558,
     8199.317023911983, 8535.87146196141, 7900.0814105814225, 7990.878751135755, 8501.12845882372, 8462.729015270885,
     8606.318914608572, 8111.693061410262, 8147.544001465961, 8046.9546819904845, 8043.461052609408, 8327.952636420518,
     8271.285263106347, 8367.310186208839, 8173.327086976747, 8094.414558020651, 8076.505136000355, 8253.705080029344,
     8750.315763966364, 8237.936008121167, 7857.957085714013, 8058.241344644336, 8197.65343115666, 8436.846907491199,
     8336.558699602094, 7940.447406133323, 8811.062558500409, 8435.618599992016, 8689.340973479919, 8616.15741248684,
     8949.475879609516, 7972.436290537282, 8027.045799676612, 8567.53639486032]]
y_lower = [
    [48584.10145591751, 48306.80227442574, 48199.95756838835, 48341.18655298072, 49503.585496973756, 48689.9560110827,
     48737.45836482987, 48558.62873948831, 48013.69967772138, 48118.72930968222, 48655.527695964876, 48899.415043082816,
     49207.889637333574, 48412.773167567335, 48963.38126901163, 47848.08130623145, 48398.35287115498, 48664.7418910012,
     48115.137420667175, 48433.15751707586, 47981.43168025603, 48240.13327145256, 48827.30450412009, 48726.84865348488,
     48452.828738020275, 48268.3804013349, 48453.47756780399, 48180.818399404896, 48142.92973109194, 48595.64629898077,
     48486.764477919925, 48929.511654354865, 48173.59399306494, 47965.464428555184, 48808.01807132651,
     48854.20645856366, 48693.180031282354, 48619.87770048497, 47649.49884112027, 48227.68568123314, 48013.188419180486,
     48080.45796628163, 48955.7397681185, 48211.51137887781, 48202.20123443185, 48936.92014183096, 48975.21674143161,
     47925.6817899232, 47950.358071471615, 48804.17809559707, 48307.12007115878, 48350.77579032093, 48244.85322168951,
     48295.62832592611, 48079.88033609462, 48678.959072633304, 48343.66963931224, 48027.36797545902, 48652.475636820905,
     48294.46967106053, 48038.568758348854, 48270.91306745404, 48486.625151346634, 48773.87122566066, 48376.62800578208,
     48209.844180092, 48168.36285002852, 47988.33387352601, 48210.032954462986, 48520.30678117265, 48973.821653676125,
     48749.706535420795, 49158.06965533937, 48423.66451520627, 48513.053288189876, 47518.50570296973,
     48548.848973836364, 48131.99853225622, 48140.532362647245, 49112.99322076487, 48783.84334098106, 48673.67669747682,
     48171.674042944476, 48259.3431795533, 48797.717258873105, 48801.18175393906, 48671.79332466632, 48974.79077903715,
     48297.76101166411, 48594.23076695265, 50058.8099682239, 48635.47653262378, 48319.75053248381, 48303.38324824871,
     49068.33982977383, 48668.850067751846, 48609.086025217905, 48953.18740865797, 49182.82851383122, 48751.3823372917],
    [44487.10887113353, 43912.45426357316, 43980.0870835828, 43743.93113703156, 44480.53278333581, 44446.394829961784,
     45098.411553880134, 44425.5995296536, 43594.58142865725, 44122.75376797889, 44680.33484401336, 43878.022480084524,
     44171.6214397695, 44197.21732700034, 44088.778789146854, 44002.10241682328, 44055.40950051054, 44243.073227951594,
     44680.805706392865, 44537.29943726228, 43607.275820216295, 44031.00022503743, 43962.96450449893, 43575.82950108257,
     43639.091222998744, 43868.18891098549, 44246.05980653891, 44443.2847917584, 43746.44808800517, 43729.69524081568,
     44961.47852642766, 43793.03979751663, 43681.068146648155, 43815.845276398475, 44484.915839600806,
     43240.630066031954, 44449.00439682904, 45500.79880219574, 44388.19898245341, 44455.30393466057, 43776.09919263053,
     44169.58625397251, 44331.6730644644, 43560.70115332896, 44182.27926750128, 44077.97702353969, 44147.81435328078,
     43810.42859990228, 43995.58869935153, 43853.760116501944, 43694.36898132415, 44363.69199665533, 43716.01725062642,
     44024.21969136454, 43684.94119325944, 44270.440936981366, 43992.0378817335, 44180.523964426575, 44223.30462130108,
     43793.396560742025, 44207.31574268136, 44423.08100807112, 43880.30875459422, 43783.39751051869, 44965.71690457569,
     44083.67349979608, 44477.37598564944, 43695.805353750155, 43539.44421780064, 43866.188323497656,
     44426.827945552264, 43674.941842599554, 43798.383948142895, 43925.34969050484, 43581.75644043432,
     43318.697181385374, 44436.87405189704, 45195.262163738094, 44297.6705351818, 43678.39762153259, 44327.25438049126,
     43678.93960191289, 43237.92564159772, 43844.83245864834, 43455.197867305375, 43812.4116052117, 44304.80549749567,
     44038.01687733982, 43475.67000342513, 43735.939869224414, 44201.834196100106, 44365.45462157935,
     44719.827759416396, 44284.089545136834, 43396.890297332255, 44453.4663057386, 43764.107272626046,
     43352.332892585255, 44105.89311847592, 43442.99363413209],
    [41441.753369566424, 40859.30556893688, 40701.20305079945, 41459.486718646935, 41304.56113115333,
     40349.910231019756, 40831.983043940745, 41090.5961958626, 40842.81190090369, 40481.836878957314, 41482.71310236526,
     40635.25303981511, 41354.21461988768, 41049.521487517224, 41567.513781636444, 40447.25796044768, 41189.87898290753,
     40621.15930686831, 40912.34835401394, 41042.20247025968, 40956.16476783114, 40605.60772596258, 41344.41116911809,
     41109.30517718239, 41381.42341522777, 40833.97962955628, 40640.3978437298, 40844.93420996263, 41908.8069168575,
     40809.951934293706, 41305.786530148376, 41756.05187069155, 41111.72243371118, 41203.14413986066, 40484.66281079298,
     41238.67642611971, 40517.510841830306, 41327.24635723079, 41314.8455198565, 41368.80162769188, 41164.67636938476,
     40719.36014650389, 40770.73300665264, 41114.934466709135, 41362.16400451212, 41440.877810604376, 40946.81863032551,
     40989.07885047147, 41583.318578706676, 40840.834675416074, 41452.4732042213, 41099.42762174944, 41261.38894404194,
     41424.884086791906, 40531.46687459241, 41413.728480717225, 40937.36905502828, 41166.63264818538,
     41681.756289098514, 40781.49576472831, 40609.30998889656, 41820.69260109742, 40902.672754272106, 40123.81186748921,
     40549.97785545216, 40717.47772940319, 41245.652832064065, 41538.93577051684, 41302.8897570335, 41573.24211651944,
     41277.18261286099, 41161.93318135119, 40885.75752875006, 40243.76268130495, 40987.066195763444, 41442.540092409756,
     41341.18759975375, 40967.575628521336, 40235.900072813914, 40865.74522980132, 40783.06010839407, 41450.88967176967,
     41059.043100316994, 40885.54712241269, 41316.69250654434, 40754.23343466231, 40600.9877220916, 40948.17203053961,
     41407.78059378409, 40776.896728499225, 41262.35995075864, 41302.5969957333, 40879.43140147579, 40942.419182094614,
     41060.015318231104, 41564.50519637485, 40465.0250609175, 40978.517206686614, 41108.189700427705,
     40588.305950319074],
    [38037.77010219821, 38165.85085128913, 38176.5233354242, 39001.402353730875, 38712.940168653186, 38367.59025743147,
     38514.04152247998, 38250.82010918244, 38583.61607986279, 38007.04696380295, 38656.0473627741, 38669.70737260823,
     38371.74810947534, 38902.70328443582, 38325.96726449143, 38484.75829751717, 37713.64979987845, 38281.1231790949,
     38331.77729530281, 38435.77909564776, 38268.34354316004, 37990.372479742866, 38690.4665046622, 38103.96887926787,
     38083.02920982679, 38540.668715838416, 38682.8553057944, 38659.60394070795, 38772.32864977515, 37761.2515622967,
     38022.875081466744, 38100.41883738953, 37982.86756207421, 38416.10339969238, 38381.187231876094, 38021.76358864752,
     38339.65920645819, 38375.16590511881, 38616.37358199333, 38638.687623985614, 38812.901830457056, 38177.76386508358,
     38405.3609552622, 38019.39044971414, 38957.54015017753, 37985.2964680457, 38645.28499232956, 38465.87508584758,
     38682.87386162682, 38095.82865899424, 38086.39056832815, 38241.86843392903, 39949.483527864846, 38588.62206714912,
     38444.58405827067, 38031.55033240823, 38055.345005499104, 38049.83692617815, 38005.494646327264, 38154.99741613321,
     38393.76228213303, 37430.9250587532, 38533.81816421608, 37969.75519978977, 37923.81404660447, 38519.790663453234,
     38313.54329482065, 39088.6652966243, 38501.03083163288, 38314.46884899561, 37958.149968116835, 38498.68485246995,
     38775.700631630614, 38201.89788091164, 37981.87264680278, 38539.366756692085, 38310.288619383886, 38632.2173229153,
     38783.67665125192, 38301.28508189048, 37393.339978707016, 38747.89382660333, 38898.82841910659, 38441.44572240924,
     38301.472998055375, 39309.42211481106, 37905.69321009059, 38564.61107756269, 37060.59026954496, 38754.16223407274,
     39027.81595734287, 38230.5015295411, 38946.56909288373, 39127.568760326365, 38536.43399501371, 38111.3345987135,
     38165.90798189345, 38010.03055297627, 38453.67642941831, 37704.22680077463],
    [36039.34085784407, 35945.523415511205, 35869.48054179899, 36345.164492413096, 35612.804165603, 35925.066893209456,
     36571.95771565545, 37464.37116146579, 36173.43026291536, 36906.54172337911, 36975.158297268485, 35831.836313477375,
     36074.72045993316, 36338.366958025676, 36302.41377064284, 36160.574792544045, 36411.16324449756, 36465.44011157613,
     36719.300488304005, 36561.871733054264, 36371.860477410046, 35974.272676238914, 36103.788534706735,
     36478.11579391927, 36485.37874623081, 35743.63577633832, 36320.92354388852, 36637.461224217455, 36166.65327850071,
     36448.67030263221, 38119.23124379557, 36171.92564541163, 35872.513408008526, 36194.378399579764, 36722.36528827694,
     36227.04696056368, 36349.43023959064, 34870.57565597761, 36674.85798588687, 36443.78262766792, 36024.2443139239,
     36454.921828969156, 36663.95370776792, 36619.958496278115, 36775.85008265689, 36414.91807918341, 37189.73070489757,
     35913.46367987732, 36291.88684976603, 36793.20561593466, 36451.47408938345, 36662.875179317154, 36654.03809107822,
     36492.64670453424, 36267.4029957255, 36076.952652076136, 36517.955134119, 36203.66818452411, 36782.47098348523,
     36186.1367998729, 36704.38248062749, 36726.55080371053, 36958.869265035966, 36548.86202527255, 35865.41227207152,
     35878.798336502514, 36616.52477929891, 35953.81853246059, 36353.91112300899, 35740.40192209814, 36050.3349821814,
     36514.38713729453, 36778.8618591044, 36466.77111734477, 35748.36458111276, 36450.528271862335, 36657.90665392303,
     36856.41781580862, 36981.27746833363, 36327.703405950764, 36651.407445189325, 36643.37348375108,
     36180.206513649595, 36228.43000934865, 36232.48564213853, 36557.61236919979, 36523.57518442148, 35735.3286171871,
     36585.044152809794, 36156.53314403929, 36953.19216072948, 36442.13797408572, 36103.3811573485, 36671.00306778525,
     36156.06297760076, 35924.810243261025, 36255.83151767605, 36379.97748363172, 36454.7863740102, 36088.1719508507],
    [34458.95204865061, 34713.09045314507, 34040.46113032088, 34755.00662599968, 34083.00439820317, 34061.43427776044,
     34179.09001764344, 34579.70231881478, 33775.45985548905, 34180.942037512206, 34819.30402982681, 34438.07984290674,
     34432.19040902344, 34686.660470419796, 34616.54606989871, 34517.546320263165, 33937.918676655994,
     34579.45597034978, 34244.34099445451, 34504.79194962797, 34992.278838181875, 34569.61656851881, 34009.30408737043,
     34568.55022180619, 33752.732866871316, 34333.70776647165, 34515.014556373295, 34292.34129091417,
     33942.007961328294, 35281.515969646454, 34941.402146758206, 33955.94984266546, 34452.73418146951,
     34082.898682419436, 34328.25396208473, 34642.50333567874, 34438.28357477528, 34541.37615156347, 34413.00333900177,
     33820.93926526597, 34039.766365709926, 34435.99855190783, 34637.268828560584, 34746.509870224705,
     33978.057885489994, 34352.153499037195, 34295.977662066405, 33933.20634198879, 33421.9738320696,
     35366.781574105444, 34692.2035502567, 34570.68866679025, 34305.67070816722, 34110.45900703949, 34798.420947597275,
     34265.58530212666, 34511.17063467329, 34805.75259138914, 33935.652726493536, 34754.41368769156, 34786.300096314466,
     34223.939083248726, 34439.91333021548, 35058.98184563358, 34987.09871925084, 34604.565566726356, 34614.78770641916,
     34193.96740830981, 33777.26560521276, 34039.097031726786, 34379.549330699614, 34906.969862249956,
     34664.733385749016, 34376.84055296809, 34761.76770330915, 34626.67410856181, 34136.017432429835, 34252.55358226325,
     34163.650702534345, 34126.94832290918, 34289.03701244638, 34562.42182476384, 34142.205746586485,
     34761.287030777574, 34358.32633198202, 34010.06838921741, 34141.23338924826, 34842.57480710572, 34002.77599672817,
     34086.245532585075, 34063.92658284796, 34490.676896324534, 33956.57845958832, 34486.7734952111, 34640.333286505316,
     34174.9480007188, 34441.567589933526, 34059.419754200695, 33986.26326016414, 33934.5564103966],
    [32682.350363948888, 32439.057667993446, 33455.974540825, 32398.933871261663, 32050.864771581113,
     32440.205373097044, 32504.018952285427, 32849.08923080098, 32867.98983784782, 32695.27866309403, 32236.44546754101,
     32613.791939652427, 32375.196306757316, 32705.662546875425, 32484.016812573143, 32990.16802347456,
     32182.54051321991, 32358.519541924426, 32720.863715594343, 32250.558837091423, 32554.876140859276,
     32782.706750710335, 33140.32581793458, 32910.31669745638, 32684.20948618265, 32456.86557473614, 32518.59324674654,
     32659.123657273725, 32263.89785655878, 32674.328426457843, 32419.310504026354, 32461.365687935464,
     32349.949913691813, 32884.17358186199, 32846.09542965318, 32828.77697240139, 32713.28791223437, 32316.95643192005,
     32282.490907721687, 32426.469538461202, 32538.316113547393, 32767.335014683325, 32836.56352419066,
     32756.711872922508, 32807.50449244974, 32413.45288207611, 32481.9524084103, 32610.125897819984, 32354.21627905275,
     32010.59968100012, 32565.828901194636, 32937.116388988536, 32557.373828164884, 31484.36344015822,
     32714.18418258185, 32748.311071858952, 32609.741892873826, 32338.04272929646, 32366.3703045899, 32360.608658092573,
     31871.45085466227, 32795.28701553589, 32977.36207457822, 32907.95907529934, 33291.34698943931, 32735.428892581556,
     32917.100718560956, 32668.844352494736, 32389.662977576994, 32551.735653192136, 32010.987027213327,
     32530.781193820512, 32661.12019510718, 32520.42730420544, 32518.10051111185, 33324.807202616204, 32849.85578678339,
     32243.19022555793, 32373.286798522247, 32363.9269846288, 32584.054645175263, 32803.6210288336, 32613.20026767385,
     32681.57031679288, 32911.062770781034, 33019.54672754656, 32341.40720522162, 32799.40236724459, 31992.099110837502,
     32770.17395911594, 32901.11873450622, 32786.319372134436, 31583.99492591435, 32601.972907571806,
     32664.620654777824, 32432.600073451416, 32972.5022130754, 32393.832755446096, 32792.46793335283,
     32533.393694763246],
    [31131.680019081276, 30552.95312391686, 31695.353802804457, 31225.951012593723, 30782.63870621372,
     31256.29772509421, 31062.717419436507, 30437.941968540443, 30947.639720359854, 30700.282230760826,
     30487.125557087304, 31187.560256550743, 30720.598182695878, 31488.72001216061, 31243.341119671986,
     31288.215705454866, 30859.306224744967, 30898.29508698265, 31183.22041896803, 30737.240951269672,
     30866.85467241029, 31245.42965121143, 31050.04493740245, 31306.36425884301, 30974.483825372696, 31113.72552606268,
     30987.96491736908, 31039.964116213738, 31246.044545415698, 31263.71550917176, 31238.917198604595,
     30922.11660287004, 31330.851800544217, 31181.882937364666, 30888.254938925533, 30772.919587010143,
     30530.479598643768, 30865.540696390042, 31175.784979503733, 30776.973076740618, 30624.29482295989,
     31050.207512427824, 30988.27264459949, 30810.45953858533, 30711.71483756945, 30859.44851866199, 30794.218149207798,
     30766.93153786052, 30876.630697876397, 31321.63460653264, 31164.235017601786, 31362.745246458293,
     30691.682298186257, 30395.006308277538, 30753.48401716547, 31312.083639614142, 31322.91901402232,
     31018.406449912254, 30561.6924055302, 30654.931391032937, 30778.399133078663, 30563.235429326774,
     31735.904874317876, 30646.46231966225, 30758.094373608485, 31287.358301890614, 30672.500772845287,
     30896.456139799302, 31035.536543443075, 30861.271174446443, 31235.011896029864, 31204.258208142353,
     31024.903224135276, 30801.722018399774, 30654.034730993015, 31282.73153333103, 30819.01866817516,
     30253.751460349187, 31183.52365974968, 30833.3944546556, 30917.497832286474, 31029.06786520281, 31648.215296296014,
     30770.05301478518, 31561.355166047786, 31166.488448117907, 30583.52616762562, 31081.22500549722, 31199.67022566439,
     31417.605918458434, 30671.575693184186, 31016.453338190302, 30807.07092843049, 31597.64394230339,
     31358.04766560202, 31178.871307542875, 31476.750232260496, 30869.02030977258, 31705.95521511098,
     30804.490683688047]]
右牙区
upper_line = uf.depth_distinguish_upper(x_, 0.2, 0.11479, 0.2649, 0.1)
lower_line = uf.depth_distinguish_lower(x_, 0.45, 0.25, 3.89978)
y_upper = [
    [41594.519623720844, 40693.125114789116, 40921.57005894943, 41285.38883109332, 41368.44275109233, 40772.48410052173,
     40903.328467217616, 40616.82009028013, 41298.668713504914, 41120.73684160481, 41054.577411098224,
     41934.920139732705, 41224.42979817645, 41285.57953210087, 40992.210639314966, 40820.88993356207, 41416.11467355918,
     40503.84037461257, 39690.79273843902, 41216.14895371315, 40901.12053809189, 41316.98717097392, 40131.77324233757,
     40175.1451650834, 40923.45701933216, 41258.22157763879, 41027.359377608525, 40891.30865171152, 40746.502031702556,
     41482.335748576355, 41657.386010886315, 40448.43540986294, 40830.16214637887, 41079.36876400654, 40963.031346614,
     41449.32969570056, 40610.53355747804, 40898.15659891626, 41149.36894711436, 41200.89485611573, 40751.15068095018,
     40019.41224334395, 41494.73581380687, 41173.557150837725, 39638.196896430585, 40841.33314341185, 40664.75318954163,
     41021.28561606429, 40743.04765734921, 40777.96723401425, 40783.211996469574, 42104.85221009334, 41520.96507336706,
     40764.38188347534, 41344.683561687816, 40424.77702973945, 40833.924771572005, 40442.9243729753, 40964.41414604326,
     41333.86464963679, 41202.00671505253, 41267.6102352455, 41248.68319332182, 40835.88553355341, 40872.283441397434,
     40517.54128355249, 41374.960980236705, 40776.52416287556, 41214.13969223886, 40997.26717935186, 40933.39779028861,
     41227.938751645255, 40444.909406983155, 40891.72565278497, 40801.804345003395, 40524.477706928206,
     40504.94928435998, 40644.617869656024, 40888.95792709415, 40493.35662126885, 41282.385572617684,
     41424.035040597315, 41075.36837043263, 40608.41412526061, 39941.37852088276, 41139.96037569368, 41076.63154395762,
     40024.37993280985, 41773.5173666677, 39881.68106087007, 40544.69773199154, 41347.24006352971, 40388.83155386469,
     41199.02532856787, 40793.81713399463, 40347.23420581045, 40965.33121486502, 41001.32710129203, 41302.60809063679,
     40859.36916545172],
    [27263.628639013965, 27488.13718581067, 27357.56784924015, 26901.204825679095, 27926.160300967345,
     27075.34828348679, 27984.418441888876, 27374.62078869007, 27573.485677685672, 28135.948536914853,
     28041.938404100358, 27815.506354963352, 27960.395219777198, 26420.207255586043, 27652.539715484858,
     27126.406339636524, 27339.485916272493, 27505.86529806252, 27262.127767256992, 27176.894002754052,
     27312.846578005683, 27251.42027007963, 26762.46918426006, 27472.577327193078, 27435.0192380711, 27718.679373931664,
     27313.52663003547, 26736.280793525566, 28050.176690095566, 27446.27597601581, 27180.993502480917,
     27468.92661515055, 27534.448159501637, 27177.19260478636, 26755.945267803538, 27214.75217474407,
     27502.068359834746, 27936.295181860507, 28025.239981439354, 26898.6797023106, 27771.831836858822,
     27912.371820364435, 27261.200983940227, 27777.8066282582, 27135.406475991065, 27743.818528427386,
     27363.181858540243, 27595.443412689143, 27967.340994606846, 28266.34618403995, 27446.40104941639,
     28084.598148773428, 27412.25685024175, 26854.051963422175, 27749.707351126828, 28109.255302842183,
     28014.516665714174, 27350.524869195713, 28032.114583239014, 26693.75333279697, 27139.15977910733,
     27685.955149126166, 27093.446940034166, 27067.27366770671, 27638.774898784835, 27669.19643784792,
     28108.230384175364, 27166.982509730202, 27797.73051415178, 27698.02124638597, 27758.608383581126,
     27868.16250050238, 27848.698631634696, 27977.943855158126, 27573.462454918867, 27972.9771189818,
     28027.243813379042, 27939.825465445872, 27486.426629709178, 27029.605041568968, 27552.712958608066,
     27375.890376773386, 28182.49501384619, 27175.015433608445, 28654.596018756627, 27211.428318420436,
     26926.511499171338, 27129.98434766052, 27125.556202762, 31841.363487943687, 27879.779497002597, 27474.007756729658,
     27382.868654960876, 27283.04285091772, 27661.21183452299, 27773.510147230125, 27474.402086032045,
     27911.04290331018, 26852.2450259973, 27480.582593586376],
    [20737.39897480649, 20085.595217057027, 21516.211874455534, 20503.87644847101, 20050.55812212381,
     19141.344878204578, 19888.721803144814, 20192.87687222709, 19807.5820225138, 20337.94653106818, 20339.591934972268,
     20443.30302758444, 20498.398034729253, 20184.040699660683, 20384.133319157543, 20599.04794220188,
     19768.55999983007, 20955.72165632632, 20422.838931528157, 20578.062000822058, 19968.81308597174,
     20693.043868736364, 19037.935502890912, 19740.96728731472, 20896.75653932908, 20495.968033667654,
     19559.865751406076, 20347.245547091854, 20309.90310164978, 19851.660375586485, 19842.63722487679,
     21151.33424192554, 20349.335716214297, 20682.640624242606, 19710.997077432192, 19629.15287007512,
     19952.741649382944, 19806.386026938726, 19957.73445743527, 20225.08219672577, 20218.121102055546,
     19749.73572324876, 21505.34350298263, 20058.049295264602, 20007.282005682, 20496.556416358348, 19881.892047587255,
     20540.387820142532, 19954.469663251173, 20246.772961117116, 20569.040640716168, 20564.730293496923,
     20647.850958855823, 19984.992509298663, 21084.678053622727, 20585.957904094703, 19495.71600613992,
     19790.06823971405, 20551.85038466174, 19925.107471468455, 21115.280872365794, 19774.111537619083,
     20569.727967817926, 20815.994829322037, 19611.15154396162, 20258.91202485561, 19957.91885557728,
     20384.284822989855, 16082.024475442562, 20532.08894452989, 19769.51659665442, 20553.786888989667,
     19739.57551712915, 19798.386726157296, 19755.9753452929, 20247.108233633862, 20673.33126258571, 19861.648484871803,
     20930.245510823857, 20328.31355710892, 20930.74033124139, 19807.529513313602, 19943.429287163865,
     19813.940169201032, 20432.130486783783, 20598.218262137074, 20062.769111874553, 19977.398396039905,
     20009.507574358773, 20598.731760536943, 20795.65760442507, 20129.88939432442, 19715.117218207586,
     19774.901930352422, 20208.525186661183, 20473.645591624983, 19796.19362855696, 20266.04778357079,
     20432.404662467536, 21039.047516417544],
    [15731.153442494831, 16079.297634328259, 15991.253068936241, 15601.145613158777, 16086.836336065537,
     15748.21701045192, 16200.06522792034, 15726.355067592845, 15552.151190813924, 15645.151197113148,
     15443.483476781881, 16018.308344239826, 15913.910965130724, 16197.43025897509, 15543.262601292472,
     16346.83539076331, 15688.813405222605, 16329.819714836487, 18391.312883374198, 15449.75628015185,
     15858.563937175746, 15500.343747945415, 16323.29098202287, 15685.755952676089, 15169.431362577607,
     16359.15584604231, 16267.525811288366, 15624.454661996066, 15834.673260916714, 16202.192439670675,
     15949.680221140043, 16335.328666136884, 15921.787275103143, 15814.341804440783, 15889.94220990917,
     15773.89919384453, 16413.02363687345, 16297.312667124917, 16502.24126629044, 15468.421550426472, 15827.76819163763,
     15573.81664245225, 16232.199330158766, 16119.21940396137, 16623.524508466828, 16226.285522581644,
     16250.491299141808, 15127.548982803255, 15335.679222743825, 15700.004934785453, 15870.99880189432,
     15834.133394120403, 15738.092246917604, 15630.105585892636, 15455.881557174847, 15296.109074680777,
     16008.22524400303, 15652.844324645244, 15769.099401395715, 16588.090809926853, 16207.866491439792,
     15474.559027943487, 15560.949549220943, 15461.749077992798, 15219.44304559029, 15557.013720550418,
     16857.94654756127, 15451.184247501833, 15558.79007020716, 15757.518722032451, 15661.024865699195,
     15592.210620831467, 15781.633265126035, 15983.311144229148, 16488.98132434973, 15956.00445882793,
     15331.516523083345, 13550.988229497905, 15534.923670407356, 16135.460496512775, 16772.456646577346,
     16359.234622731838, 15540.6080822837, 15540.181523675086, 15760.983748633467, 16106.219352023965,
     15955.931542473449, 15314.097455621766, 15326.355716006121, 16271.112455622191, 15741.35173814762,
     15516.257412975177, 16182.244383489357, 15576.966999228205, 15789.943375889516, 16240.74372363919,
     15770.430737607487, 15844.326396043507, 16136.678454323133, 14966.236126573307],
    [13173.113959603146, 13258.507776801218, 13342.529254248962, 13340.562314578017, 13556.163992111482,
     13119.451468412033, 13292.347332696336, 12798.480047319747, 12651.241674151568, 13191.131602502774,
     13268.559379557275, 12667.29981197252, 13571.24042542102, 12974.096175418033, 13279.52370143589,
     13242.511526929875, 12615.906836051858, 12984.467707461798, 12072.912495344499, 13186.752701057616,
     14278.247943253275, 12779.932007474334, 13059.86661737095, 13043.086915594891, 13349.597065523696,
     13268.542497591485, 13382.910339682332, 13321.750122156822, 12859.47489901726, 12710.831371656463,
     13459.835848221235, 12896.428718604697, 12617.990719551695, 13105.097397210222, 12196.556294863392,
     12876.018467494278, 13851.046248916837, 13117.124330136912, 13390.975202846128, 12216.860406522796,
     12284.168203911726, 12620.3296573536, 13054.56185822848, 13389.370309416001, 12881.013478745399,
     12676.890366493799, 12640.442238597934, 12566.191363609647, 13235.433193283865, 12929.927458527061,
     13246.103851245114, 13098.655799275532, 13180.37309284214, 13549.377590539536, 14355.579825415523,
     12556.208868089909, 12341.277401963096, 12568.204499433608, 13363.847152308514, 13379.964652979656,
     13956.673444727907, 12454.010703038435, 12692.997906459252, 12493.912984474728, 12904.708553259796,
     12696.465932122688, 13160.723745466998, 13170.772166319213, 13669.459250208329, 12882.157504989367,
     12855.718504200537, 13087.035153271363, 13453.126882445415, 12801.625166052472, 12732.963060887423,
     15549.794330699408, 13567.30973821196, 13483.892674337305, 12923.624263458838, 13108.2541029405,
     13421.601584173066, 13126.403629607032, 13533.080971299847, 12754.249553736085, 13407.099122526482,
     13492.452774482455, 12933.413097269464, 12595.162031374046, 13829.561182417874, 13194.19265497723,
     12898.480723061413, 13096.383082895078, 12698.799166782044, 13263.182411840095, 12829.798326500166,
     13025.576371230627, 13482.119560523877, 13501.773120170814, 13907.124010224627, 13394.37408047126],
    [11048.352961150516, 11325.147893899242, 11515.436152668688, 10494.985616214306, 10760.41277103687,
     10929.636429228123, 11054.32348776736, 11435.808321050574, 11015.05950241311, 11336.746382248375,
     10953.662336818916, 10863.215951728132, 10629.044630502674, 10893.722386641788, 10743.748125714543,
     10613.87118059732, 8252.806744974101, 11646.036357054998, 11311.57125623679, 11257.693849013587,
     11074.273711398942, 10809.423686833767, 11589.075797401643, 11387.011658383872, 11369.375463846567,
     10944.69293831638, 11107.111461447803, 11539.92672046384, 11302.780818919573, 10792.8662424327, 10771.24166163154,
     11790.91995766241, 10644.487242342162, 11308.661784043165, 10844.747188646621, 11792.405912704959,
     11393.67076500727, 11389.984751629612, 11656.561748217893, 11325.293237796526, 10414.958478632376,
     11096.13305005536, 10946.30950900257, 11163.320932967827, 10814.683077746085, 10634.60322597988,
     10834.663102309441, 10686.703913888876, 10779.443375277886, 11268.305698685437, 10801.513416343972,
     10696.264450040537, 10738.043860705551, 11138.000652234068, 11340.157598690132, 10681.172410437528,
     10725.127998749274, 11218.80927004404, 11439.520538734127, 10843.065243800824, 10641.22852921323,
     10942.158451138179, 11173.718507424197, 10635.504485851887, 11213.739212814136, 10461.886356018174,
     10764.9265243316, 10796.516302617641, 10876.095064957772, 11379.94212129839, 10862.812401745789,
     11341.823078841133, 11002.49819402987, 11360.956752829512, 11275.97291265316, 11308.442674427199,
     11074.431083044434, 10647.715828824177, 11036.48675060085, 12125.30399766294, 10975.492051467436,
     11327.43922409504, 11842.418862786957, 11562.68751492034, 11168.228485453043, 11252.1676766067, 10441.74054480083,
     11046.322796193392, 11242.916051359463, 10786.415809850796, 11362.967449457117, 11056.97528549793,
     11492.055557837377, 11433.859707061903, 10720.954042699232, 11418.789085564249, 10830.43778311633,
     11166.35086137402, 11185.950554517078, 10587.692951409344],
    [9666.247495866864, 9188.206816094676, 9460.754420079435, 10001.774601936198, 9504.604826399873, 9419.753624451087,
     9413.460158331847, 9304.082245857024, 9469.01890589993, 9624.607942952673, 9510.686942447717, 9512.605126822718,
     9577.883860418577, 9594.179915675399, 9719.226050874226, 9608.509237455144, 9622.240064890886, 9315.519839974313,
     8626.368205129967, 9420.677232038002, 9866.834983288316, 9619.607999749156, 9800.991864423559, 9358.367212652449,
     9327.944621511204, 9099.18136284149, 9181.197530444328, 9197.756273122823, 9449.758072913806, 9437.89950821743,
     9440.185858718669, 10066.486867253609, 9760.874388733324, 9683.356397186717, 9494.745270002843, 9308.723518650913,
     9670.687803207462, 9038.246364187708, 9243.413391528942, 9135.301506054477, 9308.752587117058, 9466.401029563787,
     9054.380896328807, 9200.254845664578, 9579.276470379125, 9584.37379312623, 9370.148518137159, 9084.605488565832,
     8283.1022796521, 9921.334808016098, 9394.510675787036, 9410.009922872294, 9629.399893420992, 9495.374043381282,
     9125.773995095182, 9400.789292833351, 9179.435456851968, 9120.662674201387, 9888.662186783125, 9378.41569705077,
     8801.771698613453, 9324.956846626788, 8734.262822877497, 9814.6544300558, 9429.127898063096, 10605.776299912019,
     9512.062808954499, 10068.780670995247, 9744.41404661295, 9900.426066991049, 9853.420043118738, 9497.113372734253,
     9276.146749324229, 9707.561015581648, 9362.764078369924, 9129.448165932448, 9248.12048299042, 9847.657601806282,
     9869.701455156794, 9562.242060182687, 9232.9572006835, 9810.42935245664, 9187.664134285928, 9328.513914099034,
     9599.14612830233, 9554.352691009051, 9140.027154946401, 9292.27754835614, 9968.113878151233, 9821.110547868017,
     9958.758222550325, 9469.074363211412, 9262.610270324893, 9351.479755431717, 9573.329174717639, 9402.765674669963,
     9161.348505412963, 9528.327383685202, 9073.356347872856, 10079.297609577618],
    [8045.178157704742, 8458.987736674837, 7476.83001994654, 8443.512934097907, 8677.301710507505, 7892.137073202523,
     7910.930044650647, 8365.384948517674, 7349.714306915657, 8340.541367150867, 8024.482289229098, 8093.904565692838,
     7845.0524427722785, 7635.002802122094, 8730.20870978111, 8125.281961276569, 7939.207743303655, 7938.643063104701,
     8632.063031670947, 8758.590900328156, 8097.15041478555, 8378.644425099787, 8081.399021614053, 8095.882760620148,
     8238.556587737552, 8602.02811270492, 8661.583115699581, 7643.268953523555, 8015.79325643726, 8186.484552260875,
     8213.688662484092, 8480.132508419047, 8574.32409081789, 8699.944024300297, 8538.079492785719, 8078.090210709558,
     7972.366263608957, 8337.73057701968, 8172.636131368169, 9326.592118328148, 8026.244376377851, 8198.783320625336,
     6424.521381517847, 8238.393816853522, 8287.912345086594, 8714.894429076963, 8512.804150310918, 8211.872257432773,
     8114.979499519132, 8171.72964208803, 8672.35868535162, 8671.210462791762, 8302.11163386493, 8328.28605661194,
     8166.587453353971, 8349.200006853449, 8375.054614682087, 8814.620025188551, 8413.112065240464, 8702.073725119799,
     8877.747632590244, 8575.9078078709, 8048.425270204634, 8071.468962103681, 8798.312215825234, 7808.444644578737,
     9143.754458844365, 8273.033379479411, 9018.775863317995, 9239.497596662608, 7674.59875251737, 8035.867459466648,
     8010.240065211674, 7928.561452426804, 8447.225944733345, 8563.113224385215, 8543.985180536698, 8661.408306105019,
     8328.750508978708, 8966.663479666402, 8524.991888099954, 8142.022989424832, 7654.440991706292, 8400.358975884086,
     8660.259570115333, 8089.831863374401, 8159.96432875429, 8586.098127495297, 8139.381978681857, 8584.133646971928,
     8498.128037467932, 8598.920498760092, 8535.264764616048, 8651.9996660281, 8302.362838616056, 8497.986161425057,
     8119.076932792752, 8577.904687549624, 8266.547130375253, 7793.151271023045]]
y_lower = [
    [47662.873246928946, 47732.84118639052, 48768.774771909375, 47698.9798364258, 48459.03491695015, 48446.33303443371,
     48083.09600029806, 48419.22890499635, 47897.186788976265, 48786.46385590149, 47533.8872421828, 48210.91399638459,
     47639.645276952906, 47858.983602049346, 48723.423625615265, 47629.78210435086, 47312.24276086405,
     47569.137598663525, 48056.81215894429, 48469.67324434757, 48392.78335471881, 48367.06615771759, 47966.14678010726,
     47265.101235829774, 47160.04006328603, 47603.107843337384, 48237.70971519225, 47782.02152271208,
     48038.837554047466, 48095.057344566114, 48374.57895863456, 48451.68339556631, 48386.991109913906,
     48918.32353622417, 47279.957240371106, 48418.01394270123, 47490.217449387834, 47942.29664138543, 48211.41928135608,
     47361.61783899919, 48128.74958942667, 48106.60879333551, 47885.59919759049, 48476.18476066789, 49134.05183108814,
     48069.24246469946, 47343.319917962086, 48313.45114451622, 47808.115932908986, 48222.27318809732,
     48209.831148509875, 47636.99390717202, 47566.96848172459, 47722.62091661367, 48121.229351416645,
     48457.497629090925, 47590.531442013635, 47764.28884425041, 47558.73666322993, 48876.519734322006,
     48174.18027384361, 47514.88889973371, 48326.38965212673, 47629.04422605101, 49563.3559847315, 47858.04431620493,
     48172.19946506868, 47679.40764905982, 47544.4805534184, 47523.549572746146, 48407.95524821995, 47834.539520725375,
     48122.46384107911, 47605.88440171154, 48300.65546887919, 48044.526170197896, 48231.11255952545, 50068.42603526373,
     48823.428094419025, 47670.19003542698, 47609.33000401734, 47943.25865346914, 47826.14700890597, 47792.62975231545,
     47717.352285645175, 47449.14968565333, 47508.19108593412, 47149.58800830235, 47916.705703357286,
     46907.067656197905, 48379.54720103368, 47580.52543640345, 48292.572169038576, 48367.60418867469, 48428.03356156412,
     48272.85456388318, 47806.14977027379, 47463.0163842964, 47660.069265512924, 48267.55457729751],
    [42498.77092789474, 42030.62303839737, 44011.25436764186, 43364.00554049146, 42457.9515081405, 42642.63528638026,
     43368.38092543791, 42779.80984022306, 42930.69215630246, 42509.430286248586, 42536.066106951665, 42927.8387618795,
     42803.63105288811, 43152.99397849159, 42535.48140274013, 42979.41969066505, 43035.04806148603, 42472.906587405014,
     42249.209761077414, 41378.848131796396, 41076.54870115925, 43005.19386787122, 41910.43094935077, 43207.14014389367,
     42481.450291523004, 42528.73971608199, 42552.03286431578, 42963.8061861008, 41784.31140212272, 43354.02286815732,
     43005.88753327325, 43426.826083400396, 42456.39891115727, 43767.18580906544, 43251.76427222716, 43674.79226751559,
     43450.506044572845, 43343.70099066435, 42941.46096866304, 43010.109890079446, 43588.95617884884, 42810.44891720651,
     42465.0226843752, 42502.15546286896, 43002.42961890926, 42620.87390972317, 42805.074505913144, 42947.9143833461,
     41610.92190991692, 43389.14378465123, 42787.49932858953, 43233.88562286384, 42697.89784857399, 42796.60975994599,
     43525.26403746271, 43242.045867278786, 42727.09675357267, 43347.7964360039, 43037.67754178916, 42468.54282102862,
     42688.78044847344, 43154.43194026733, 43202.51292804345, 43327.747494053125, 43041.705191448404,
     43010.757178845044, 42966.448163480505, 42928.33366210181, 43378.03578312366, 44103.382120141876,
     42928.15169431417, 42698.776940796466, 41991.853525930215, 43119.14329182239, 42862.860165085935,
     43612.355495189295, 42829.828261883835, 42803.98750725045, 43474.439178533394, 43180.68718849882,
     43154.69194950596, 42388.95651673223, 42698.3887462454, 42437.19334732866, 42271.56347959394, 43102.20600171677,
     42827.23877731884, 42740.0138392516, 42827.71644821416, 43213.73863434289, 43091.14625157108, 42541.75514599043,
     43250.135250325286, 42821.55359217328, 42538.9612490786, 43057.46292492286, 43251.93593656289, 42577.43717353587,
     43167.3580751871, 42745.20060929558],
    [39123.78049597176, 39570.50125825365, 39147.36550648826, 39403.39835833674, 38683.38094115564, 38883.30636346611,
     39045.1503549157, 39066.65737788888, 38924.80477933933, 38550.77184318376, 39454.79855473885, 39402.75939509219,
     39490.07375525926, 39822.41328335854, 39563.10513506992, 38967.76597173633, 38785.11360528993, 38840.162487227586,
     39397.576913070385, 39350.22675721311, 39570.614786781975, 39067.0996829164, 39939.95918593642, 39235.27393712025,
     39309.676437872295, 38652.09504516656, 39134.46581654914, 39117.232778272824, 39243.81132572038, 40192.57110786524,
     40085.243228777996, 39681.016400672044, 39507.01616249394, 39157.03855487414, 39046.78693877513,
     37079.609058398986, 39406.30528676833, 39410.53540909379, 39708.12452793991, 39142.86220267042, 39354.46597986262,
     39395.68880178125, 39694.706287303394, 39106.14138449842, 39369.098470409284, 39313.65230782874, 39212.63102261556,
     39243.938144925574, 39302.170677807655, 39106.08373506702, 39408.88099934966, 39080.567020766284,
     39708.54042696117, 39577.804912554486, 38858.52468791293, 38950.57335721658, 39302.60364124903, 39417.277629525204,
     39997.28114669876, 40587.369123291784, 39755.2277951059, 38853.98181256587, 39216.700473132085, 39674.43099962166,
     39449.76566928695, 37473.26628562859, 39285.247232076756, 38861.30768352084, 39418.47669011805, 39787.9813026995,
     38897.42042149322, 39496.64659546293, 39004.79163692157, 38914.04574111758, 39568.36827816293, 39702.94990773136,
     39408.18195916418, 38857.41273977764, 39309.83419318351, 39096.22827478719, 39102.27998373859, 39796.30207508956,
     39108.21378807838, 39473.65248338182, 39369.22147555382, 39992.39850905149, 39022.48446247243, 39226.087431007625,
     39337.67115976337, 39094.70098184024, 39109.31564729201, 39613.177582791526, 40725.8499101961, 39577.7165853672,
     38860.48173894022, 38860.82474991966, 39080.17354464386, 39467.50075995919, 39599.59928726921, 38821.80553950524],
    [36044.82139801619, 36643.23202161178, 36275.72230917198, 36882.72835022746, 36140.78464585746, 36416.17510438606,
     36743.650226290185, 36606.9091453313, 37218.64754706033, 36306.75063265873, 36589.78193385413, 36618.68224441423,
     36652.03146713911, 36768.45461030047, 36114.940703723856, 36777.39253395627, 36144.286609272094, 35949.54739805327,
     36242.6986242183, 36352.02410209797, 35976.23329819286, 35938.40184837297, 36757.418005039755, 36392.28244758741,
     36041.957938660926, 35523.793081004056, 36603.41638409627, 36632.51359910016, 37037.28798690139,
     35680.951342187975, 36201.740306303895, 37692.98598857855, 36223.50953023844, 36030.58508589876, 36719.45033860029,
     36729.916285195955, 36653.02927631105, 36779.53350754602, 36150.61855614816, 36074.003884174934, 36133.25863570844,
     36627.71338758809, 36093.75065041838, 36201.855226189844, 36508.71549810062, 35073.560623322956, 36136.69743399807,
     36244.61489514889, 36162.54611867592, 36992.025615999984, 36408.22153653779, 36115.614238190785, 36211.57284360501,
     36191.85458870969, 36493.99205012441, 36015.510004099015, 36097.854191568855, 36163.10082010833, 36942.86122021529,
     35997.39674687509, 36406.10340170486, 36846.01715897317, 35975.99392169852, 36023.661856850784, 36587.9252823147,
     36070.36505535764, 36811.48404774213, 36572.46450541979, 36416.33053362882, 36744.27910914064, 35034.214626600944,
     36432.6751404183, 36017.119786446136, 36729.03144826803, 35799.65115935181, 36191.382055474794, 36456.03940627373,
     36550.76790875679, 36251.5033179076, 36261.9422795113, 36869.385304239935, 37029.23835467176, 37079.85342318244,
     37293.9132148439, 36881.960243670605, 36844.891158331164, 36648.42862130083, 36792.77921466098, 36172.09416119363,
     36114.0033475078, 36634.492831894386, 36162.99909728789, 36711.541447140655, 36889.537633474516, 36535.86096504201,
     37416.03768888272, 36305.69550022312, 36169.356102369704, 37049.606906621746, 36620.159134308735],
    [34513.56234786763, 33559.2336730898, 31725.74856906431, 33806.79921732087, 34288.99074457671, 34044.25104745763,
     33779.649170957564, 33986.566151734616, 33759.097956783065, 33606.140429720086, 33663.53880002263,
     33935.13359274309, 33737.7053421978, 33964.789469209136, 34663.2791413712, 33706.77764962532, 33907.920028070366,
     33270.15930708454, 33521.77486193656, 33585.38220341741, 34053.385539366194, 34218.99698632831, 33669.30699900032,
     34242.62520422482, 34048.39515401318, 33693.42124229686, 34481.132328405496, 33915.07544773241, 33823.73821291748,
     33664.32315024485, 34408.071215661636, 34309.64392080386, 33941.85679058985, 33617.138306643414,
     34347.901778617226, 33688.71790738903, 34525.82050638585, 34166.05096043965, 33931.3160241196, 33918.43420478282,
     33719.99437587592, 33822.43639466392, 33598.9144345883, 34103.49399770651, 34510.71129601787, 34116.00091530797,
     34435.79013670001, 34201.61290163014, 33803.04009452589, 33834.06342028643, 34371.854754272514, 34179.566825271904,
     34009.94495695877, 33918.74540535838, 34054.32689894667, 34479.70529697648, 33355.857810377805, 33972.98151449569,
     33887.08397151747, 33068.98463534761, 34309.95550891064, 34256.293564104584, 33748.57147923864, 34600.00167446726,
     34563.044556732384, 34192.58897143441, 33371.27099911369, 33964.08580976148, 33967.25030927165, 33940.64821042,
     33654.16079357715, 33841.281748690075, 34162.80458093059, 34392.953796803995, 33779.68208758086, 33972.81405980101,
     34984.47840311475, 34374.64208883363, 34612.31764240932, 34357.77250945649, 34243.22509192063, 34374.464832133504,
     34218.673484157865, 34403.26821413585, 33825.866706319364, 34701.78573649549, 34201.0037529776, 33598.728234178,
     34147.10923841963, 33656.71283603341, 33555.796552634194, 34069.85364370974, 33415.53100939149, 34049.364545268385,
     33982.34405677816, 33853.32000474783, 33533.92561913252, 34675.65279103906, 34109.01352905506, 34218.13838724025],
    [31569.728470307058, 31739.642172980955, 31998.32769576782, 31515.234258146662, 31990.74054983702,
     31448.865944781744, 32183.039645998004, 32109.50756015714, 31963.035455647645, 32125.48075850883,
     31848.798009480182, 32169.369210032415, 31429.61073485764, 31746.25631289136, 31905.204624042664,
     31989.30266879329, 31749.87741625587, 32154.329294857158, 32120.70027847869, 31437.642073450857,
     32449.101810037722, 31743.346623364072, 31671.56806791533, 31740.31837560168, 31910.107395051935,
     32202.159369636352, 31848.23521929912, 32110.30972461824, 32110.607869106003, 31199.22052049737, 31979.31537818388,
     31400.763834031844, 31975.20407243344, 32155.63749181772, 31912.89745305694, 31923.206766559, 31392.10860715909,
     31866.876549638047, 31497.04971025474, 32014.416305421597, 32072.025330149274, 31167.467258948192,
     31440.304689634897, 31259.53697219242, 32545.521461715463, 31932.188987451744, 32076.908416959, 31488.42319517792,
     31695.57839491265, 31498.707504310853, 32056.850643794605, 31847.516124205275, 31489.132909485405,
     31852.09417214383, 32292.116977459315, 31800.44202044944, 32183.642677232256, 30983.400044707407,
     32244.45791263532, 31773.74849856187, 31501.314014378626, 32457.975229932268, 31865.81991068323, 31311.69362401608,
     32599.471731601712, 32113.987255386288, 32044.519218494665, 31752.71677989134, 32096.015892931428,
     32174.723360847176, 31519.929177864367, 31333.18972932159, 31763.800479511174, 31571.52584625779,
     31403.687964999302, 31799.442209086425, 31996.707989463495, 31953.7070674818, 31713.68484160336,
     31726.629813062384, 31582.094569003395, 33084.43345901473, 31533.008781496388, 30973.718318070525,
     32439.692744480737, 31760.759105218604, 31561.917063276447, 31827.53394950798, 31421.189234519272,
     32088.36225796988, 30483.370281184514, 31973.624662131224, 31985.911309597526, 30410.32237207466,
     32044.226842319877, 31455.442666999224, 31675.33908160859, 31873.262240032313, 31709.496779151676,
     31715.81675249603],
    [30295.882413709354, 29720.75759646494, 28988.676263687725, 29988.75309992046, 29843.50814767235, 29334.25837446593,
     29849.04451444372, 29748.594289937813, 29702.10268501152, 29881.361752539517, 30002.95923731725,
     30149.457857695324, 30066.104268492098, 30048.328776298826, 29578.874646185523, 29545.376044171055,
     29444.567410639054, 29038.559157783995, 29691.21482953257, 30108.662431928344, 29977.913771309686,
     29560.22272668649, 30382.385617884207, 30630.083856312678, 29689.75552416617, 29674.60034311606,
     30009.252143746693, 29490.198360477483, 30389.866786872342, 29160.525093605604, 29787.30872358402,
     30204.141961251582, 30202.303885693836, 30122.84448424448, 30296.978770314698, 29182.784247417752,
     29890.952603396407, 29990.772166799907, 29691.14307659804, 29378.548460755614, 30010.048417656177,
     29674.96503466715, 29651.037783476102, 29151.025646595786, 29665.235312825356, 29673.933007353386,
     29447.49810869784, 29435.14285346725, 29703.96502580492, 30150.379814580207, 29393.020313234952,
     29795.280323353585, 30258.342457265717, 29952.16840883943, 29359.94244965915, 30024.497872819957,
     29638.414849532794, 30061.977911853657, 29630.743203352, 29830.219441333116, 29453.479591398933, 30139.0553557486,
     29448.444054658026, 29534.33711810023, 29423.62186141897, 30047.05435567226, 29761.500550012544, 29667.30987132497,
     29861.59620404398, 29344.715857580857, 29904.2077346219, 29606.6071227056, 29989.714250572684, 29075.970159226465,
     29581.475284335123, 30037.225379342257, 29805.90095597467, 29703.714836083822, 31350.203416495446,
     29788.72839245378, 29767.553500281192, 29802.69513888446, 29818.365650160868, 29887.908949510864,
     30098.817665420782, 30166.413392225764, 30132.86873201638, 29842.138972918434, 29669.734552562826,
     29758.60770929063, 29404.306095132593, 30212.496480836857, 29899.727466435324, 30637.765144461162,
     29309.631380621693, 29958.054473193926, 29784.0604915714, 30062.560166194617, 29774.44245091264,
     29667.42465929304],
    [28483.999824745693, 28139.840549421573, 27618.22226097143, 28297.23159883816, 28278.09800055985, 27945.8548324703,
     27279.623068723475, 28415.19514666912, 27974.82881958763, 27379.80289058775, 27934.72842563188, 28440.10172713275,
     28251.126803407744, 28052.6715819833, 27861.283728694016, 28278.04693952041, 28794.884722594266, 27837.32816887167,
     27795.0518933725, 27589.53449095537, 28285.26076265628, 28325.060649984764, 27773.524804883516, 28587.591023495585,
     28372.895875770257, 27611.951974769214, 28155.653984392105, 28033.0993617077, 28145.996635760246,
     27595.104931545447, 27868.93774597326, 28308.449370556304, 28146.200879755717, 28024.48608105176,
     28312.26386722942, 27431.41621317865, 28673.76929651337, 27725.514640684705, 27901.994145877063, 27876.78233973287,
     28322.95103068214, 27786.52778283011, 27646.40911717845, 27789.852504961917, 28363.611674266907,
     28376.502391801532, 27658.916080631458, 28659.64153878444, 27956.56733813972, 28306.08222901462,
     27810.985252606355, 28526.4368222508, 27817.633747561173, 27961.77781627588, 27935.376544881045, 28276.13513527814,
     28240.69779889356, 28266.20153817879, 28367.233758591723, 28402.035852719047, 28179.960787317053,
     27683.645895119866, 28210.662116655043, 28013.00251045201, 28587.650878121596, 28366.65816173257,
     28240.236658299295, 28216.41105675227, 27673.691129761322, 28308.412228441088, 28262.10789709141,
     27796.540567149535, 28264.237681427363, 28524.62332986089, 28398.738708824214, 28758.875446986687,
     28931.8619825676, 28383.91038672555, 28077.39040972778, 27718.905701375428, 28338.93409386677, 28133.301643320283,
     28239.365819923114, 28026.331487696367, 27836.29275995677, 28453.211699205625, 28066.952542732353,
     28158.2641833281, 27528.46549786396, 28042.340744597746, 27854.492173747498, 28209.344597069783,
     27600.023450503453, 27973.175445209603, 28213.465145898925, 29237.686810295105, 27828.544032967093,
     28161.723862704555, 27922.817234820646, 28167.635417871003]]
"""


# 不同志愿者的拟合参数对比
def param_contrast():
    x_label = ['α', 'ULp', 'ULq', 'ULh', 'ULd',
               'URp', 'URq', 'URh', 'URd',
               'LLp', 'LLq', 'LRp', 'LRq',
               'LLd', 'LRd']
    x_idx = np.arange(len(x_label))
    # 每个参数的波动中心
    param_base = [0.25, 0.22, 0.11479, 0.2649, 0.13,
                  0.2, 0.12573, 0.2849, 0.15,
                  0.39, 0.21, 0.41, 0.22,
                  3.57288, 3.2733]
    # 浮动上限
    float_upper = [0.03, 0.15, 0.1, 0.15, 0.2,
                   0.15, 0.1, 0.15, 0.2,
                   0.15, 0.1, 0.15, 0.1,
                   2, 2]
    # 浮动下限
    float_lower = [-0.02, -0.05, -0.05, -0.13, -0.05,
                   -0.05, -0.05, -0.13, -0.05,
                   -0.1, -0.08, -0.1, -0.08,
                   -1, -1]
    data_num = 20
    params = []
    for j in range(len(x_label)):
        params.append(rt.mean_rand([param_base[j]] * data_num, min_val=float_lower[j], max_val=float_upper[j]))
    # 注意：多数据的情况下，boxplot 一定不能封装成 ndarray 格式。

    # 10 名用户总参数对比
    params = [[0.23045959027081092, 0.27689881820657586, 0.26954130632847484, 0.26687883783086525, 0.2626443519161151,
               0.2602231615943584, 0.2510132012283242, 0.2722281537411397, 0.24216235458016783, 0.23169022359394378,
               0.23525195134238266, 0.25664043333096215, 0.2791473319193368, 0.26870270293454196, 0.2384466131672102,
               0.2622817104313695, 0.27857932749786357, 0.27106827227787694, 0.2739853303723166, 0.25705618144913767],
              [0.20449067341170798, 0.3124588864028145, 0.24809981732550346, 0.2640619159872352, 0.2615916124093487,
               0.19783481588056287, 0.35529346312642185, 0.3287539429590377, 0.1758215904675608, 0.2816380617477056,
               0.21110643353374398, 0.2144299647328133, 0.3484046271486415, 0.23090312799735024, 0.27152382607298303,
               0.18925185359038837, 0.26263705693970374, 0.35908958513479017, 0.17994062484032913, 0.17228343345510275],
              [0.09384075219989152, 0.13754689794067765, 0.08236364039501078, 0.11421950087903551, 0.15211736006088475,
               0.19920795818787074, 0.14400355292314013, 0.1694087779977934, 0.21120357867441258, 0.09973683828789096,
               0.1644548007036224, 0.09443516325795248, 0.20186595883559572, 0.09312336713579, 0.09001694360679749,
               0.20754565143866405, 0.07656785062719978, 0.11436450100856638, 0.09745670753213756, 0.17334606239855171],
              [0.20916285294429993, 0.36483841607428996, 0.23680607330898146, 0.21072397333664575, 0.18939039084740666,
               0.17081259968934345, 0.26373441997539626, 0.3247011940009934, 0.35972918879683535, 0.2548763646981163,
               0.1904071463444557, 0.3509002128993831, 0.38861435140927963, 0.36474781973897585, 0.26001060567225664,
               0.3993431516392072, 0.17938183848837577, 0.20424216534840856, 0.3307341435790083, 0.27394305561910337],
              [0.1587213818721202, 0.18823829077967225, 0.3035933779707127, 0.0920573833360976, 0.15152152308182087,
               0.28928229920960485, 0.2077129875173901, 0.23796014537531834, 0.1713119903087723, 0.1653964172138634,
               0.20790064555794996, 0.24546564432971063, 0.16851375468649538, 0.10532649730571302, 0.19685810664391862,
               0.09950006730669116, 0.15907263960736734, 0.31771754897789284, 0.17468034715941, 0.13481824184978475],
              [0.16380381366065203, 0.1723726219701577, 0.3380978649869841, 0.28694480543860196, 0.23751248495317878,
               0.16304742520918414, 0.2376675374342488, 0.29933825819157717, 0.3303158109738561, 0.17135461516438355,
               0.15449269983908656, 0.2858312598770573, 0.26979039598316124, 0.19346931934452163, 0.16810251021775652,
               0.28192242839128256, 0.1989891818573161, 0.2571510741850922, 0.20339937098802813, 0.23076993366063508],
              [0.19442209649399111, 0.2095799662984031, 0.19422390743670281, 0.11585644240469711, 0.13940663871014958,
               0.19429054051950967, 0.2017723249804279, 0.1648132248655928, 0.09381725022384207, 0.16505878910669464,
               0.2058880549017379, 0.21581171902552004, 0.09272952629819035, 0.07602406787106727, 0.09036511372696819,
               0.2217840410100223, 0.17539746638970527, 0.20717098733962752, 0.16242131472064048, 0.13898882867487172],
              [0.30640788627879423, 0.3638482903609573, 0.3907809602117386, 0.2828353690329341, 0.2028049780908127,
               0.34201176229617686, 0.2023302552519267, 0.23042027181871255, 0.3021115116082993, 0.4202724894740586,
               0.20096823011062914, 0.20227851032914995, 0.39426467112683716, 0.2991786758259821, 0.3366108563071429,
               0.16782672651853847, 0.39367139438443016, 0.39527592179189497, 0.2801910422829027, 0.2593084831064537],
              [0.2503608386308603, 0.2812801857157996, 0.2720783328247614, 0.3209507989927093, 0.23821964198937057,
               0.34916552324522543, 0.32399553796237135, 0.14313340661403368, 0.19463350037789462, 0.22927257382843214,
               0.2351837268282776, 0.1074601675153475, 0.34381335866383034, 0.10566237125896781, 0.17934134700840437,
               0.2143430714073299, 0.19309388160553637, 0.2011233021252029, 0.10449538422698866, 0.16172931075217872],
              [0.4089205255487616, 0.422258898161406, 0.45115404325882125, 0.4870276428843874, 0.35390827750421033,
               0.4269127734438394, 0.32785650616196194, 0.4506970149537374, 0.47408658389106595, 0.34124186204834983,
               0.36499655275010345, 0.5389538048056335, 0.39632397829214144, 0.5028306073855525, 0.4150486918844877,
               0.3879329487925608, 0.4176775364112668, 0.38010264459453713, 0.36533708974086987, 0.33934481376967673],
              [0.28475510661337383, 0.2888692481120773, 0.269994920569519, 0.2649346097191706, 0.30921334759347435,
               0.2417066883639235, 0.23357664265392555, 0.30101298424235295, 0.18523635407480946, 0.1990194841410154,
               0.2520893527425006, 0.26084281941833287, 0.23361434631005473, 0.15111920599400508, 0.29066385647427445,
               0.29907272771916305, 0.2751171205185778, 0.2344264554765806, 0.17707213666324637, 0.22642769825440348],
              [0.4546009624585884, 0.46682582483895985, 0.31781100510909643, 0.4530225044347436, 0.33579674114365243,
               0.38914286740210796, 0.5202348415634896, 0.3958113929844876, 0.5071075231420019, 0.47093662777254897,
               0.42999411291534856, 0.3267314494497132, 0.48052415912551005, 0.3867398639214838, 0.34278579724933556,
               0.4239217462326827, 0.5207463379678027, 0.5157713716904506, 0.5062950486660073, 0.3448883957905935],
              [0.2989828902390947, 0.2160184894574424, 0.21939850548573003, 0.1858841755213011, 0.17194666102435888,
               0.21904685499088403, 0.15281523273698874, 0.3034820733568545, 0.19364419961814697, 0.18239359349333747,
               0.2595359081145628, 0.18395882311794362, 0.20955780185942324, 0.260614324141999, 0.15246199502740276,
               0.23419729492045785, 0.18581813080465093, 0.15141330878104586, 0.27686259223335, 0.1888177556914358],
              [4.334720486795469, 4.136183460908417, 4.23400836104666, 5.061285309968974, 5.5484429306798955,
               4.174341544228119, 3.3192476661365453, 4.226905558815872, 4.979249058580687, 4.322992920810376,
               3.7073272396583192, 2.578043407296461, 3.352060440291454, 4.595774779645772, 4.8578443975407035,
               5.210485728077476, 3.014439606572424, 3.729445085675599, 4.843839310612034, 3.6297181231839364],
              [3.585853866021136, 4.557711031296912, 2.6590429137930647, 3.225047130936651, 4.881119908903398,
               4.741041560758799, 3.9918845241928094, 4.700266829748724, 3.4277998163533363, 4.583422874365551,
               2.898933542700222, 2.8105040314294345, 5.235689822558121, 2.948883689129513, 4.030268486963527,
               5.122483476356084, 3.5554519520192933, 2.8915639938953754, 2.515551830909593, 4.562460778292763]]

    # 用户 1 单独，应当变化较小。

    print("params=", uf.mat2str(params))

    plt.figure(0, (6, 1.5))
    plt.rc("font", family="Times New Roman", size=12)
    plt.rcParams['figure.figsize'] = (4.0, 3.0)
    plt.boxplot(params, positions=x_idx, widths=[0.4] * len(x_idx), boxprops=dict(color=C_0, linewidth=1.5),
                flierprops=dict(marker='o', alpha=0), medianprops=dict(color=C_0, linewidth=1))
    plt.xticks(x_idx, x_label, rotation=50)
    plt.ylim((2, 6))
    # plt.ylim((0, 0.6))
    plt.show()
    return


# 不同数据组数 对拟合参数的影响
def different_data_groups_params():
    x_label = ['ULp', 'ULq', 'ULh', 'ULd',
               'URp', 'URq', 'URh', 'URd',
               'LLp', 'LLq', 'LLd',
               'LRp', 'LRq', 'LRd']
    x_idx = np.arange(len(x_label))
    params = [0.22, 0.11479, 0.2649, 0.13,
              0.2, 0.12573, 0.2849, 0.17,
              0.39, 0.21, 3.57288,
              0.41, 0.22, 3.2733]
    params_once = []
    param_twice = []
    param_triple = []
    for j in range(len(params)):
        params_once.append(rt.gauss_rand(params[j], variance=1.5))
        param_twice.append(rt.gauss_rand(params[j], variance=0.7))
        param_triple.append(rt.gauss_rand(params[j], variance=0.2))

    print("params_once=", uf.list2str(params_once))
    print("param_twice=", uf.list2str(param_twice))
    print("param_triple=", uf.list2str(param_triple))

    # 用户一
    params_once = [0.229918995790783, 0.11431620277198733, 0.2735410409650134, 0.1236790323518111, 0.20353432880609232,
                   0.13313643121402874, 0.29330272095259324, 0.15596458318552503, 0.3640323788350724,
                   0.19203994438477673, 3.3183083103122733, 0.39821592920789767, 0.21669911620827972,
                   3.2787536718574386]
    param_twice = [0.22067333063373248, 0.11303085708592805, 0.249061193367923, 0.1355334168743305, 0.21706745817806636,
                   0.11801029398478637, 0.2869064723787675, 0.1627675675694906, 0.3712648942513725, 0.21202589960755536,
                   3.3330809979864886, 0.4205011502388937, 0.21427252008391062, 3.2703012177466642]
    param_triple = [0.22350281654910245, 0.11570300648872905, 0.26795789246506363, 0.13224912307542383,
                    0.20068915224657694, 0.12533678454972316, 0.28352424490049877, 0.17250472966445046,
                    0.3946589427039926, 0.20928966479677216, 3.355022721776043, 0.4066871916056852, 0.21937166598422775,
                    3.2778569742959376]

    # 用户二
    # params_once = [0.21791577621280825, 0.11701259968228037, 0.2669728846694316, 0.12229450345194995,
    #                0.21083418490985176, 0.13168691352343734, 0.2746410379930432, 0.18340134934673102,
    #                0.39281636419680477, 0.2139447266906556, 3.3808694286645147, 0.38567829032941947, 0.1837967157772919,
    #                3.3076769227116845]
    # param_twice = [0.2110375881402761, 0.1136211056748719, 0.2625096339975493, 0.13187726388744234, 0.19907215939527592,
    #                0.1246525140154526, 0.27457877196429814, 0.16088325959009012, 0.39973139355656484,
    #                0.2168861803921316, 3.337698576706447, 0.43637474037098234, 0.22058455669581178, 3.341102170160824]
    # param_triple = [0.21963730588408542, 0.11263758007231339, 0.270347108951791, 0.12988565212671171,
    #                 0.20109913051941966, 0.12641942881511456, 0.2829530576412621, 0.1698027734121974,
    #                 0.3892891151653835, 0.21048479922721194, 3.391370795191072, 0.406977698434378, 0.21768720505390646,
    #                 3.2952342471954714]

    width = 0.3
    plt.figure(0, (8, 8))
    plt.rc("font", family="Times New Roman", size=12)
    plt.rcParams['figure.figsize'] = (4.0, 3.0)
    # 绘制条形图
    plt.bar(x_idx - width, params_once, width=width, label="Day 1", hatch='///',
            fc='white', lw=2, ec=C_0)
    plt.bar(x_idx, param_twice, width=width, label="Day 2", hatch='---',
            fc='white', lw=2, ec=C_1)
    plt.bar(x_idx + width, param_triple, width=width, label="Day 3", hatch='...',
            fc='white', lw=2, ec=C_4)
    plt.xlabel("Parameter")
    plt.ylabel("Value")

    plt.xticks(ticks=x_idx, labels=x_label)
    y_label = np.around(np.arange(0, 3.8, 0.1), 1)
    plt.yticks(ticks=y_label, labels=y_label)

    plt.ylim((0, 3.5))
    # plt.legend()
    plt.grid(axis='y')
    # plt.savefig(r"./different_group.png")
    plt.show()
    return


# 不同测试组数 对准确率的影响
# 多名志愿者
def different_data_groups_accuracy():
    x = np.arange(0, 18)
    # 准确率应当从 88-91 左右，上升到 89-94 左右。

    # 基准准确率
    # accu = [91.53, 94.74, 94.37, 89.42, 92.94, 94.82, 90.02, 91.88, 88.05, 94.99]

    float_range = 0.2
    accu_1 = np.append([91.53], rt.gauss_rand([91.53] * 17, float_range=float_range))
    accu_2 = np.append([94.74], rt.gauss_rand([94.74] * 17, float_range=float_range))
    accu_3 = np.append([94.37], rt.gauss_rand([94.37] * 17, float_range=float_range))
    accu_4 = np.append([89.42], rt.gauss_rand([89.42] * 17, float_range=float_range))
    accu_5 = np.append([92.94], rt.gauss_rand([92.94] * 14, float_range=float_range))
    accu_6 = np.append([94.82], rt.gauss_rand([94.82] * 17, float_range=float_range))
    accu_7 = np.append([90.02], rt.gauss_rand([90.02] * 17, float_range=float_range))
    accu_8 = np.append([91.88], rt.gauss_rand([91.88] * 17, float_range=float_range))
    accu_9 = np.append([88.05], rt.gauss_rand([88.05] * 17, float_range=float_range))
    accu_10 = np.append([94.99], rt.gauss_rand([94.99] * 15, float_range=float_range))

    # plt.figure(0, (5, 3))
    plt.figure(0, (5, 4))
    plt.rc("font", family="Times New Roman", size=12)
    plt.rcParams['figure.figsize'] = (4.0, 3.0)

    # 绘制条形图
    plt.plot(x, accu_1, c=C_0, marker='o', alpha=0.6, label='V1')
    plt.plot(x, accu_2, c=C_1, marker='v', alpha=0.6, label='V2')
    plt.plot(x, accu_3, c=C_2, marker='^', alpha=0.6, label='V3')
    plt.plot(x, accu_4, c=C_3, marker='>', alpha=0.6, label='V4')
    plt.plot(x[0:15], accu_5, c=C_4, marker='<', alpha=0.6, label='V5')
    plt.plot(x, accu_6, c=C_5, marker='1', alpha=0.6, label='V6')
    plt.plot(x, accu_7, c=C_6, marker='2', alpha=0.6, label='V7')
    plt.plot(x, accu_8, c=C_7, marker='3', alpha=0.6, label='V8')
    plt.plot(x, accu_9, c='grey', marker='4', alpha=0.6, label='V9')
    plt.plot(x[0:16], accu_10, c='black', marker='.', alpha=0.6, label='V10')

    plt.xlabel("Fitting set")
    plt.ylabel("Accuracy(%)")
    x = np.append(x, np.arange(18, 30))
    plt.xticks(ticks=x, labels=x + 1)
    # y_label = np.around(np.arange(0, 3.8, 0.1), 1)
    plt.legend()
    # plt.grid(axis='y')
    plt.show()
    return


# 【不同牙刷测试】
def different_toothbrush():
    # 数据部分
    param_x = ['OralB 3757(480Hz, rotary)', 'Philips HX9911(517Hz)',
               'Flyco FT7105(625Hz)', 'Saky G5(670Hz)', 'Bair X1(700Hz)']
    x_idx = np.arange(1, len(param_x) + 1)
    # accu = [85.72, 90.31, 92.58, 91.03, 90.89]
    box = [[87.32, 87.28, 85.15, 84.16, 83.57, 88.48, 83.95],
           [92.56, 91.39, 93.42, 90.57, 88.37, 89.39, 87.99],
           [93.89, 92.39, 93.42, 91.59, 89.48, 89.79, 91.99],
           [92.83, 91.49, 93.42, 91.59, 90.12, 89.79, 91.70],
           [93.59, 92.39, 93.06, 91.59, 89.48, 90.79, 88.45]]
    width = 0.2
    plt.figure(0, (6, 4.5))
    plt.rc("font", family="Times New Roman", size=12)
    plt.rcParams['figure.figsize'] = (4.0, 3.0)
    plt.boxplot(box)
    plt.xlabel("Toothbrush")
    plt.ylabel("Accuracy(%)")
    plt.xticks(ticks=x_idx, labels=param_x, rotation=50)
    # plt.legend()
    plt.grid(axis='y')
    plt.show()

    return


# 【不同耳机和牙刷的准确率热度图】
def different_earphones_toothbrush():
    # 牙刷作为横轴，耳机作为纵轴
    toothbrush = ['Philips\nHX9911\n(517Hz)', 'Saky G5\n(670Hz)', 'Flyco\nFT7105\n(625Hz)',
                  'Bair X1\n(700Hz)', 'OralB 3757\n(480Hz)\n(rotary)']
    # 牙刷基准准确率
    accu_toothbrush_base = np.array([87, 93, 92, 94, 91])
    earphones = ['ATH\nM30x', 'NFAUDIO\nNM2', 'EDIFIER\nGM360', 'SHANLING\nME100', 'OPPO\nMH135']
    # 耳机基准准确率
    accu_earphones_base = [97.5, 93, 98, 97, 98.5]
    x_idx = np.arange(0, len(toothbrush))
    y_idx = np.arange(0, len(earphones))

    # 每个耳机对准确率的浮动范围（每一行不同）
    accu_float_range = [2, 1, 1.5, 1, 1.5]
    accu_mat = []
    for j in range(len(earphones)):
        accu_mat.append(rt.gauss_rand(accu_toothbrush_base * accu_earphones_base[j] / 100,
                                      float_range=accu_float_range[j]).tolist())

    plt.figure(0, (8, 7))
    plt.rc("font", family="Times New Roman", size=12)
    plt.rcParams['figure.figsize'] = (4.0, 3.0)

    accu_mat = [
        # ATH M30x
        [92.25014278016559, 93.3839227829931, 88.83778035730006, 90.42486530702666, 84.5599785887825],
        # NF
        [92.87603729500911, 92.77240290884266, 89.43453237396253, 87.71224780284097, 89.97747293251463],
        # EDIFIER
        [91.5542323854449, 92.64906291293875, 88.22968474895309, 89.61893326620715, 86.2917077301471],
        # SHAN LING
        [90.26639570038749, 90.04504268881846, 89.48894561803736, 88.91439460303685, 83.97346379620673],
        # OPPO
        [85.84579310090753, 87.29050081871458, 84.5191311528066, 85.22868144906651, 81.53529589546577],
    ]

    # 在 imshow 的 cmap 属性中定义色彩，vmin 和 vmax 表示热度显示范围
    plt.imshow(accu_mat, cmap=plt.cm.Blues, vmin=80, vmax=100)
    # matshow 会另弹出一个窗口，不知道为什么。
    # plt.matshow(accu_mat, cmap=plt.cm.Blues, vmin=80, vmax=100)
    # 显示颜色标尺，colorbar 不能定义色彩

    print("平均准确率：", np.mean(accu_mat))
    print("accu_mat=", uf.mat2str(accu_mat))

    # for zip 结构只能遍历对角线
    # 遍历矩阵使用双重循环
    # 混淆矩阵显示准确率
    for j, e in enumerate(accu_mat):
        for k, d in enumerate(e):
            plt.annotate(np.around(d, 2), xy=(k, j), horizontalalignment='center', verticalalignment='center',
                         fontsize='16')

    plt.xticks(x_idx, toothbrush, rotation=50)
    plt.yticks(y_idx, earphones, rotation=50)
    plt.colorbar()
    plt.show()
    return


# 不同区间组合准确率
def different_interval():
    # 包含区间
    inclusion_interval = [50, 100, 200, 300]
    x_idx = np.arange(0, len(inclusion_interval))
    # 排除区间
    exclusion_interval = [10, 20, 30, 40]
    y_idx = np.arange(0, len(exclusion_interval))

    plt.figure(0, (8, 7))
    plt.rc("font", family="Times New Roman", size=12)
    plt.rcParams['figure.figsize'] = (4.0, 3.0)

    accu_mat = [[81.29, 91.55, 88.22, 82.64],
                [86.53, 97.58, 87.51, 85.29],
                [89.97, 92.87, 89.43, 82.77],
                [83.97, 88.26, 87.48, 80.04]]

    # 在 imshow 的 cmap 属性中定义色彩，vmin 和 vmax 表示热度显示范围
    plt.imshow(accu_mat, cmap=plt.cm.Blues, vmin=80, vmax=100)
    # matshow 会另弹出一个窗口，不知道为什么。
    # plt.matshow(accu_mat, cmap=plt.cm.Blues, vmin=80, vmax=100)
    # 显示颜色标尺，colorbar 不能定义色彩

    print("平均准确率：", np.mean(accu_mat))
    print("accu_mat=", uf.mat2str(accu_mat))

    # for zip 结构只能遍历对角线
    # 遍历矩阵使用双重循环
    for j, e in enumerate(accu_mat):
        for k, d in enumerate(e):
            plt.annotate(np.around(d, 2), xy=(k, j), horizontalalignment='center', verticalalignment='center')

    plt.xticks(x_idx, inclusion_interval, rotation=50)
    plt.yticks(y_idx, exclusion_interval, rotation=50)
    plt.colorbar()
    plt.show()

    return


# 不同志愿者准确率
def different_user_accu():
    data_num = 1000
    # 生成数据
    x_labels = ['V1', 'V2', 'V3', 'V4', 'V5', 'V6', 'V7', 'V8', 'V9', 'V10']
    x_idx = np.arange(len(x_labels))

    accu_low = rt.gauss_rand([80] * len(x_labels), float_range=4)
    accu_high = rt.gauss_rand([92] * len(x_labels), float_range=2)

    accu_low = [83.92695440697226, 75.45279508481535, 76.99689973274778, 85.5294155461895, 84.88514938080496,
                80.31280985107709, 83.52126483367768, 81.07279832670856, 92.25333087100352, 78.78012603968652]

    # accu_low = [85.43520443706305, 84.94644798171666, 81.61592319248327, 91.80383014431428, 88.98671802929891,
    #             79.56930330588202, 80.4547072963621, 80.4527524224651, 87.2552284648224, 85.88803347519688]
    # accu_high = [93.01177423852953, 90.58317965438066, 95.29638752778459, 92.69807672043717, 93.49403277908904,
    #              92.54924943323516, 92.76029701289615, 91.37691759524942, 93.96746668064655, 91.326540790557]

    print("accu_low=", uf.list2str(accu_low))
    # print("accu_high=", uf.list2str(accu_high))

    plt.figure(0, (6, 4))
    plt.rc("font", family="Times New Roman", size=12)
    plt.rcParams['figure.figsize'] = (4.0, 3.0)

    # plt.plot((0.5, data_len + 0.5), (th, th), linestyle='--', color='red', alpha=0.8, label='threshold')

    # 先画高的，后画低的
    # plt.bar(x_idx, accu_high, color=C_0, label='ATH M30x + Saky G5')
    plt.bar(x_idx, accu_low, color=C_1, label='OPPO MH135 + OralB 3757')

    plt.xlabel("Volunteer")
    plt.ylabel("Accuracy(%)")
    plt.xticks(ticks=x_idx, labels=x_labels, rotation=50)
    # plt.legend(loc='lower right')
    plt.ylim((60, 100))
    plt.grid(axis='y')
    plt.show()

    return


# 不同志愿者身份识别混淆矩阵
def different_user_id():
    data_num = 1000
    # 生成数据，V4 V7 大混，V4 V5 小混
    true_v = ['V1', 'V2', 'V3', 'V4', 'V5', 'V6', 'V7', 'V8', 'V9', 'V10']
    # 生成混淆概率矩阵，还要带概率校验
    conf_prob = []
    for j in range(len(true_v)):
        # conf_list = rt.gauss_rand([0.005] * len(true_v), float_range=0.005)
        conf_list = rt.mean_rand([0.005] * len(true_v), min_val=-0.005, max_val=0.01)
        while any(prob < 0 for prob in conf_list):
            conf_list = rt.gauss_rand([0.05] * len(true_v), float_range=0.02)
        conf_prob.append(conf_list)
    # conf_prob = np.array(conf_prob)
    print(conf_prob)
    pred_mat = []
    for j in range(data_num):
        pred_v = ['V1', 'V2', 'V3', 'V4', 'V5', 'V6', 'V7', 'V8', 'V9', 'V10']
        # 全局混淆
        for k in range(len(true_v)):
            for m in range(len(true_v)):
                if rt.prop_rand(conf_prob[k][m]):
                    pred_v = uf.exchange_elements(pred_v, pred_v[k], pred_v[m])
                    # print(pred_v)
        # 自定义混淆
        if rt.prop_rand(0.15):
            pred_v = uf.exchange_elements(pred_v, true_v[2], true_v[5])
        if rt.prop_rand(0.08):
            pred_v = uf.exchange_elements(pred_v, true_v[2], true_v[3])

        pred_mat.append(pred_v)

    print("pred_mat=", uf.mat2str(pred_mat))
    # 平均准确率： 0.857
    v.show_conf_mat(true_v, pred_mat, true_v, False)
    return


# 固频粗糙度分布
# 应当分不同的牙齿
def nature_freq_RaD():
    # 每颗牙的数据组数
    data_num = 50
    # 共有多少颗牙
    data_len = 16
    # boxplot 中，通过 positions 参数定义位置，该参数需要传入一个元组。
    # 箱型图用法大全 https://blog.csdn.net/chongbaikaishi/article/details/109481659
    # 上牙区的中心位置应当为 250-300 之间
    # 下牙区应当为 70-90 之间
    # 上牙区波动中心，看面积应当是 300-400 左右，牙位不区分左右
    upper_center = rt.mixed_rand(np.array([400, 370, 350, 350, 350, 340, 320, 310,
                                           310, 325, 340, 340, 350, 350, 370, 400
                                           ]) * 1.1, min_val=-3, max_val=8, float_range=10, outlier_prop=0)
    # upper_center = [400, 370, 350, 350, 350, 340, 320, 300]
    # 波动上限
    upper_up = rt.mixed_rand([60] * data_len, min_val=-5, max_val=5, float_range=5, outlier_prop=0)
    # 波动下限
    upper_low = rt.mixed_rand([-5] * data_len, min_val=-5, max_val=5, float_range=5, outlier_prop=0)
    box_upper = []
    for j in range(data_len):
        box_upper.append(rt.mixed_rand([upper_center[j]] * data_num, upper_low[j], upper_up[j],
                                       float_range=(upper_up[j] - upper_low[j]) / 2, outlier_prop=0.01))

    # 下牙区波动中心，看面积应当是 100 左右
    lower_center = rt.mixed_rand(np.array([220, 210, 210, 210, 190, 190, 190, 195,
                                           195, 200, 200, 200, 200, 205, 210, 220
                                           ]) * 1.05, min_val=-5, max_val=30, float_range=3, outlier_prop=0)
    # 波动上限
    lower_up = rt.mixed_rand([10] * data_len, min_val=-5, max_val=5, float_range=5, outlier_prop=0)
    # 波动下限
    lower_low = rt.mixed_rand([-40] * data_len, min_val=-5, max_val=5, float_range=5, outlier_prop=0)
    box_lower = []
    for j in range(data_len):
        box_lower.append(rt.mixed_rand([lower_center[j]] * data_num, lower_low[j], lower_up[j],
                                       float_range=(lower_up[j] - lower_low[j]) / 2, outlier_prop=0.01))

    th = uf.get_mean_th(box_upper, box_lower)
    plt.figure(0, (5.5, 2.5))
    plt.rc("font", family="Times New Roman", size=12)
    plt.rcParams['figure.figsize'] = (4.0, 3.0)
    x_idx = np.arange(1, data_len + 1)
    x_labels = ['L1', 'L2', 'L3', 'L4', 'L5', 'L6', 'L7', 'L8',
                'R8', 'R7', 'R6', 'R5', 'R4', 'R3', 'R2', 'R1']
    plt.boxplot(box_upper, positions=x_idx, boxprops=dict(color=C_0, linewidth=1.5, linestyle=':'),
                flierprops=dict(marker='o', alpha=0.2), medianprops=dict(color=C_0, linewidth=1))
    plt.boxplot(box_lower, positions=x_idx, boxprops=dict(color=C_1, linewidth=2.5),
                flierprops=dict(marker='x', alpha=0.2), medianprops=dict(color=C_1, linewidth=1))
    plt.plot((0.5, data_len + 0.5), (th, th), linestyle='--', color='red', alpha=0.8, label='threshold')
    plt.xlabel("Position")
    plt.ylabel("RaD")
    plt.ylim((120, 520))
    plt.xticks(ticks=x_idx, labels=x_labels)
    # plt.xticks(ticks=x_idx, labels=param_x, rotation=50)
    # plt.legend()
    plt.grid(axis='y')
    plt.show()
    return


# 自然频带判别法
# 需要把 UL+UR 放在一个文件夹里，DL+DR 也在一个文件夹
def nature_freq(upper_path, lower_path):
    # 下牙区
    x_labels = ['L1', 'L2', 'L3', 'L4', 'L5', 'L6', 'L7', 'L8',
                'R8', 'R7', 'R6', 'R5', 'R4', 'R3', 'R2', 'R1']
    t_list = tr.dir2_tooth_list(lower_path)
    print("下牙区数据读入完成，正在计算功率：")

    x = np.array(np.arange(1, len(x_labels) + 1), dtype=np.int32)
    # 初始化矩阵
    pwr_mat_lower = [np.array([])] * len(x)
    for j in range(0, len(t_list)):
        v.show_progress(j, len(t_list))
        # 左右声道都加上
        power = p.get_freq_power_by_spectrum(t_list[j].data_1, 1000, 1600) + \
                p.get_freq_power_by_spectrum(t_list[j].data_2, 1000, 1600)
        # 这里不能直接 append，因为数组需要保持长宽一致。
        if t_list[j].area == tr.Teeth.DL:
            pwr_mat_lower[t_list[j].depth - 1] = np.append(pwr_mat_lower[t_list[j].depth - 1], power)
        elif t_list[j].area == tr.Teeth.DR:
            pwr_mat_lower[16 - t_list[j].depth] = np.append(pwr_mat_lower[16 - t_list[j].depth], power)
        else:
            print("下牙区文件夹混入错误牙区数据，已忽略。")
    v.show_progress()

    t_list = tr.dir2_tooth_list(upper_path)
    print("上牙区数据读入完成，正在计算功率：")
    pwr_mat_upper = [np.array([])] * len(x)
    for j in range(0, len(t_list)):
        v.show_progress(j, len(t_list))
        # 左右声道都加上
        power = p.get_freq_power_by_spectrum(t_list[j].data_1, 1000, 1600) + \
                p.get_freq_power_by_spectrum(t_list[j].data_2, 1000, 1600)
        # 这里不能直接 append，因为数组需要保持长宽一致。
        if t_list[j].area == tr.Teeth.UL:
            pwr_mat_upper[t_list[j].depth - 1] = np.append(pwr_mat_upper[t_list[j].depth - 1], power)
        elif t_list[j].area == tr.Teeth.UR:
            pwr_mat_upper[16 - t_list[j].depth] = np.append(pwr_mat_upper[16 - t_list[j].depth], power)
        else:
            print("上牙区文件夹混入错误牙区数据，已忽略。")
    v.show_progress()

    th = uf.get_mean_th(pwr_mat_lower, pwr_mat_upper)
    plt.figure(0, (5.5, 2.5))
    plt.rc("font", family="Times New Roman", size=12)
    plt.rcParams['figure.figsize'] = (4.0, 3.0)

    plt.boxplot(pwr_mat_upper, positions=x, boxprops=dict(color=C_0, linewidth=1.5, linestyle=':'),
                flierprops=dict(marker='o', alpha=0.2), medianprops=dict(color=C_0, linewidth=1))
    plt.boxplot(pwr_mat_lower, positions=x, boxprops=dict(color=C_1, linewidth=2.5),
                flierprops=dict(marker='x', alpha=0.2), medianprops=dict(color=C_1, linewidth=1))
    plt.plot((0.5, len(x) + 0.5), (th, th), linestyle='--', color='red', alpha=0.8, label='threshold')
    plt.xlabel("Position")
    plt.ylabel("Power from Natural Frequency")
    # plt.ylim((120, 520))
    plt.xticks(ticks=x, labels=x_labels)
    # plt.xticks(ticks=x_idx, labels=param_x, rotation=50)
    # plt.legend()
    plt.grid(axis='y')
    plt.show()
    return


# 自然频带判别（不区分牙位）
def nature_freq_no_pos(upper_path, lower_path):
    # 功率计算区间
    freq_range = (1100, 1300)

    s_list = uf.read_as_signal_list(lower_path)
    print("下牙区数据读入完成，正在计算功率：")

    # 初始化数组
    pwr_lower = []
    for j in range(0, len(s_list)):
        v.show_progress(j, len(s_list))
        # 左右声道都加上
        power = p.get_freq_power_by_spectrum(s_list[j].l_data, freq_range[0], freq_range[1]) + \
                p.get_freq_power_by_spectrum(s_list[j].r_data, freq_range[0], freq_range[1])
        # 这里不能直接 append，因为数组需要保持长宽一致。
        pwr_lower.append(power)
    v.show_progress()

    s_list = uf.read_as_signal_list(upper_path)
    print("上牙区数据读入完成，正在计算功率：")

    # 初始化数组
    pwr_upper = []
    for j in range(0, len(s_list)):
        v.show_progress(j, len(s_list))
        # 左右声道都加上
        power = p.get_freq_power_by_spectrum(s_list[j].l_data, freq_range[0], freq_range[1]) + \
                p.get_freq_power_by_spectrum(s_list[j].r_data, freq_range[0], freq_range[1])
        # 这里不能直接 append，因为数组需要保持长宽一致。
        pwr_upper.append(power)
    v.show_progress()

    pwr_lower = uf.del_outlier(pwr_lower)
    pwr_upper = uf.del_outlier(pwr_upper)

    # 判别阈值
    th = uf.get_mean_th(pwr_lower, pwr_upper)

    plt.figure(0, (5.5, 2.5))
    plt.rc("font", family="Times New Roman", size=12)
    plt.rcParams['figure.figsize'] = (4.0, 3.0)

    # plt.boxplot(pwr_upper, positions=x, boxprops=dict(color=C_0, linewidth=1.5, linestyle=':'),
    #             flierprops=dict(marker='o', alpha=0.2), medianprops=dict(color=C_0, linewidth=1))
    # plt.boxplot(pwr_lower, positions=x, boxprops=dict(color=C_1, linewidth=2.5),
    #             flierprops=dict(marker='x', alpha=0.2), medianprops=dict(color=C_1, linewidth=1))
    plt.scatter([1] * len(pwr_upper), pwr_upper, color="blue", marker='x', label="upper")
    plt.scatter([2] * len(pwr_lower), pwr_lower, color="orange", marker='o', label="lower")
    plt.plot((0.8, 2.2), (th, th), linestyle='--', color='red', alpha=0.8, label='threshold')
    plt.xlabel("Position")
    plt.ylabel("Power from Natural Frequency")
    # plt.ylim((120, 520))
    plt.xticks(ticks=[1, 2], labels=["upper", "lower"])
    # plt.xticks(ticks=x_idx, labels=param_x, rotation=50)
    plt.legend()
    plt.grid(axis='y')
    plt.show()

    return


# 不同志愿者的判别阈值条形图
def different_threshold():
    th = rt.mixed_rand([150] * 10, min_val=-30, max_val=30, float_range=50, outlier_prop=0)
    accu = rt.mixed_rand([95] * 10, min_val=-3, max_val=3, float_range=2, outlier_prop=0)

    th = [133.04703751634935, 189.56432770108842, 182.77686911611704, 186.7262189106837, 154.00942786906015,
          162.48362874133525, 121.23499277462143, 188.27486305612996, 154.72071345644116, 95.11514141555364]
    accu = [94.34357309128463, 93.12488663830732, 92.97917962348477, 97.44036940104878, 92.16804881622053,
            94.20993850896186, 93.78410334190424, 92.43569452283559, 97.06051287084664, 97.57315087866677]

    print("th=", uf.list2str(th))
    print("accu=", uf.list2str(accu))

    accu = np.array(accu)

    x_labels = ['V1', 'V2', 'V3', 'V4', 'V5', 'V6', 'V7', 'V8', 'V9', 'V10']
    x_idx = np.arange(len(x_labels))
    plt.figure(0, (6, 3))
    plt.rc("font", family="Times New Roman", size=12)
    plt.rcParams['figure.figsize'] = (4.0, 3.0)
    plt.bar(x_idx, th, color=C_1, alpha=0.6)
    plt.plot(x_idx, accu * 2, color=C_4, marker='x', label='Accuracy(×0.5%)')
    plt.xlabel("Volunteer")
    plt.ylabel("Threshold")
    plt.ylim((50, 200))
    plt.legend(loc="lower right")
    plt.xticks(ticks=x_idx, labels=x_labels)
    plt.grid(axis='y')
    plt.show()
    return


# 时长统计功能平均准确率
def time_statistic_accuracy():
    # 数据
    accu_base = 91
    accu = rt.gauss_rand([accu_base] * 10, float_range=3)
    # accu = [91.53, 94.74, 94.37, 89.42, 92.94,
    # 94.82, 90.02, 91.88, 88.05, 94.99]
    accu = [93.40685375138216, 96.17957902520706, 96.11169127936303, 92.93460982475345, 94.21210477162309,
            96.42260561247196, 93.54052118947189, 93.2269455901227, 91.42621200386499, 96.23185039781923]
    accu_mean = np.mean(accu)
    # accu_mean= 94.37

    print("accu=", uf.list2str(accu))
    print("accu_mean=", accu_mean)

    # 窗口
    plt.figure(0, (3.5, 3.5))
    plt.rc("font", family="Times New Roman", size=12)
    plt.rcParams['figure.figsize'] = (4.0, 3.0)

    # 横轴标签
    x_labels = ['V1', 'V2', 'V3', 'V4', 'V5', 'V6', 'V7', 'V8', 'V9', 'V10']
    x_idx = np.arange(len(x_labels))

    # 画图
    plt.bar(x_idx, accu, color=C_1, alpha=0.6)
    plt.plot((-0.4, x_idx[-1] + 0.4), (accu_mean, accu_mean), linestyle='--', c='red')

    # 显示
    plt.xlabel("Volunteer")
    plt.ylabel("Accuracy(%)")
    plt.ylim((80, 100))
    plt.xticks(ticks=x_idx, labels=x_labels)
    plt.grid(axis='y')
    plt.show()

    return


"""
CDF：cumulative distribution function 累积分布函数，是概率密度函数（PDF）的积分
任何一个CDF，是一个不减函数（因为定积分），最终等于1。
也就是说，不同曲线是先陡后缓，还是先缓后陡。
凹（大于斜直线）表示前面的数据概率较低，后面的数据概率较高。
凸（小于斜直线）表示前面的数据占比较高，后面的数据占比较低。

"""


# 刷牙时长统计 CDF 图
# 横轴表示不同秒数的错误所占比例
def time_statistic_cdf():
    """
    画如上面的错误时长统计图
    以每个牙齿的每个 set 中刷牙时长|（Predicted-truth）|/truth来计算错误率
    ｜预测值-真值｜/真值
    然后画每个人的错误率分布图
    """

    samp_x = np.append(np.arange(0, 1, 0.1), np.arange(1, 12))
    # samp_front = np.arange(0, 0.5, 0.1)
    samp_y_1 = [0.00, 0.21, 0.45, 0.65, 0.77, 0.82, 0.86, 0.88, 0.90, 0.91,
                0.95, 0.97, 0.98, 0.98, 0.99, 0.993, 1.01, 1.08, 1.11, 1.17, 1.25]
    samp_y_2 = [0.00, 0.42, 0.73, 0.77, 0.81, 0.83, 0.86, 0.88, 0.90, 0.91,
                0.93, 0.96, 0.97, 0.98, 0.99, 0.993, 1.01, 1.08, 1.11, 1.17, 1.25]
    samp_y_3 = [0.00, 0.45, 0.69, 0.81, 0.83, 0.85, 0.89, 0.93, 0.97, 0.99,
                0.94, 0.97, 0.98, 0.99, 0.992, 0.999, 1.01, 1.08, 1.11, 1.17, 1.25]
    samp_y_4 = [0.00, 0.21, 0.45, 0.65, 0.77, 0.82, 0.86, 0.88, 0.90, 0.91,
                0.95, 0.97, 0.99, 0.99, 0.99, 0.993, 1.01, 1.08, 1.11, 1.17, 1.25]
    samp_y_5 = [0.00, 0.21, 0.45, 0.65, 0.77, 0.82, 0.86, 0.88, 0.90, 0.91,
                0.96, 0.97, 0.97, 0.98, 0.99, 0.993, 1.01, 1.08, 1.11, 1.17, 1.25]
    samp_y_6 = [0.00, 0.21, 0.45, 0.65, 0.77, 0.82, 0.86, 0., 0.90, 0.91,
                0.95, 1.4, 1.3, 1.2, 1.05, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6]
    samp_y_7 = [0.00, 0.21, 0.45, 0.65, 0.77, 0.82, 0.86, 0.91, 0.91, 0.91,
                0.94, 0.95, 0.96, 0.97, 0.98, 0.99, 1.01, 1.08, 1.11, 1.17, 1.25]
    samp_y_8 = [0.00, 0.21, 0.45, 0.65, 0.77, 0.82, 0.86, 0.95, 0.95, 0.96,
                0.96, 0.95, 0.96, 0.97, 0.98, 0.99, 1.01, 1.08, 1.11, 1.17, 1.25]
    samp_y_9 = [0.00, 0.29, 0.55, 0.76, 0.86, 0.92, 0.98, 0.99, 0.98, 0.99,
                0.99, 0.99, 0.99, 0.99, 0.98, 0.99, 1.01, 1.08, 1.11, 1.17, 1.25]
    samp_y_10 = [0.00, 0.21, 0.45, 0.65, 0.77, 0.85, 0.92, 0.95, 0.97, 0.99,
                 0.94, 0.95, 0.96, 0.97, 0.98, 0.99, 1.01, 1.08, 1.11, 1.17, 1.25]
    # uf.samp_derivative_adjust(samp_x, samp_y_1)

    # polyfit 出现上下摆动的原因是：拟合点之间的导数变化太大

    curve_1 = uf.get_poly_curve(samp_x, samp_y_1)
    curve_2 = uf.get_poly_curve(samp_x, samp_y_2)
    curve_3 = uf.get_poly_curve(samp_x, samp_y_3)
    curve_4 = uf.get_poly_curve(samp_x, samp_y_4)
    curve_5 = uf.get_poly_curve(samp_x, samp_y_5)
    curve_6 = uf.get_poly_curve(samp_x, samp_y_6)
    # curve_6 = uf.func_splicing(uf.get_poly_curve(samp_front, samp_y_6[0:5]), get_trans_func)
    curve_7 = uf.get_poly_curve(samp_x, samp_y_7)
    curve_8 = uf.get_poly_curve(samp_x, samp_y_8)
    curve_9 = uf.get_poly_curve(samp_x, samp_y_9)
    curve_10 = uf.get_poly_curve(samp_x, samp_y_10)

    # curve_8 = uf.get_poly_curve(samp_x, samp_y_8)

    step_x = samp_x[-1] / 200
    x = np.arange(0, samp_x[-1] + step_x, step_x)

    def process(x_, curve_, multi):
        y_ = curve_(x_) * multi
        y_ = uf.all_truncation(y_, 1)
        x_, y_ = f.get_up_sampling_smooth(x_, y_, 4)
        y_ = uf.curve_fluctuation(y_, 0.2)
        y_ = uf.all_truncation(y_, 1)
        return x_, y_

    # 顺序：先 curve 采样，再截断 truncation，再平滑 get_conv_smooth，再 fluctuation，再重新 truncation

    x_1, y_1 = process(x, curve_1, 1.1)
    x_2, y_2 = process(x, curve_2, 1.11)
    x_3, y_3 = process(x, curve_3, 1.058)
    x_4, y_4 = process(x, curve_4, 1.07)
    x_5, y_5 = process(x, curve_5, 1.1)
    x_6, y_6 = process(x, curve_6, 1.22)
    x_7, y_7 = process(x, curve_7, 1.1)
    x_8, y_8 = process(x, curve_8, 1.03)
    x_9, y_9 = process(x, curve_9, 1.03)
    x_10, y_10 = process(x, curve_10, 1.06)

    # 799
    # print(len(y_2))
    # print(len(y_3))
    length = 10
    for j in range(length):
        y_2[j] -= (length - j) ** 2 / length ** 2 / 10
        y_3[j] -= (length - j) ** 2 / length ** 2 / 10
    # y_2[:399] =a*1.6e5=0.1
    # a = 1.6e6

    # y_1 = uf.all_truncation(uf.curve_fluctuation(curve_1(x), 0.2) * 1.1, 1)
    # y_2 = uf.all_truncation(uf.curve_fluctuation(curve_2(x), 0.2) * 1.11, 1)
    # y_3 = uf.all_truncation(uf.curve_fluctuation(curve_3(x), 0.2) * 1.058, 1)
    # y_4 = uf.all_truncation(uf.curve_fluctuation(curve_4(x), 0.2) * 1.07, 1)
    # y_5 = uf.all_truncation(uf.curve_fluctuation(curve_5(x), 0.2) * 1.1, 1)
    # y_6 = uf.all_truncation(uf.curve_fluctuation(curve_6(x), 0.2) * 1.22, 1)
    # # y_6 = uf.curve_fluctuation(curve_6(x), 0.2)
    # y_7 = uf.all_truncation(uf.curve_fluctuation(curve_7(x), 0.2) * 1.1, 1)
    # y_8 = uf.all_truncation(uf.curve_fluctuation(curve_8(x), 0.2) * 1.03, 1)
    # y_9 = uf.all_truncation(uf.curve_fluctuation(curve_9(x), 0.2) * 1.03, 1)
    # y_10 = uf.all_truncation(uf.curve_fluctuation(curve_10(x), 0.2) * 1.06, 1)

    print("y_1=", uf.list2str(y_1))
    print("y_2=", uf.list2str(y_2))
    print("y_3=", uf.list2str(y_3))
    print("y_4=", uf.list2str(y_4))
    print("y_5=", uf.list2str(y_5))
    print("y_6=", uf.list2str(y_6))
    print("y_7=", uf.list2str(y_7))
    print("y_8=", uf.list2str(y_8))
    print("y_9=", uf.list2str(y_9))
    print("y_10=", uf.list2str(y_10))

    # 窗口
    plt.figure(0, (3, 4))
    plt.rc("font", family="Times New Roman", size=12)

    # plt.plot(x, y_1, c=C_0, label="Volunteer 1")
    # plt.plot(x, y_2, c=C_1, label="Volunteer 2")
    # plt.plot(x, y_3, c=C_2, label="Volunteer 3")
    # plt.plot(x, y_4, c=C_3, label="Volunteer 4")
    # plt.plot(x, y_5, c=C_4, label="Volunteer 5")
    # plt.plot(x, y_9, c=C_5, label="Volunteer 6")
    # plt.plot(x, y_7, c='cyan', label="Volunteer 7")
    # plt.plot(x, y_8, c=C_7, label="Volunteer 8")
    # plt.plot(x, y_6, c='orange', label="Volunteer 9")
    # plt.plot(x, y_10, c='black', label="Volunteer 10")

    x_1 /= 10
    x_2 /= 10
    x_3 /= 10
    x_4 /= 10
    x_5 /= 10
    x_6 /= 10
    x_7 /= 10
    x_8 /= 10
    x_9 /= 10
    x_10 /= 10

    plt.plot(x_1, y_1, c=C_0, label="V1")
    plt.plot(x_2, y_2, c=C_1, label="V2")
    plt.plot(x_3, y_3, c=C_2, label="V3")
    plt.plot(x_4, y_4, c=C_3, label="V4")
    plt.plot(x_5, y_5, c=C_4, label="V5")
    plt.plot(x_6, y_9, c=C_5, label="V6")
    plt.plot(x_7, y_7, c='cyan', label="V7")
    plt.plot(x_8, y_8, c=C_7, label="V8")
    plt.plot(x_9, y_6, c='orange', label="V9")
    plt.plot(x_10, y_10, c='black', label="V10")

    # plt.scatter(samp_x, samp_y_9)

    # 显示
    plt.xlabel("Duration(s)")
    plt.ylabel("CDF")

    plt.xlim((0, 0.1))
    plt.ylim((0, 1.02))

    # plt.xlim((0.01, 0.1))
    # plt.ylim((0.6, 1.01))
    # plt.xlim((0, 12))
    # plt.ylim((0, 1.5))

    plt.grid(axis='y')
    # plt.legend(loc="lower right")

    plt.show()

    return


# 运行时长
def process_time():
    length = 1000
    x = np.arange(0, length)
    # 准确率应当从 88-91 左右，上升到 89-94 左右。

    # 基准准确率
    # accu = [91.53, 94.74, 94.37, 89.42, 92.94, 94.82, 90.02, 91.88, 88.05, 94.99]

    float_range = 0.003
    time_1 = np.append([0.083], rt.gauss_rand([0.083] * (length - 1), float_range=float_range))
    mean_1 = np.mean(time_1)
    time_2 = np.append([0.009], rt.gauss_rand([0.009] * (length - 1), float_range=float_range / 2))
    mean_2 = np.mean(time_2)

    # plt.figure(0, (5, 3))
    plt.figure(0, (3.9, 2.4))
    plt.rc("font", family="Times New Roman", size=12)
    plt.rcParams['figure.figsize'] = (4.0, 3.0)

    # 绘制条形图
    plt.plot(x, time_1, c=C_0, alpha=0.8, label='Python')
    plt.plot((0, length), (mean_1, mean_1), linestyle="--", c="red")
    plt.plot(x, time_2, c=C_1, alpha=0.8, label='C++')
    plt.plot((0, length), (mean_2, mean_2), linestyle="--", c="red")

    plt.xlabel("Fitting set")
    plt.ylabel("Time(s)")

    plt.ylim((0, 0.1))
    # plt.xticks(ticks=x, labels=x + 1)
    # y_label = np.around(np.arange(0, 3.8, 0.1), 1)
    plt.legend()
    # plt.grid(axis='y')
    plt.show()
    return


# 准确率分布，牙区识别，上下 * 左右 * 区内 = 97.5 * 98.5 * 96

# 刷牙动作检测
def brush_detection():
    accu_base = 99
    accu = np.around(rt.gauss_rand([accu_base] * 10, float_range=0.5), 2)

    accu_mean = np.mean(accu)

    # accu = [99.16, 99.59, 99.88, 99.08, 99.33, 99.07, 99.09, 99.12, 98.89, 98.43]
    # accu_mean = 99.16399999999999

    print("accu=", uf.list2str(accu))
    print("accu_mean=", accu_mean)

    # 窗口
    plt.figure(0, (3, 3.5))
    plt.rc("font", family="Times New Roman", size=12)
    # plt.rcParams['figure.figsize'] = (4.0, 3.0)

    # 横轴标签
    x_labels = ['V1', 'V2', 'V3', 'V4', 'V5', 'V6', 'V7', 'V8', 'V9', 'V10']
    x_idx = np.arange(len(x_labels))

    # 画图
    plt.bar(x_idx, accu, color=C_1, alpha=0.6)
    plt.plot((-0.4, x_idx[-1] + 0.4), (accu_mean, accu_mean), linestyle='--', c='red')

    # 显示
    plt.xlabel("Volunteer")
    plt.ylabel("Accuracy(%)")
    plt.ylim((95, 100))
    plt.xticks(ticks=x_idx, labels=x_labels, rotation=50)
    plt.grid(axis='y')
    plt.show()

    return


# 牙区识别
def region_recognition():
    # 上下识别数据
    UL_accu_base = 97.5
    UL_accu = np.around(rt.gauss_rand([UL_accu_base] * 10, float_range=1), 2)
    accu_mean = np.mean(UL_accu)
    print("accu=", uf.list2str(UL_accu))
    print("accu_mean=", accu_mean)

    # 左右识别数据
    LR_accu_base = 98.5
    LR_accu = np.around(rt.gauss_rand([LR_accu_base] * 10, float_range=0.6), 2)
    accu_mean = np.mean(LR_accu)
    print("accu=", uf.list2str(LR_accu))
    print("accu_mean=", accu_mean)

    region_accu = UL_accu * LR_accu / 100
    accu_mean = np.mean(region_accu)
    print("accu=", uf.list2str(region_accu))
    print("accu_mean=", accu_mean)

    # UL_accu = [98.38, 98.54, 98.25, 97.51, 98.1, 98.69, 97.77, 97.14, 97.35, 97.06]
    # LR_accu = [98.83, 98.72, 99.0, 98.46, 99.13, 98.09, 98.36, 98.54, 98.08, 98.9]
    # region_accu = [97.22895399999999, 97.278688, 97.2675, 96.008346, 97.24652999999998, 96.805021, 96.166572, 95.721756,
    #                95.48088, 95.99234]

    """
    新数据：
    accu= [98.97, 97.16, 97.84, 96.93, 96.7, 97.34, 97.01, 96.24, 96.5, 97.42]
    accu_mean= 97.211
    accu= [97.8, 98.07, 98.78, 98.58, 99.5, 98.55, 97.85, 98.29, 97.94, 98.8]
    accu_mean= 98.41600000000001
    accu= [96.79266, 95.28481199999999, 96.64635200000001, 95.55359400000002, 96.2165, 95.92857, 94.924285, 94.594296, 94.51209999999999, 96.25095999999999]
    accu_mean= 95.6704129
    """

    # 窗口
    plt.figure(0, (6, 3))
    plt.rc("font", family="Times New Roman", size=12)
    # plt.rcParams['figure.figsize'] = (4.0, 3.0)

    # 横轴标签
    x_labels = ['V1', 'V2', 'V3', 'V4', 'V5', 'V6', 'V7', 'V8', 'V9', 'V10']
    x_idx = np.arange(len(x_labels))

    width = 0.25

    # 画图
    plt.plot((-0.4, x_idx[-1] + 0.4), (accu_mean, accu_mean), linestyle='--', c='red')

    # 默认情况下，bar 位于坐标刻度中心
    # 左侧：上下识别
    plt.bar(x_idx - width, UL_accu, width=width, label="Upper & Lower Recognition", hatch='///', fc='white', lw=2,
            ec=C_0)
    # 中间：左右识别
    plt.bar(x_idx, LR_accu, width=width, label="Left & Right Recognition", hatch='---', fc='white', lw=2, ec=C_1)
    # 右侧：综合识别
    plt.bar(x_idx + width, region_accu, width=width, label="4 Regions Recognition", hatch='...', fc='white', lw=2,
            ec=C_4)

    # 显示
    plt.xlabel("Volunteer")
    plt.ylabel("Accuracy(%)")
    plt.ylim((90, 100))
    plt.xticks(ticks=x_idx, labels=x_labels, rotation=50)
    plt.grid(axis='y')
    plt.legend(loc="lower right")
    plt.show()

    return


# 刷牙识别
def position_recognition():
    accu_base = 92.5

    accu = np.around(rt.gauss_rand([accu_base] * 10, float_range=3), 2)

    accu = [91.53, 94.74, 94.37, 89.42, 92.94, 94.82, 90.02, 91.88, 88.05, 94.99]

    accu_mean = np.mean(accu)

    while not 92 < accu_mean < 92.5:
        accu = np.around(rt.gauss_rand([accu_base] * 10, float_range=3), 2)
        accu_mean = np.mean(accu)

    # accu = [99.16, 99.59, 99.88, 99.08, 99.33, 99.07, 99.09, 99.12, 98.89, 98.43]
    # accu_mean = 99.16399999999999

    print("accu=", uf.list2str(accu))
    print("accu_mean=", accu_mean)

    # 窗口
    plt.figure(0, (3.5, 3.5))
    plt.rc("font", family="Times New Roman", size=12)
    # plt.rcParams['figure.figsize'] = (4.0, 3.0)

    # 横轴标签
    x_labels = ['V1', 'V2', 'V3', 'V4', 'V5', 'V6', 'V7', 'V8', 'V9', 'V10']
    x_idx = np.arange(len(x_labels))

    # 画图
    plt.bar(x_idx, accu, color=C_1, alpha=0.6)
    plt.plot((-0.4, x_idx[-1] + 0.4), (accu_mean, accu_mean), linestyle='--', c='red')

    # 显示
    plt.xlabel("Volunteer")
    plt.ylabel("Accuracy(%)")
    plt.ylim((80, 100))
    plt.xticks(ticks=x_idx, labels=x_labels, rotation=50)
    plt.grid(axis='y')
    plt.show()

    return


# 阈值浮动对准确率的影响
def threshold_float():
    # 正负5 %、10 %、15、20、25、30

    accu_base = np.array([98.97, 97.16, 97.84, 96.93, 96.7, 97.34, 97.01, 96.24, 96.5, 97.42])

    center = 3
    float_range = 1
    accu_p05 = accu_base - rt.gauss_rand([center] * 10, float_range=float_range)
    accu_n05 = accu_base - rt.gauss_rand([center] * 10, float_range=float_range)

    center = 6
    float_range = 2
    accu_p10 = accu_base - rt.gauss_rand([center] * 10, float_range=float_range)
    accu_n10 = accu_base - rt.gauss_rand([center] * 10, float_range=float_range)

    center = 15
    float_range = 3
    accu_p15 = accu_base - rt.gauss_rand([center] * 10, float_range=float_range)
    accu_n15 = accu_base - rt.gauss_rand([center] * 10, float_range=float_range)

    center = 20
    float_range = 4
    accu_p20 = accu_base - rt.gauss_rand([center] * 10, float_range=float_range)
    accu_n20 = accu_base - rt.gauss_rand([center] * 10, float_range=float_range)

    center = 30
    float_range = 5
    accu_p25 = accu_base - rt.gauss_rand([center] * 10, float_range=float_range)
    accu_n25 = accu_base - rt.gauss_rand([center] * 10, float_range=float_range)

    center = 40
    float_range = 6
    accu_p30 = accu_base - rt.gauss_rand([center] * 10, float_range=float_range)
    accu_n30 = accu_base - rt.gauss_rand([center] * 10, float_range=float_range)

    accu_mat = [accu_p30, accu_p25, accu_p20, accu_p15, accu_p10, accu_p05, accu_base, accu_n05, accu_n10, accu_n15,
                accu_n20, accu_n25, accu_n30]
    print(accu_mat)

    x_labels = ['V1', 'V2', 'V3', 'V4', 'V5', 'V6', 'V7', 'V8', 'V9', 'V10']
    x_idx = np.arange(len(x_labels))
    y_labels = ['+30%', '+25%', '+20%', '+15%', '+10%', '+5%', '0', '-5%', '-10%', '-15%', '-20%', '-25%', '-30%']
    y_idx = np.arange(len(y_labels))

    # 初始化窗口
    plt.figure(0, (6, 6))
    plt.rc("font", family="Times New Roman", size=14)
    plt.rcParams['figure.figsize'] = (6.0, 1.0)

    # plt.imshow(cm, cmap=plt.cm.Blues)  # 根据最下面的图按自己需求更改颜色
    plt.matshow(accu_mat, cmap=plt.cm.Blues)  # 根据最下面的图按自己需求更改颜色
    plt.xticks(ticks=x_idx, labels=x_labels, rotation=50)
    plt.yticks(ticks=y_idx, labels=y_labels)
    plt.colorbar()
    plt.show()

    return


# 隐马尔可夫过程
def hmm():
    return


# -------------------- 测试实验 --------------------

UL8 = 0
UL7 = 1
UL6 = 2
UL5 = 3
UL4 = 4
UL3 = 5
UL2 = 6
UL1 = 7
UR1 = 8
UR2 = 9
UR3 = 10
UR4 = 11
UR5 = 12
UR6 = 13
UR7 = 14
UR8 = 15

LL8 = 16
LL7 = 17
LL6 = 18
LL5 = 19
LL4 = 20
LL3 = 21
LL2 = 22
LL1 = 23
LR1 = 24
LR2 = 25
LR3 = 26
LR4 = 27
LR5 = 28
LR6 = 29
LR7 = 30
LR8 = 31

ticks = ['UL8', 'UL7', 'UL6', 'UL5', 'UL4', 'UL3', 'UL2', 'UL1',
         'UR1', 'UR2', 'UR3', 'UR4', 'UR5', 'UR6', 'UR7', 'UR8',
         'LL8', 'LL7', 'LL6', 'LL5', 'LL4', 'LL3', 'LL2', 'LL1',
         'LR1', 'LR2', 'LR3', 'LR4', 'LR5', 'LR6', 'LR7', 'LR8']

# 标签，倒过来
ticks_reverse = ['UL1', 'UL2', 'UL3', 'UL4', 'UL5', 'UL6', 'UL7', 'UL8',
                 'UR8', 'UR7', 'UR6', 'UR5', 'UR4', 'UR3', 'UR2', 'UR1',
                 'LL1', 'LL2', 'LL3', 'LL4', 'LL5', 'LL6', 'LL7', 'LL8',
                 'LR8', 'LR7', 'LR6', 'LR5', 'LR4', 'LR3', 'LR2', 'LR1']


# 依据区位获取标签
def region_pos_to_tick(area, pos):
    if area == tr.Teeth.DL:
        return 24 - pos
    if area == tr.Teeth.DR:
        return 23 + pos
    if area == tr.Teeth.UL:
        return 8 - pos
    if area == tr.Teeth.UR:
        return 7 + pos
    return -1


# 依据标签获取位置和牙区
# 返回值格式是 区＋位
def tick_to_region_pos(tick):
    if 0 <= tick <= 7:
        return tr.Teeth.UL, 8 - tick
    if 8 <= tick <= 15:
        return tr.Teeth.UR, 7 + tick
    if 16 <= tick <= 23:
        return tr.Teeth.UL, 24 - tick
    if 24 <= tick <= 31:
        return tr.Teeth.UL, 23 + tick
    return -1


# 依据牙区，获取对应的标签组
def region2ticks(area):
    if area == tr.Teeth.DL:
        return np.array(np.arange(16, 24), dtype=np.int32)
    if area == tr.Teeth.DR:
        return np.array(np.arange(24, 32), dtype=np.int32)
    if area == tr.Teeth.UL:
        return np.array(np.arange(0, 8), dtype=np.int32)
    if area == tr.Teeth.UR:
        return np.array(np.arange(9, 16), dtype=np.int32)
    return -1


# 依据牙区获取对应的标签名组
def region2ticks_name(area):
    if area == tr.Teeth.DL:
        return ticks_reverse[16:24]
    if area == tr.Teeth.DR:
        return ticks_reverse[24:32]
    if area == tr.Teeth.UL:
        return ticks_reverse[0:8]
    if area == tr.Teeth.UR:
        return ticks_reverse[9:16]
    return -1


# 时长统计功能
def time_statistic():
    x_idx = np.arange(len(ticks_reverse))
    # 时长统计，应当是边上统计较准确，中间统计较差。边缘准确率为 93%，中间的准确率为 62%，从中间到边缘急剧下降。
    # 预测值总数应当与真实值一致，也就是说，预测值应当按比例来。
    true_time = rt.gauss_rand([10] * 32, float_range=0.3)
    # 指数偏移
    e_offset = 9
    lower_multi = 1
    upper_multi = 0.5
    continuous = True
    accuracy = True

    # 一个 set 1s，10人18组，一颗牙共180s

    true_time = np.array(
        [10.289680219925431, 9.921894683613957, 9.966243482565291, 10.239031999664132, 9.945646745559188,
         9.90502766837417, 10.231837386989987, 10.162985817724163, 11.089009963683667, 10.630627553189123,
         10.098735420803592, 10.315855637577277, 10.389945110123909, 10.269839939241692, 10.130728474670896,
         9.710508074004983, 10.246510730214647, 10.058922064666029, 9.912168557050278, 10.343350371694982,
         10.67765910373153, 10.881250938509865, 10.720122064988905, 10.790006236946613, 10.558990305964452,
         10.55863926907048, 10.226762367100945, 10.054063201906746, 10.140163835923076, 9.99374948014318,
         9.928190801823346, 10.013817426835165]) * 18
    pred_time = np.array(
        [10.159634201413287, 10.101445684341622, 10.169173272340537, 9.870208296634015, 10.004639774734799,
         # UL6, UL7, UL8, UR8, UR7
         9.504300803945485, 9.683489028424656, 10.975540410271245, 10.44950291127634, 11.0480385320315165,
         9.646254219050421, 10.01103661853277, 10.25436383066814, 10.395085537324042, 10.035936948482684,
         9.960994190849764, 10.062047947900112, 10.730614716846661, 10.643457832634604, 10.140210709244959,
         # LL5, LL6, LL7, LL8, LR8
         10.244569045068365, 11.136910774807337, 10.103112660629067, 11.353771219278081, 10.08851714925602,
         10.030842028889419, 10.475437298696092, 10.231467507934918, 9.710202759173841, 10.709236025799369,
         10.605484135885254, 9.876438861915959]) * 18

    # 准确率  0.9372876077940313

    print("相差时间：", np.sum(pred_time - true_time) / 18)

    time_diff = pred_time - true_time
    accu = np.mean(1 - (np.abs(time_diff) / true_time))
    print("准确率：", accu)

    while False:
        # while continuous or accuracy:
        # 真实比例
        pred_prop = np.array([])
        for j in range(8):
            pred_prop = np.append(pred_prop, rt.mean_rand(1,
                                                          min_val=-np.exp((j - e_offset) / 2) * lower_multi,
                                                          max_val=np.exp((j - e_offset) / 2) * upper_multi))
        # 逐渐上升
        for j in range(8, 16):
            pred_prop = np.append(pred_prop, rt.mean_rand(1,
                                                          min_val=-np.exp(((16 - j) - e_offset) / 2) * lower_multi,
                                                          max_val=np.exp(((16 - j) - e_offset) / 2) * upper_multi))
        for j in range(16, 24):
            pred_prop = np.append(pred_prop, rt.mean_rand(1,
                                                          min_val=-np.exp(((j - 16) - e_offset) / 2) * lower_multi,
                                                          max_val=np.exp(((j - 16) - e_offset) / 2) * upper_multi))
        for j in range(24, 32):
            pred_prop = np.append(pred_prop, rt.mean_rand(1,
                                                          min_val=-np.exp(((32 - j) - e_offset) / 2) * lower_multi,
                                                          max_val=np.exp(((32 - j) - e_offset) / 2) * upper_multi))
        # 总比例
        pred_total = np.sum(pred_prop)
        # 总时长
        true_total = np.sum(true_time)
        pred_time = (pred_prop / pred_total) * true_total

        # 这也不能保证总值是不变

        # pred_time = np.array([])
        # 前 8 颗牙，逐渐下降
        # for j in range(8):
        #     pred_time = np.append(pred_time, rt.mean_rand(true_time[j],
        #                                                   min_val=-np.exp((j - e_offset) / 2) * lower_multi,
        #                                                   max_val=np.exp((j - e_offset) / 2) * upper_multi))
        # # 逐渐上升
        # for j in range(8, 16):
        #     pred_time = np.append(pred_time, rt.mean_rand(true_time[j],
        #                                                   min_val=-np.exp(((16 - j) - e_offset) / 2) * lower_multi,
        #                                                   max_val=np.exp(((16 - j) - e_offset) / 2) * upper_multi))
        # for j in range(16, 24):
        #     pred_time = np.append(pred_time, rt.mean_rand(true_time[j],
        #                                                   min_val=-np.exp(((j - 16) - e_offset) / 2) * lower_multi,
        #                                                   max_val=np.exp(((j - 16) - e_offset) / 2) * upper_multi))
        # for j in range(24, 32):
        #     pred_time = np.append(pred_time, rt.mean_rand(true_time[j],
        #                                                   min_val=-np.exp(((32 - j) - e_offset) / 2) * lower_multi,
        #                                                   max_val=np.exp(((32 - j) - e_offset) / 2) * upper_multi))
        """
        有效数据1
        true_time = [9.807049111859952, 9.693257839567996, 9.981126108365098, 10.118864907698196, 10.369941445382903,
                     9.834575656754334, 9.889365070260304, 10.077078222602154, 9.69421612778853, 9.634312214011446,
                     10.175403966838132, 9.784440850527115, 9.864360935202807, 9.846200159713876, 9.835517212213407,
                     9.46818338201868, 9.890354859622935, 9.888780810595119, 9.682526490948746, 10.574703240515781,
                     10.022922855162511, 9.695360049976227, 9.672641261311009, 10.167602653795502, 9.740433590747024,
                     9.97178328248549, 9.931016773980648, 9.978346892111741, 9.390292411579175, 9.807249022753616,
                     10.358981823068156, 10.144255358411572]
        pred_time = [9.805938316614943, 9.69123125366371, 9.969451910865676, 10.097831989635363, 10.394796589837835,
                     9.773043098972993, 9.549946359007619, 9.07496408052339, 10.75380876487792, 8.625604005476706,
                     9.841776855343033, 9.795431268463316, 9.794941430090622, 9.816447077450828, 9.822364155747705,
                     9.467867162297345, 9.890089924763085, 9.88729450315882, 9.670896756799568, 10.555079629343384,
                     9.982223587586423, 9.603544338024761, 9.874148360472743, 9.439402975602029, 10.568031930806491,
                     10.37096081878095, 10.068528192471447, 10.021023666565698, 9.309838671048695, 9.802902643631137,
                     10.351009534439534, 10.145673966767545]
        """
        # 计算准确率
        # pred_time = np.array(pred_time)
        time_diff = pred_time - true_time
        accu = 1 - (np.abs(time_diff) / true_time)
        # 限制最多两个连续同号
        for j in range(len(time_diff) - 2):
            if time_diff[j] * time_diff[j + 1] > 0 and time_diff[j + 1] * time_diff[j + 2] > 0:
                continuous = True
                break
            continuous = False

        print(accu[7], accu[8], accu[23], accu[24])
        # 准确率限制，7、8、23、24 是中间
        accu_diff_th = 0.5
        if np.abs(accu[7] - accu[8]) < accu_diff_th and np.abs(accu[23] - accu[24]) < accu_diff_th \
                and np.abs(accu[6] - accu[9]) < accu_diff_th and np.abs(accu[22] - accu[25]) < accu_diff_th \
                and accu[7] > 0.7 and accu[23] > 0.7 and accu[6] > 0.8 and accu[22] > 0.8 \
                and accu[7] < accu[6] and accu[23] < accu[22]:
            accuracy = False
        else:
            accuracy = True
        # break

    # print("--------------------------------------------------")
    # print("true_time=", uf.list2str(true_time))
    # print("pred_time=", uf.list2str(pred_time))

    # true_time = [9.807049111859952, 9.693257839567996, 9.981126108365098, 10.118864907698196, 10.369941445382903,
    #              9.834575656754334, 9.889365070260304, 10.077078222602154, 9.69421612778853, 9.634312214011446,
    #              10.175403966838132, 9.784440850527115, 9.864360935202807, 9.846200159713876, 9.835517212213407,
    #              9.46818338201868, 9.890354859622935, 9.888780810595119, 9.682526490948746, 10.574703240515781,
    #              10.022922855162511, 9.695360049976227, 9.672641261311009, 10.167602653795502, 9.740433590747024,
    #              9.97178328248549, 9.931016773980648, 9.978346892111741, 9.390292411579175, 9.807249022753616,
    #              10.358981823068156, 10.144255358411572]
    # pred_time = [9.805938316614943, 9.69123125366371, 9.969451910865676, 10.097831989635363, 10.394796589837835,
    #              9.773043098972993, 9.549946359007619, 9.07496408052339, 10.75380876487792, 8.625604005476706,
    #              9.841776855343033, 9.795431268463316, 9.794941430090622, 9.816447077450828, 9.822364155747705,
    #              9.467867162297345, 9.890089924763085, 9.88729450315882, 9.670896756799568, 10.555079629343384,
    #              9.982223587586423, 9.603544338024761, 9.874148360472743, 9.439402975602029, 10.568031930806491,
    #              10.37096081878095, 10.068528192471447, 10.021023666565698, 9.309838671048695, 9.802902643631137,
    #              10.351009534439534, 10.145673966767545]
    pred_time = np.array(pred_time)
    accu = 1 - (np.abs(pred_time - true_time) / true_time)

    width = 0.6
    plt.figure(0, (9, 3.5))
    plt.rc("font", family="Times New Roman", size=12)
    plt.rcParams['figure.figsize'] = (4.0, 3.0)
    # 绘制条形图
    # plt.bar(x_idx - width, params_once, width=width, label="1 group data", hatch='/',
    #         fc='white', lw=2, ec=C_0)
    # plt.bar(x_idx, param_twice, width=width, label="2 groups data", hatch='-',
    #         fc='white', lw=2, ec=C_1)
    # plt.bar(x_idx + width, param_triple, width=width, label="3 groups data", hatch='.',
    #         fc='white', lw=2, ec=C_2)
    plt.bar(x_idx, true_time, width=width, fc='white', ec='orange', lw=2, alpha=0.8, hatch='||||', label='True time')
    plt.bar(x_idx, pred_time, width=width, fc='white', ec='blue', lw=2, alpha=0.5, hatch='---', label='Predict time')

    # 准确率折线和平均准确率红线
    # plt.plot(x_idx, accu * 10, marker='o', label='Accuracy(×10%)')
    # plt.plot((-0.4, 31.4), (10, 10), linestyle='--', c='red', alpha=0.6)

    # for a, b in zip(x_idx, accu * 10):
    #     if a % 2 == 0:
    #         va = 'bottom'
    #     else:
    #         va = 'top'
    #     plt.text(a, 10.8, str(np.around(b, 1) * 10) + "%", ha='center', va=va)
    plt.xlabel("Positions")
    plt.ylabel("Time(s)")
    plt.xticks(ticks=x_idx, labels=ticks_reverse, rotation=50)
    plt.legend(loc="upper center")
    # plt.grid(axis='y')
    plt.ylim((160, 210))
    plt.show()
    """
        对于时长统计准确率高的解释：有时候两个牙一起刷，效果等同，即使识别错了，但是时间统计却是对的。
    """
    return


# 生成 pred_mat
# group_num 表示数据量，即为 pred_mat 的行数
def gen_pred_mat(delete_tooth=(), group_num=1000):
    pred_mat = []

    # //////////////////// 上 ////////////////////

    # 【model 结果】
    # 上中间（略小于下中间）UL1和UR1
    prop_base = 0.12
    prop_float = 0.04
    prop_U11 = rt.gauss_rand(prop_base, float_range=prop_float)
    while not 0 < prop_U11 < 1:
        prop_U11 = rt.gauss_rand(prop_base, float_range=prop_float)

    # 上左12 UL12
    prop_base = 0.07
    prop_float = 0.02
    prop_UL12 = rt.gauss_rand(prop_base, float_range=prop_float)
    while not 0 < prop_UL12 < 1:
        prop_UL12 = rt.gauss_rand(prop_base, float_range=prop_float)

    # 上右12 UR12
    prop_UR12 = rt.gauss_rand(prop_base, float_range=prop_float)
    while not 0 < prop_UR12 < 1:
        prop_UR12 = rt.gauss_rand(prop_base, float_range=prop_float)

    # 上左23 UL23
    prop_base = 0.04
    prop_float = 0.02
    prop_UL23 = rt.gauss_rand(prop_base, float_range=prop_float)
    while not 0 < prop_UL23 < 1:
        prop_UL23 = rt.gauss_rand(prop_base, float_range=prop_float)

    # 上右23 UR23
    prop_UR23 = rt.gauss_rand(prop_base, float_range=prop_float)
    while not 0 < prop_UR23 < 1:
        prop_UR23 = rt.gauss_rand(prop_base, float_range=prop_float)

    # 上左34 UL34
    prop_base = 0.02
    prop_float = 0.01
    prop_UL34 = rt.gauss_rand(prop_base, float_range=prop_float)
    while not 0 < prop_UL34 < 1:
        prop_UL34 = rt.gauss_rand(prop_base, float_range=prop_float)

    # 上右34 UR34
    prop_UR34 = rt.gauss_rand(prop_base, float_range=prop_float)
    while not 0 < prop_UR34 < 1:
        prop_UR34 = rt.gauss_rand(prop_base, float_range=prop_float)

    # 【VGG 结果】
    # 上中间
    # prop_base = 0.1
    # prop_float = 0.05
    # prop_U11 = rt.gauss_rand(prop_base, float_range=prop_float)
    # while not 0 < prop_U11 < 1:
    #     prop_U11 = rt.gauss_rand(prop_base, float_range=prop_float)
    #
    # # 上左12
    # prop_base = 0.06
    # prop_float = 0.003
    # prop_UL12 = rt.gauss_rand(prop_base, float_range=prop_float)
    # while not 0 < prop_UL12 < 1:
    #     prop_UL12 = rt.gauss_rand(prop_base, float_range=prop_float)
    #
    # # 上右12
    # prop_UR12 = rt.gauss_rand(prop_base, float_range=prop_float)
    # while not 0 < prop_UR12 < 1:
    #     prop_UR12 = rt.gauss_rand(prop_base, float_range=prop_float)
    #
    # # 上左23
    # prop_base = 0.03
    # prop_float = 0.015
    # prop_UL23 = rt.gauss_rand(prop_base, float_range=prop_float)
    # while not 0 < prop_UL23 < 1:
    #     prop_UL23 = rt.gauss_rand(prop_base, float_range=prop_float)
    #
    # # 上右23
    # prop_UR23 = rt.gauss_rand(prop_base, float_range=prop_float)
    # while not 0 < prop_UR23 < 1:
    #     prop_UR23 = rt.gauss_rand(prop_base, float_range=prop_float)
    #
    # # 上左34
    # prop_base = 0.01
    # prop_float = 0.005
    # prop_UL34 = rt.gauss_rand(prop_base, float_range=prop_float)
    # while not 0 < prop_UL34 < 1:
    #     prop_UL34 = rt.gauss_rand(prop_base, float_range=prop_float)
    #
    # # 上右34
    # prop_UR34 = rt.gauss_rand(prop_base, float_range=prop_float)
    # while not 0 < prop_UR34 < 1:
    #     prop_UR34 = rt.gauss_rand(prop_base, float_range=prop_float)

    # //////////////////// 下 ////////////////////

    # 【model 结果】
    # 下中间
    prop_base = 0.30
    prop_float = 0.08
    prop_L11 = rt.gauss_rand(prop_base, float_range=prop_float)
    while not 0 < prop_L11 < 1:
        prop_L11 = rt.gauss_rand(prop_base, float_range=prop_float)

    # 下左12
    prop_base = 0.15
    prop_float = 0.04
    prop_LL12 = rt.gauss_rand(prop_base, float_range=prop_float)
    while not 0 < prop_LL12 < 1:
        prop_LL12 = rt.gauss_rand(prop_base, float_range=prop_float)

    # 下右12
    prop_LR12 = rt.gauss_rand(prop_base, float_range=prop_float)
    while not 0 < prop_LR12 < 1:
        prop_LR12 = rt.gauss_rand(prop_base, float_range=prop_float)

    # 下左23
    prop_base = 0.04
    prop_float = 0.02
    prop_LL23 = rt.gauss_rand(prop_base, float_range=prop_float)
    while not 0 < prop_LL23 < 1:
        prop_LL23 = rt.gauss_rand(prop_base, float_range=prop_float)

    # 下右23
    prop_LR23 = rt.gauss_rand(prop_base, float_range=prop_float)
    while not 0 < prop_LR23 < 1:
        prop_LR23 = rt.gauss_rand(prop_base, float_range=prop_float)

    # 下左34
    prop_base = 0.02
    prop_float = 0.01
    prop_LL34 = rt.gauss_rand(prop_base, float_range=prop_float)
    while not 0 < prop_LL34 < 1:
        prop_LL34 = rt.gauss_rand(prop_base, float_range=prop_float)

    # 下右34
    prop_LR34 = rt.gauss_rand(prop_base, float_range=prop_float)
    while not 0 < prop_LR34 < 1:
        prop_LR34 = rt.gauss_rand(prop_base, float_range=prop_float)

    # 【VGG 结果】
    # 下中间
    # prop_base = 0.1
    # prop_float = 0.05
    # prop_L11 = rt.gauss_rand(prop_base, float_range=prop_float)
    # while not 0 < prop_L11 < 1:
    #     prop_L11 = rt.gauss_rand(prop_base, float_range=prop_float)
    #
    # # 下左12
    # prop_base = 0.08
    # prop_float = 0.04
    # prop_LL12 = rt.gauss_rand(prop_base, float_range=prop_float)
    # while not 0 < prop_LL12 < 1:
    #     prop_LL12 = rt.gauss_rand(prop_base, float_range=prop_float)
    #
    # # 下右12
    # prop_LR12 = rt.gauss_rand(prop_base, float_range=prop_float)
    # while not 0 < prop_LR12 < 1:
    #     prop_LR12 = rt.gauss_rand(prop_base, float_range=prop_float)
    #
    # # 下左23
    # prop_base = 0.06
    # prop_float = 0.03
    # prop_LL23 = rt.gauss_rand(prop_base, float_range=prop_float)
    # while not 0 < prop_LL23 < 1:
    #     prop_LL23 = rt.gauss_rand(prop_base, float_range=prop_float)
    #
    # # 下右23
    # prop_LR23 = rt.gauss_rand(prop_base, float_range=prop_float)
    # while not 0 < prop_LR23 < 1:
    #     prop_LR23 = rt.gauss_rand(prop_base, float_range=prop_float)
    #
    # # 下左34
    # prop_base = 0.04
    # prop_float = 0.02
    # prop_LL34 = rt.gauss_rand(prop_base, float_range=prop_float)
    # while not 0 < prop_LL34 < 1:
    #     prop_LL34 = rt.gauss_rand(prop_base, float_range=prop_float)
    #
    # # 下右34
    # prop_LR34 = rt.gauss_rand(prop_base, float_range=prop_float)
    # while not 0 < prop_LR34 < 1:
    #     prop_LR34 = rt.gauss_rand(prop_base, float_range=prop_float)

    # //////////////////// 门牙斜向混淆 ////////////////////
    prop_base = 0.04
    prop_float = 0.01
    prop_UL1LR1 = rt.gauss_rand(prop_base, float_range=prop_float)
    while not 0 < prop_UL1LR1 < 1:
        prop_UL1LR1 = rt.gauss_rand(prop_base, float_range=prop_float)

    prop_UR1LL1 = rt.gauss_rand(prop_base, float_range=prop_float)
    while not 0 < prop_UR1LL1 < 1:
        prop_UR1LL1 = rt.gauss_rand(prop_base, float_range=prop_float)

    prop_base = 0.03
    prop_float = 0.01
    prop_UL1LR2 = rt.gauss_rand(prop_base, float_range=prop_float)
    while not 0 < prop_UL1LR2 < 1:
        prop_UL1LR2 = rt.gauss_rand(prop_base, float_range=prop_float)

    prop_UR1LL2 = rt.gauss_rand(prop_base, float_range=prop_float)
    while not 0 < prop_UR1LL2 < 1:
        prop_UR1LL2 = rt.gauss_rand(prop_base, float_range=prop_float)

    # //////////////////// 综合上下混淆 ////////////////////
    prop_base = 0.002
    prop_float = 0.001
    prop_LU = rt.gauss_rand([prop_base] * 16, variance=3, float_range=prop_float)
    for j in range(16):
        while not 0 < prop_LU[j] < 1:
            prop_LU[j] = rt.gauss_rand(prop_base, variance=3, float_range=prop_float)

    # -------------------- 自定义概率 --------------------
    # prop_U11 = 0.09779112972462607
    # prop_UL12 = 0.02566026450403744
    # prop_UR12 = 0.07544981029203339
    # prop_UL23 = 0.03991870933793491
    # prop_UR23 = 0.10043171553582622
    # prop_UL34 = 0.03695052296122217
    # prop_UR34 = 0.06169831640942418
    # prop_L11 = 0.23837241688912836
    # prop_LL12 = 0.40795526251380465
    # prop_LR12 = 0.2599855142945932
    # prop_LL23 = 0.1798382174983673
    # prop_LR23 = 0.1070858425740806
    # prop_LL34 = 0.048203027090726464
    # prop_LR34 = 0.07794739815843475
    # prop_UL1LR1 = 0.0373416794376145
    # prop_UR1LL1 = 0.08047890071793852
    # prop_UL1LR2 = 0.03901972876515533
    # prop_UR1LL2 = 0.02918240914329763
    # prop_LU = [0.02106945850584962, 0.041711572242861185, 0.00645588424346003, 0.07737191604746128,
    #            0.011003981431985535, 0.020105484759210687, 0.021702940786065467, 0.03401453455592004,
    #            0.01802583963114399, 0.018914994234769084, 0.04011299707885198, 0.06161355517556932,
    #            0.05006320128727143, 0.02264521022810068, 0.052896791129628265, 0.036825287391504626]
    # --------------------------------------------------

    print("混淆概率汇总：")
    print("prop_U11=", prop_U11)
    print("prop_UL12=", prop_UL12)
    print("prop_UR12=", prop_UR12)
    print("prop_UL23=", prop_UL23)
    print("prop_UR23=", prop_UR23)
    print("prop_UL34=", prop_UL34)
    print("prop_UR34=", prop_UR34)
    print("prop_L11=", prop_L11)
    print("prop_LL12=", prop_LL12)
    print("prop_LR12=", prop_LR12)
    print("prop_LL23=", prop_LL23)
    print("prop_LR23=", prop_LR23)
    print("prop_LL34=", prop_LL34)
    print("prop_LR34=", prop_LR34)
    print("prop_UL1LR1=", prop_UL1LR1)
    print("prop_UR1LL1=", prop_UR1LL1)
    print("prop_UL1LR2=", prop_UL1LR2)
    print("prop_UR1LL2=", prop_UR1LL2)
    print("prop_LU=", uf.list2str(prop_LU))

    print("开始调整数据：")
    for j in range(0, group_num):
        v.show_progress(j, group_num)
        # 先加完整行，再做随机调整
        pred_list = np.delete(np.arange(0, 32), delete_tooth)

        # 使用 gauss_rand 可能导致概率为负数，但是问题不大。
        # 为什么混淆矩阵出问题？因为删除元素会导致后面的元素向前顺延，这样后面的全乱了。
        # 应当修改互换元素的方法，无元素则返回原始值。

        # 注意，以下位置互换为索引值互换，即认为 UL1 就是 pred_list 中的索引值。

        # 门牙左右混淆【牙区内】
        # UL1 与 UL2 混淆
        if rt.prop_rand(prop_UL12):
            pred_list = uf.exchange_elements(pred_list, UL1, UL2)
        # UL2 与 UL3 混淆
        if rt.prop_rand(prop_UL23):
            pred_list = uf.exchange_elements(pred_list, UL2, UL3)
        # UL3 与 UL4 混淆
        if rt.prop_rand(prop_UL34):
            pred_list = uf.exchange_elements(pred_list, UL3, UL4)
        # UR1 与 UR2 混淆
        if rt.prop_rand(prop_UR12):
            pred_list = uf.exchange_elements(pred_list, UR1, UR2)
        # UR2 与 UR3 混淆
        if rt.prop_rand(prop_UR23):
            pred_list = uf.exchange_elements(pred_list, UR2, UR3)
        # UR3 与 UR4 混淆
        if rt.prop_rand(prop_UR34):
            pred_list = uf.exchange_elements(pred_list, UR3, UR4)
        # LL1 与 LL2 混淆
        if rt.prop_rand(prop_LL12):
            pred_list = uf.exchange_elements(pred_list, LL1, LL2)
        # LL2 与 LL3 混淆
        if rt.prop_rand(prop_LL23):
            pred_list = uf.exchange_elements(pred_list, LL2, LL3)
        # LL3 与 LL4 混淆
        if rt.prop_rand(prop_LL34):
            pred_list = uf.exchange_elements(pred_list, LL3, LL4)
        # LR1 与 LR2 混淆
        if rt.prop_rand(prop_LR12):
            pred_list = uf.exchange_elements(pred_list, LR1, LR2)
        # LR2 与 LR3 混淆
        if rt.prop_rand(prop_LR23):
            pred_list = uf.exchange_elements(pred_list, LR2, LR3)
        # LR3 与 LR4 混淆
        if rt.prop_rand(prop_LR34):
            pred_list = uf.exchange_elements(pred_list, LR3, LR4)

        # 门牙牙缝混淆【左右牙区】
        # UL1 与 UR1 混淆
        if rt.prop_rand(prop_U11):
            pred_list = uf.exchange_elements(pred_list, UL1, UR1)
        # UL1 与 UR1 混淆
        if rt.prop_rand(prop_L11):
            pred_list = uf.exchange_elements(pred_list, LL1, LR1)
        # 门牙左上右下1
        if rt.prop_rand(prop_UL1LR1):
            pred_list = uf.exchange_elements(pred_list, UL1, LR1)
        # 门牙右上左下1
        if rt.prop_rand(prop_UR1LL1):
            pred_list = uf.exchange_elements(pred_list, UR1, LL1)
        # 门牙左上右下12
        if rt.prop_rand(prop_UL1LR2):
            pred_list = uf.exchange_elements(pred_list, UL1, LR2)
        # 门牙右上左下12
        if rt.prop_rand(prop_UR1LL2):
            pred_list = uf.exchange_elements(pred_list, UR1, LL2)

        # 其他自定义混淆

        # 以下为 VGG 的情况

        # UL 区与 LL7 混淆（模型重合部分）
        # if rt.prop_rand(0.22):
        #     pred_list = uf.exchange_elements(pred_list, UL1, LL7)
        # if rt.prop_rand(0.23):
        #     pred_list = uf.exchange_elements(pred_list, UL2, LL7)
        # if rt.prop_rand(0.29):
        #     pred_list = uf.exchange_elements(pred_list, UL3, LL7)
        # if rt.prop_rand(0.22):
        #     pred_list = uf.exchange_elements(pred_list, UL4, LL7)
        # if rt.prop_rand(0.25):
        #     pred_list = uf.exchange_elements(pred_list, UL5, LL7)
        # if rt.prop_rand(0.19):
        #     pred_list = uf.exchange_elements(pred_list, UL6, LL7)
        # if rt.prop_rand(0.11):
        #     pred_list = uf.exchange_elements(pred_list, UL8, LL7)
        #
        # # UL 区与 LL8 混淆（模型重合部分）
        # if rt.prop_rand(0.22):
        #     pred_list = uf.exchange_elements(pred_list, UL1, LL8)
        # if rt.prop_rand(0.23):
        #     pred_list = uf.exchange_elements(pred_list, UL2, LL8)
        # if rt.prop_rand(0.29):
        #     pred_list = uf.exchange_elements(pred_list, UL3, LL8)
        # if rt.prop_rand(0.22):
        #     pred_list = uf.exchange_elements(pred_list, UL4, LL8)
        # if rt.prop_rand(0.25):
        #     pred_list = uf.exchange_elements(pred_list, UL5, LL8)
        # if rt.prop_rand(0.19):
        #     pred_list = uf.exchange_elements(pred_list, UL6, LL8)
        # if rt.prop_rand(0.11):
        #     pred_list = uf.exchange_elements(pred_list, UL8, LL8)
        #
        # if rt.prop_rand(0.29):
        #     pred_list = uf.exchange_elements(pred_list, UR1, LR7)
        # if rt.prop_rand(0.33):
        #     pred_list = uf.exchange_elements(pred_list, UR2, LR7)
        # if rt.prop_rand(0.41):
        #     pred_list = uf.exchange_elements(pred_list, UR3, LR7)
        # if rt.prop_rand(0.18):
        #     pred_list = uf.exchange_elements(pred_list, UR4, LR7)
        # if rt.prop_rand(0.16):
        #     pred_list = uf.exchange_elements(pred_list, UR5, LR7)
        # if rt.prop_rand(0.39):
        #     pred_list = uf.exchange_elements(pred_list, UR6, LR7)
        # if rt.prop_rand(0.15):
        #     pred_list = uf.exchange_elements(pred_list, UR8, LR7)
        #
        # if rt.prop_rand(0.29):
        #     pred_list = uf.exchange_elements(pred_list, UR1, LR8)
        # if rt.prop_rand(0.33):
        #     pred_list = uf.exchange_elements(pred_list, UR2, LR8)
        # if rt.prop_rand(0.41):
        #     pred_list = uf.exchange_elements(pred_list, UR3, LR8)
        # if rt.prop_rand(0.18):
        #     pred_list = uf.exchange_elements(pred_list, UR4, LR8)
        # if rt.prop_rand(0.16):
        #     pred_list = uf.exchange_elements(pred_list, UR5, LR8)
        # if rt.prop_rand(0.39):
        #     pred_list = uf.exchange_elements(pred_list, UR6, LR8)
        # if rt.prop_rand(0.15):
        #     pred_list = uf.exchange_elements(pred_list, UR8, LR8)

        # 以下为 model 的情况
        # UL 区与 LL7 混淆（模型重合部分）78对应的
        if rt.prop_rand(0.012):
            pred_list = uf.exchange_elements(pred_list, UL1, LL7)
        if rt.prop_rand(0.027):
            pred_list = uf.exchange_elements(pred_list, UL2, LL7)
        if rt.prop_rand(0.016):
            pred_list = uf.exchange_elements(pred_list, UL3, LL7)
        if rt.prop_rand(0.011):
            pred_list = uf.exchange_elements(pred_list, UL4, LL7)
        if rt.prop_rand(0.025):
            pred_list = uf.exchange_elements(pred_list, UL5, LL7)
        if rt.prop_rand(0.016):
            pred_list = uf.exchange_elements(pred_list, UL6, LL7)
        if rt.prop_rand(0.013):
            pred_list = uf.exchange_elements(pred_list, UL8, LL7)

        # UL 区与 LL8 混淆（模型重合部分）
        if rt.prop_rand(0.014):
            pred_list = uf.exchange_elements(pred_list, UL1, LL6)
        if rt.prop_rand(0.011):
            pred_list = uf.exchange_elements(pred_list, UL2, LL6)
        if rt.prop_rand(0.020):
            pred_list = uf.exchange_elements(pred_list, UL3, LL6)
        if rt.prop_rand(0.003):
            pred_list = uf.exchange_elements(pred_list, UL4, LL6)
        if rt.prop_rand(0.012):
            pred_list = uf.exchange_elements(pred_list, UL5, LL6)
        if rt.prop_rand(0.024):
            pred_list = uf.exchange_elements(pred_list, UL6, LL6)
        if rt.prop_rand(0.019):
            pred_list = uf.exchange_elements(pred_list, UL8, LL6)

        if rt.prop_rand(0.024):
            pred_list = uf.exchange_elements(pred_list, UR1, LR7)
        if rt.prop_rand(0.005):
            pred_list = uf.exchange_elements(pred_list, UR2, LR7)
        if rt.prop_rand(0.012):
            pred_list = uf.exchange_elements(pred_list, UR3, LR7)
        if rt.prop_rand(0.022):
            pred_list = uf.exchange_elements(pred_list, UR4, LR7)
        if rt.prop_rand(0.016):
            pred_list = uf.exchange_elements(pred_list, UR5, LR7)
        if rt.prop_rand(0.023):
            pred_list = uf.exchange_elements(pred_list, UR6, LR7)
        if rt.prop_rand(0.019):
            pred_list = uf.exchange_elements(pred_list, UR8, LR7)

        if rt.prop_rand(0.013):
            pred_list = uf.exchange_elements(pred_list, UR1, LR6)
        if rt.prop_rand(0.017):
            pred_list = uf.exchange_elements(pred_list, UR2, LR6)
        if rt.prop_rand(0.011):
            pred_list = uf.exchange_elements(pred_list, UR3, LR6)
        if rt.prop_rand(0.002):
            pred_list = uf.exchange_elements(pred_list, UR4, LR6)
        if rt.prop_rand(0.029):
            pred_list = uf.exchange_elements(pred_list, UR5, LR6)
        if rt.prop_rand(0.018):
            pred_list = uf.exchange_elements(pred_list, UR6, LR6)
        if rt.prop_rand(0.031):
            pred_list = uf.exchange_elements(pred_list, UR8, LR6)

        # if rt.prop_rand(0.11):
        #     pred_list = uf.exchange_elements(pred_list, UR4, UR2)
        # if rt.prop_rand(0.13):
        #     pred_list = uf.exchange_elements(pred_list, UR4, UR5)
        # if rt.prop_rand(0.12):
        #     pred_list = uf.exchange_elements(pred_list, UR5, UR6)
        # if rt.prop_rand(0.04):
        #     pred_list = uf.exchange_elements(pred_list, UR6, UR7)
        # if rt.prop_rand(0.1):
        #     pred_list = uf.exchange_elements(pred_list, UL4, UL2)
        # if rt.prop_rand(0.15):
        #     pred_list = uf.exchange_elements(pred_list, UL4, UL5)
        # if rt.prop_rand(0.11):
        #     pred_list = uf.exchange_elements(pred_list, UL5, UL6)
        # if rt.prop_rand(0.02):
        #     pred_list = uf.exchange_elements(pred_list, UL6, UL7)
        #
        # if rt.prop_rand(0.11):
        #     pred_list = uf.exchange_elements(pred_list, LR3, LR5)
        # if rt.prop_rand(0.13):
        #     pred_list = uf.exchange_elements(pred_list, LR5, LR6)
        # if rt.prop_rand(0.18):
        #     pred_list = uf.exchange_elements(pred_list, LR3, UR4)
        # if rt.prop_rand(0.11):
        #     pred_list = uf.exchange_elements(pred_list, LR5, UR5)
        # if rt.prop_rand(0.12):
        #     pred_list = uf.exchange_elements(pred_list, LL2, UL4)
        # if rt.prop_rand(0.07):
        #     pred_list = uf.exchange_elements(pred_list, LL3, LL5)
        # if rt.prop_rand(0.07):
        #     pred_list = uf.exchange_elements(pred_list, LL3, LL2)
        # if rt.prop_rand(0.13):
        #     pred_list = uf.exchange_elements(pred_list, LL5, UL6)
        # if rt.prop_rand(0.15):
        #     pred_list = uf.exchange_elements(pred_list, LL6, UL5)
        # if rt.prop_rand(0.13):
        #     pred_list = uf.exchange_elements(pred_list, LR1, LR2)
        # if rt.prop_rand(0.21):
        #     pred_list = uf.exchange_elements(pred_list, LR1, UR4)
        # if rt.prop_rand(0.22):
        #     pred_list = uf.exchange_elements(pred_list, LL1, UL4)

        # 上下混淆，遍历上 16 颗牙，各有 0.003 的概率，总计 0.048 概率
        # 渐变过渡

        exc_grd = [0.01, 0.005]
        # exc_grd = [0.4, 0.1]
        for j in range(0, 16):
            # 交换的位置是 j + 16 + np.random.choice(-2,1)
            if rt.prop_rand(prop_LU[j]):
                exc_offset = np.random.choice(np.arange(-len(exc_grd), len(exc_grd)))
                exc_idx = j + 16
                # 遍历过渡梯度
                for k in range(len(exc_grd)):
                    # 若随机到的偏移量=当前正在遍历的偏移量
                    if rt.prop_rand(exc_grd[k]) and abs(exc_offset) == (k + 1):
                        exc_idx = exc_idx + exc_offset
                while not (exc_idx in range(0, 32)):
                    exc_idx = j + 16 + np.random.choice(np.arange(-2, 2))
                pred_list = uf.exchange_elements(pred_list, j, exc_idx)

        # 将指定牙位删除后，写入矩阵中。此处不应该按下标删除，因为下标已经被混淆了。应当按值删除。

        # 这里要重新封装一下，因为后面要用到 delete 方法。
        pred_list = np.array(pred_list)

        # 将预测列表写入矩阵中
        pred_mat.append(pred_list)
    v.show_progress(1, 1)
    # 最终返回的是一个 32 ✖️ n 组的数据。
    return pred_mat


# 【32颗牙混淆矩阵】
def tooth32_conf_mat():
    # 注意：混淆矩阵不一定是对称的！
    global ticks
    # 要删除的牙齿，注释掉的表示显示
    delete_tooth = [
        # UL1, UL2, UL3, UL4, UL5, UL6, UL7, UL8,
        # UR1, UR2, UR3, UR4, UR5, UR6, UR7, UR8,
        # LL1, LL2, LL3, LL4, LL5, LL6, LL7, LL8,
        # LR1, LR2, LR3, LR4, LR5, LR6, LR7, LR8
    ]
    # 注释掉的就是保留的

    if len(delete_tooth) == 32:
        print("错误！删除了所有牙齿！")
        return

    # delete_tooth = []
    delete_tooth.sort(reverse=True)
    pred_mat = gen_pred_mat(delete_tooth=delete_tooth)
    print(pred_mat)
    true_val = np.delete(np.arange(0, 32), delete_tooth)
    for dt in delete_tooth:
        ticks.pop(dt)
    with open(r'.\pred_mat.txt', 'w') as f:
        print("pred_mat=", uf.mat2str(pred_mat), file=f)
        print("pred_mat 已写入文件")
    v.show_conf_mat(true_val, pred_mat, ticks, False)
    return


# 依据文件夹计算混淆矩阵
def tooth_conf_mat(path, area):
    t_list = tr.dir2_tooth_list(path)
    pred_mat = []
    for j in range(0, len(t_list)):
        pred_pos = tr.recognize_model_position(t_list[j])
        # 获取当前牙区的 标签列表
        pred_list = region2ticks(area)
        if pred_pos != t_list[j].depth:
            # 交换值
            pred_list = uf.exchange_elements(pred_list,
                                             region_pos_to_tick(area, pred_pos),
                                             region_pos_to_tick(area, t_list[j].depth))
        pred_mat.append(pred_list)
    v.show_conf_mat(region2ticks(area), pred_mat, region2ticks_name(area), True, True)
    return


# 牙区内分布示意图，显示模型位置和真实位置
def tooth_dist(lower_path, upper_path, name, area_1, area_2):
    # 下牙区
    t_list = tr.dir2_tooth_list(lower_path)
    x = np.array(np.arange(1, 9), dtype=np.int32)
    # 初始化矩阵
    pwr_mat_lower = [np.array([])] * len(x)
    for j in range(0, len(t_list)):
        power = tr.get_model_power(t_list[j])
        # 这里不能直接 append，因为数组需要保持长宽一致。
        pwr_mat_lower[t_list[j].depth - 1] = np.append(pwr_mat_lower[t_list[j].depth - 1], power)

    # 上牙区
    t_list = tr.dir2_tooth_list(upper_path)
    x = np.array(np.arange(1, 9), dtype=np.int32)
    pwr_mat_upper = [np.array([])] * len(x)
    for j in range(0, len(t_list)):
        power = tr.get_model_power(t_list[j])
        pwr_mat_upper[t_list[j].depth - 1] = np.append(pwr_mat_upper[t_list[j].depth - 1], power)

    # 模型散点
    x_1, y_1 = m.get_model(name, area_1)
    x_2, y_2 = m.get_model(name, area_2)

    # 模型曲线
    params_pqd = [0.46, 0.35, 3.69]
    lower_x, lower_y = v.get_an_samp(uf.depth_distinguish_lower, proc_range=(0.8, 8.2), params=params_pqd)
    params_pqhd = [0.21, 0.11, 0.42, 0.37]
    upper_x, upper_y = v.get_an_samp(uf.depth_distinguish_upper, proc_range=(0.8, 8.2), params=params_pqhd)

    # 开始画图
    plt.figure(0, (3.5, 3))
    plt.rc("font", family="Times New Roman", size=14)
    plt.rcParams['figure.figsize'] = (8.0, 6.0)

    # 换侧时，主副数据调换位置，颜色调换位置。

    # 绘制箱线图
    plt.boxplot(pwr_mat_lower, positions=x, widths=[0.4] * len(x), boxprops=dict(color=C_0, linewidth=1.5),
                flierprops=dict(marker='o', alpha=0.6), medianprops=dict(color=C_0, linewidth=1))
    plt.boxplot(pwr_mat_upper, positions=x, widths=[0.4] * len(x), boxprops=dict(color=C_1, linewidth=1.5),
                flierprops=dict(marker='x', alpha=0.6), medianprops=dict(color=C_1, linewidth=1))

    # 画模型散点图
    plt.scatter(x_1, y_1, marker='o', color="blue", alpha=1)
    plt.scatter(x_2, y_2, marker='x', color="black", alpha=1)

    # 画模型曲线图
    plt.plot(lower_x, lower_y, linestyle='--', color='blue', label="lower")
    plt.plot(upper_x, upper_y, linestyle='--', color='orange', label="upper")

    plt.xlabel("Teeth Position", font=font)
    plt.ylabel("Power", font=font)
    plt.legend()
    plt.show()
    return


# 咀嚼面
def chew_surface(lower_chew_path, upper_chew_path, lower_path, upper_path, name, area_1, area_2):
    # 下牙区
    t_list = tr.dir2_tooth_list(lower_path)
    x = np.array(np.arange(1, 9), dtype=np.int32)
    # 初始化矩阵
    pwr_mat_lower = [np.array([])] * len(x)
    for j in range(0, len(t_list)):
        power = tr.get_model_power(t_list[j])
        # 这里不能直接 append，因为数组需要保持长宽一致。
        pwr_mat_lower[t_list[j].depth - 1] = np.append(pwr_mat_lower[t_list[j].depth - 1], power)

    # 下咀嚼面
    t_list = tr.dir2_tooth_list(lower_chew_path)
    pwr_mat_chew_lower = [np.array([])] * len(x)
    for j in range(0, len(t_list)):
        power = tr.get_model_power(t_list[j])
        # 这里不能直接 append，因为数组需要保持长宽一致。
        pwr_mat_chew_lower[t_list[j].depth - 1] = np.append(pwr_mat_chew_lower[t_list[j].depth - 1], power)

    # 上牙区
    t_list = tr.dir2_tooth_list(upper_path)
    x = np.array(np.arange(1, 9), dtype=np.int32)
    pwr_mat_upper = [np.array([])] * len(x)
    for j in range(0, len(t_list)):
        power = tr.get_model_power(t_list[j])
        pwr_mat_upper[t_list[j].depth - 1] = np.append(pwr_mat_upper[t_list[j].depth - 1], power)

    # 下咀嚼面
    t_list = tr.dir2_tooth_list(upper_chew_path)
    pwr_mat_chew_upper = [np.array([])] * len(x)
    for j in range(0, len(t_list)):
        power = tr.get_model_power(t_list[j])
        # 这里不能直接 append，因为数组需要保持长宽一致。
        pwr_mat_chew_upper[t_list[j].depth - 1] = np.append(pwr_mat_chew_upper[t_list[j].depth - 1], power)

    # 模型散点
    x_1, y_1 = m.get_model(name, area_1)
    x_2, y_2 = m.get_model(name, area_2)

    # 模型曲线
    params_pqd = [0.46, 0.35, 3.69]
    lower_x, lower_y = v.get_an_samp(uf.depth_distinguish_lower, proc_range=(0.8, 8.2), params=params_pqd)
    params_pqhd = [0.21, 0.11, 0.42, 0.37]
    upper_x, upper_y = v.get_an_samp(uf.depth_distinguish_upper, proc_range=(0.8, 8.2), params=params_pqhd)

    # 开始画图
    plt.figure(0, (3.5, 3))
    plt.rc("font", family="Times New Roman", size=14)
    plt.rcParams['figure.figsize'] = (8.0, 6.0)

    # 换侧时，主副数据调换位置，颜色调换位置。

    # 绘制箱线图
    plt.boxplot(pwr_mat_lower, positions=x, widths=[0.4] * len(x), boxprops=dict(color=C_0, linewidth=1.5),
                flierprops=dict(marker='o', alpha=0.3), medianprops=dict(color=C_0, linewidth=1))
    plt.boxplot(pwr_mat_upper, positions=x, widths=[0.4] * len(x), boxprops=dict(color=C_1, linewidth=1.5),
                flierprops=dict(marker='x', alpha=0.3), medianprops=dict(color=C_1, linewidth=1))
    # 绘制咀嚼面
    plt.boxplot(pwr_mat_chew_lower, positions=x, widths=[0.4] * len(x), boxprops=dict(color=C_2, linewidth=1.5),
                flierprops=dict(marker='x', alpha=0.3), medianprops=dict(color=C_2, linewidth=1))
    plt.boxplot(pwr_mat_chew_upper, positions=x, widths=[0.4] * len(x), boxprops=dict(color=C_3, linewidth=1.5),
                flierprops=dict(marker='x', alpha=0.3), medianprops=dict(color=C_3, linewidth=1))

    # 画模型散点图
    plt.scatter(x_1, y_1, marker='o', color="blue", alpha=1)
    plt.scatter(x_2, y_2, marker='x', color="black", alpha=1)

    # 画模型曲线图
    plt.plot(lower_x, lower_y, linestyle='--', color='blue', label="lower")
    plt.plot(upper_x, upper_y, linestyle='--', color='orange', label="upper")

    plt.xlabel("Teeth Position", font=font)
    plt.ylabel("Power", font=font)
    plt.legend()
    plt.show()
    return


# 累积齿宽数据
def cumulative_width():
    x = range(1, 10)
    # 下牙数据
    # y = [0, 14, 26.5, 37.5, 44.5, 51.5, 58, 64, 69.5]
    # 上牙数据
    y = [0, 14, 26.5, 36.5, 43, 50, 57.5, 64, 72.5]

    # 画拟合虚线
    # line = uf.get_poly_curve(x, y, 4)
    # x_ = np.arange(1, 9, 0.01)
    # y_ = line(x_)

    plt.figure(0, (7, 4.5))
    plt.rc("font", family="Times New Roman", size=24)
    plt.rcParams['figure.figsize'] = (6.0, 1.0)

    # plt.plot(x_, y_, alpha=0.6, linestyle='--', c='orange')

    plt.plot(x, y)
    # plt.plot(x, y, marker='o')

    # plt.text 需要对每个位置逐个画上去
    # 关于数字位置：https://blog.csdn.net/weixin_43114969/article/details/113476276
    for a, b in zip(x, y):
        plt.text(a, b, b, ha='center', va='bottom')
    plt.xticks(range(1, 10), range(1, 10))
    plt.xlabel("Position")
    plt.ylabel("Cumulative Length(mm)")

    # plt.legend()
    # plt.grid(axis='y')

    # plt.savefig(r"./cumulative_width.png")
    plt.show()
    return

# -------------------- 其他 --------------------

# 画图常用颜色 ['indianred', '#106D9C', '#00A2DE'] 暗粉色、暗蓝色、暗青色
# 画图常用标记 marker = ['*', '+', '^', 'x', 'o'] ^ 表示三角形 markersize = 7
# 常用线型 linestyle = ['-', '--', '-.', ':'] 实、虚、点画线、点线
